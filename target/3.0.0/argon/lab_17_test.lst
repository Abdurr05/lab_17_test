
c:/Users/Abdurrahman/Documents/labs/lab_17_test/target/3.0.0/argon/lab_17_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003df4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7e10  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003dee8  000d7e14  0001dee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008a0  2003df50  2003df50  0002df50  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7e7c  000d7e7c  00027e7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7ea4  000d7ea4  00027ea4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010f9f9  00000000  00000000  00027ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fbcb  00000000  00000000  001378a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002e54f  00000000  00000000  0014746c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002610  00000000  00000000  001759bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008438  00000000  00000000  00177fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030bc2  00000000  00000000  00180403  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002dece  00000000  00000000  001b0fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00121097  00000000  00000000  001dee93  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006b54  00000000  00000000  002fff2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fbdb 	bl	d77e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fbfd 	bl	d7838 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dee8 	.word	0x2003dee8
   d4048:	000d7e14 	.word	0x000d7e14
   d404c:	2003df50 	.word	0x2003df50
   d4050:	2003df50 	.word	0x2003df50
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 ffeb 	bl	d7038 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7de8 	.word	0x000d7de8
   d407c:	000d7e0c 	.word	0x000d7e0c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b82a 	b.w	d40d8 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f84b 	bl	d4120 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 bf95 	b.w	d6fbc <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb3f 	b.w	d4714 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bb45 	b.w	d4724 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fb37 	bl	d4724 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}

000d40ba <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
BlePeerDevice peer;
uint8_t txBuf[UART_TX_BUF_SIZE];
size_t txLen = 0;
const unsigned long SCAN_PERIOD_MS = 2000;
unsigned long lastScan = 0;
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40ba:	b538      	push	{r3, r4, r5, lr}
   d40bc:	4604      	mov	r4, r0
   d40be:	1845      	adds	r5, r0, r1
    for (size_t ii = 0; ii < len; ii++) {
   d40c0:	42ac      	cmp	r4, r5
   d40c2:	d007      	beq.n	d40d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a>
        Serial.print(data[ii]);
   d40c4:	f003 f8c2 	bl	d724c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d40c8:	f814 1b01 	ldrb.w	r1, [r4], #1
   d40cc:	220a      	movs	r2, #10
   d40ce:	f002 ff08 	bl	d6ee2 <_ZN5Print11printNumberEmh>
    for (size_t ii = 0; ii < len; ii++) {
   d40d2:	e7f5      	b.n	d40c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6>
    }
}
   d40d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d40d8 <setup>:
//   0xFF,0xFF,0xE7,0xFC
// };



void setup() {
   d40d8:	b508      	push	{r3, lr}
      Serial.begin(9600);
   d40da:	f003 f8b7 	bl	d724c <_Z16_fetch_usbserialv>
   d40de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40e2:	f003 f8a3 	bl	d722c <_ZN9USBSerial5beginEl>
	while (!Serial.isConnected());
   d40e6:	f003 f8b1 	bl	d724c <_Z16_fetch_usbserialv>
   d40ea:	f003 f8a3 	bl	d7234 <_ZN9USBSerial11isConnectedEv>
   d40ee:	2800      	cmp	r0, #0
   d40f0:	d0f9      	beq.n	d40e6 <setup+0xe>
	Serial.println("Central initialized...");
   d40f2:	f003 f8ab 	bl	d724c <_Z16_fetch_usbserialv>
   d40f6:	4907      	ldr	r1, [pc, #28]	; (d4114 <setup+0x3c>)
   d40f8:	f002 fee9 	bl	d6ece <_ZN5Print7printlnEPKc>
	BLE.on();
   d40fc:	f001 faa2 	bl	d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4100:	f001 faee 	bl	d56e0 <_ZNK8particle14BleLocalDevice2onEv>
    peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   d4104:	4a04      	ldr	r2, [pc, #16]	; (d4118 <setup+0x40>)
   d4106:	4905      	ldr	r1, [pc, #20]	; (d411c <setup+0x44>)
	// config.setPositionInterrupt(16);
	// bool setupSuccess = accel.setup(config);
	// Serial.printlnf("setupSuccess=%d", setupSuccess);
  // Put initialization like pinMode and begin functions here.

}
   d4108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   d410c:	4610      	mov	r0, r2
   d410e:	f001 bf45 	b.w	d5f9c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4112:	bf00      	nop
   d4114:	000d78f4 	.word	0x000d78f4
   d4118:	2003dfb0 	.word	0x2003dfb0
   d411c:	000d40bb 	.word	0x000d40bb

000d4120 <loop>:

// loop() runs over and over again, as quickly as it can execute.

void loop() {
   d4120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4124:	b088      	sub	sp, #32
      if (BLE.connected()) {
   d4126:	f001 fa8d 	bl	d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d412a:	f001 fb73 	bl	d5814 <_ZNK8particle14BleLocalDevice9connectedEv>
   d412e:	4604      	mov	r4, r0
   d4130:	b348      	cbz	r0, d4186 <loop+0x66>
   d4132:	4c3c      	ldr	r4, [pc, #240]	; (d4224 <loop+0x104>)
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
            txBuf[txLen++] = Serial.read();
   d4134:	4d3c      	ldr	r5, [pc, #240]	; (d4228 <loop+0x108>)
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
   d4136:	f003 f889 	bl	d724c <_Z16_fetch_usbserialv>
   d413a:	6803      	ldr	r3, [r0, #0]
   d413c:	691b      	ldr	r3, [r3, #16]
   d413e:	4798      	blx	r3
   d4140:	b1a8      	cbz	r0, d416e <loop+0x4e>
   d4142:	6823      	ldr	r3, [r4, #0]
   d4144:	2b13      	cmp	r3, #19
   d4146:	d812      	bhi.n	d416e <loop+0x4e>
            txBuf[txLen++] = Serial.read();
   d4148:	f003 f880 	bl	d724c <_Z16_fetch_usbserialv>
   d414c:	6803      	ldr	r3, [r0, #0]
   d414e:	695b      	ldr	r3, [r3, #20]
   d4150:	4798      	blx	r3
   d4152:	6823      	ldr	r3, [r4, #0]
   d4154:	1c5a      	adds	r2, r3, #1
   d4156:	54e8      	strb	r0, [r5, r3]
   d4158:	6022      	str	r2, [r4, #0]
            Serial.write(txBuf[txLen - 1]);
   d415a:	f003 f877 	bl	d724c <_Z16_fetch_usbserialv>
   d415e:	6823      	ldr	r3, [r4, #0]
   d4160:	6802      	ldr	r2, [r0, #0]
   d4162:	442b      	add	r3, r5
   d4164:	6892      	ldr	r2, [r2, #8]
   d4166:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   d416a:	4790      	blx	r2
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
   d416c:	e7e3      	b.n	d4136 <loop+0x16>
        }
        if (txLen > 0) {
   d416e:	6822      	ldr	r2, [r4, #0]
   d4170:	b132      	cbz	r2, d4180 <loop+0x60>
        	// Transmit the data to the BLE peripheral
            peerRxCharacteristic.setValue(txBuf, txLen);
   d4172:	2300      	movs	r3, #0
   d4174:	492c      	ldr	r1, [pc, #176]	; (d4228 <loop+0x108>)
   d4176:	482d      	ldr	r0, [pc, #180]	; (d422c <loop+0x10c>)
   d4178:	f001 f88e 	bl	d5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            txLen = 0;
   d417c:	2300      	movs	r3, #0
   d417e:	6023      	str	r3, [r4, #0]
	// display.display();
  // delay(200);

  // The core of your code will likely live here.

}
   d4180:	b008      	add	sp, #32
   d4182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d4186:	4d2a      	ldr	r5, [pc, #168]	; (d4230 <loop+0x110>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4188:	f000 f8ee 	bl	d4368 <HAL_Timer_Get_Milli_Seconds>
   d418c:	682b      	ldr	r3, [r5, #0]
   d418e:	1ac0      	subs	r0, r0, r3
   d4190:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4194:	d3f4      	bcc.n	d4180 <loop+0x60>
   d4196:	f000 f8e7 	bl	d4368 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   d419a:	6028      	str	r0, [r5, #0]
    		size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   d419c:	f001 fa52 	bl	d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41a0:	4924      	ldr	r1, [pc, #144]	; (d4234 <loop+0x114>)
   d41a2:	2214      	movs	r2, #20
   d41a4:	f001 fb74 	bl	d5890 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
			if (count > 0) {
   d41a8:	4606      	mov	r6, r0
   d41aa:	2800      	cmp	r0, #0
   d41ac:	d0e8      	beq.n	d4180 <loop+0x60>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   d41ae:	4f21      	ldr	r7, [pc, #132]	; (d4234 <loop+0x114>)
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   d41b0:	f8df 8094 	ldr.w	r8, [pc, #148]	; d4248 <loop+0x128>
					BleUuid foundServiceUuid;
   d41b4:	2554      	movs	r5, #84	; 0x54
   d41b6:	a803      	add	r0, sp, #12
   d41b8:	fb14 f505 	smulbb	r5, r4, r5
   d41bc:	f000 fe06 	bl	d4dcc <_ZN8particle7BleUuidC1Ev>
   d41c0:	f105 0008 	add.w	r0, r5, #8
					size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   d41c4:	2201      	movs	r2, #1
   d41c6:	a903      	add	r1, sp, #12
   d41c8:	4438      	add	r0, r7
   d41ca:	f002 f8ba 	bl	d6342 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   d41ce:	b920      	cbnz	r0, d41da <loop+0xba>
				for (uint8_t ii = 0; ii < count; ii++) {
   d41d0:	3401      	adds	r4, #1
   d41d2:	b2e4      	uxtb	r4, r4
   d41d4:	42b4      	cmp	r4, r6
   d41d6:	d3ed      	bcc.n	d41b4 <loop+0x94>
   d41d8:	e7d2      	b.n	d4180 <loop+0x60>
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   d41da:	4641      	mov	r1, r8
   d41dc:	a803      	add	r0, sp, #12
   d41de:	f000 fe61 	bl	d4ea4 <_ZNK8particle7BleUuideqERKS0_>
   d41e2:	2800      	cmp	r0, #0
   d41e4:	d0f4      	beq.n	d41d0 <loop+0xb0>
						peer = BLE.connect(scanResults[ii].address());
   d41e6:	f001 fa2d 	bl	d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41ea:	2301      	movs	r3, #1
   d41ec:	4601      	mov	r1, r0
   d41ee:	197a      	adds	r2, r7, r5
   d41f0:	a801      	add	r0, sp, #4
   d41f2:	f002 fbe3 	bl	d69bc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d41f6:	a901      	add	r1, sp, #4
   d41f8:	480f      	ldr	r0, [pc, #60]	; (d4238 <loop+0x118>)
   d41fa:	f001 f993 	bl	d5524 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d41fe:	a801      	add	r0, sp, #4
   d4200:	f001 fbb4 	bl	d596c <_ZN8particle13BlePeerDeviceD1Ev>
						if (peer.connected()) {
   d4204:	480c      	ldr	r0, [pc, #48]	; (d4238 <loop+0x118>)
   d4206:	f001 f997 	bl	d5538 <_ZNK8particle13BlePeerDevice9connectedEv>
   d420a:	2800      	cmp	r0, #0
   d420c:	d0b8      	beq.n	d4180 <loop+0x60>
							peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   d420e:	4a0b      	ldr	r2, [pc, #44]	; (d423c <loop+0x11c>)
   d4210:	490b      	ldr	r1, [pc, #44]	; (d4240 <loop+0x120>)
   d4212:	4809      	ldr	r0, [pc, #36]	; (d4238 <loop+0x118>)
   d4214:	f001 ff05 	bl	d6022 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
							peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   d4218:	4a0a      	ldr	r2, [pc, #40]	; (d4244 <loop+0x124>)
   d421a:	4904      	ldr	r1, [pc, #16]	; (d422c <loop+0x10c>)
   d421c:	4806      	ldr	r0, [pc, #24]	; (d4238 <loop+0x118>)
   d421e:	f001 ff00 	bl	d6022 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
}
   d4222:	e7ad      	b.n	d4180 <loop+0x60>
   d4224:	2003e65c 	.word	0x2003e65c
   d4228:	2003e648 	.word	0x2003e648
   d422c:	2003dfa8 	.word	0x2003dfa8
   d4230:	2003df9c 	.word	0x2003df9c
   d4234:	2003dfb8 	.word	0x2003dfb8
   d4238:	2003dfa0 	.word	0x2003dfa0
   d423c:	2003df88 	.word	0x2003df88
   d4240:	2003dfb0 	.word	0x2003dfb0
   d4244:	2003df74 	.word	0x2003df74
   d4248:	2003df60 	.word	0x2003df60

000d424c <_GLOBAL__sub_I_SystemMode>:
   d424c:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d424e:	4c26      	ldr	r4, [pc, #152]	; (d42e8 <_GLOBAL__sub_I_SystemMode+0x9c>)
    SleepResult() {}
   d4250:	4b26      	ldr	r3, [pc, #152]	; (d42ec <_GLOBAL__sub_I_SystemMode+0xa0>)
   d4252:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4254:	2500      	movs	r5, #0
   d4256:	6025      	str	r5, [r4, #0]
   d4258:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d425a:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d425c:	2003      	movs	r0, #3
   d425e:	f000 f9cd 	bl	d45fc <set_system_mode>
SYSTEM_MODE(MANUAL);
   d4262:	4a23      	ldr	r2, [pc, #140]	; (d42f0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   d4264:	4923      	ldr	r1, [pc, #140]	; (d42f4 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d4266:	4620      	mov	r0, r4
   d4268:	f003 f986 	bl	d7578 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d426c:	4629      	mov	r1, r5
   d426e:	2001      	movs	r0, #1
   d4270:	f000 f9cc 	bl	d460c <system_thread_set_state>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4274:	4920      	ldr	r1, [pc, #128]	; (d42f8 <_GLOBAL__sub_I_SystemMode+0xac>)
   d4276:	4821      	ldr	r0, [pc, #132]	; (d42fc <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4278:	4c21      	ldr	r4, [pc, #132]	; (d4300 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d427a:	f000 fe8d 	bl	d4f98 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d427e:	4921      	ldr	r1, [pc, #132]	; (d4304 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d4280:	4821      	ldr	r0, [pc, #132]	; (d4308 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d4282:	f000 fe89 	bl	d4f98 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4286:	4921      	ldr	r1, [pc, #132]	; (d430c <_GLOBAL__sub_I_SystemMode+0xc0>)
   d4288:	4821      	ldr	r0, [pc, #132]	; (d4310 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d428a:	f000 fe85 	bl	d4f98 <_ZN8particle7BleUuidC1EPKc>
   d428e:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   d4290:	267f      	movs	r6, #127	; 0x7f
   d4292:	4620      	mov	r0, r4
   d4294:	f000 fd8f 	bl	d4db6 <_ZN8particle10BleAddressC1Ev>
   d4298:	f104 0008 	add.w	r0, r4, #8
   d429c:	f000 ff25 	bl	d50ea <_ZN8particle18BleAdvertisingDataC1Ev>
   d42a0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d42a4:	f000 ff21 	bl	d50ea <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   d42a8:	3d01      	subs	r5, #1
   d42aa:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
   d42ae:	f104 0454 	add.w	r4, r4, #84	; 0x54
   d42b2:	d1ee      	bne.n	d4292 <_GLOBAL__sub_I_SystemMode+0x46>
BleCharacteristic peerTxCharacteristic;
   d42b4:	4817      	ldr	r0, [pc, #92]	; (d4314 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d42b6:	f000 ffd5 	bl	d5264 <_ZN8particle17BleCharacteristicC1Ev>
   d42ba:	4a0d      	ldr	r2, [pc, #52]	; (d42f0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   d42bc:	4916      	ldr	r1, [pc, #88]	; (d4318 <_GLOBAL__sub_I_SystemMode+0xcc>)
   d42be:	4815      	ldr	r0, [pc, #84]	; (d4314 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d42c0:	f003 f95a 	bl	d7578 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d42c4:	4815      	ldr	r0, [pc, #84]	; (d431c <_GLOBAL__sub_I_SystemMode+0xd0>)
   d42c6:	f000 ffcd 	bl	d5264 <_ZN8particle17BleCharacteristicC1Ev>
   d42ca:	4a09      	ldr	r2, [pc, #36]	; (d42f0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   d42cc:	4912      	ldr	r1, [pc, #72]	; (d4318 <_GLOBAL__sub_I_SystemMode+0xcc>)
   d42ce:	4813      	ldr	r0, [pc, #76]	; (d431c <_GLOBAL__sub_I_SystemMode+0xd0>)
   d42d0:	f003 f952 	bl	d7578 <__aeabi_atexit>
BlePeerDevice peer;
   d42d4:	4812      	ldr	r0, [pc, #72]	; (d4320 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d42d6:	f001 f903 	bl	d54e0 <_ZN8particle13BlePeerDeviceC1Ev>
}
   d42da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BlePeerDevice peer;
   d42de:	4a04      	ldr	r2, [pc, #16]	; (d42f0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   d42e0:	4910      	ldr	r1, [pc, #64]	; (d4324 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d42e2:	480f      	ldr	r0, [pc, #60]	; (d4320 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d42e4:	f003 b948 	b.w	d7578 <__aeabi_atexit>
   d42e8:	2003df54 	.word	0x2003df54
   d42ec:	ffff0000 	.word	0xffff0000
   d42f0:	2003df50 	.word	0x2003df50
   d42f4:	000d40ab 	.word	0x000d40ab
   d42f8:	000d790b 	.word	0x000d790b
   d42fc:	2003df60 	.word	0x2003df60
   d4300:	2003dfb8 	.word	0x2003dfb8
   d4304:	000d7930 	.word	0x000d7930
   d4308:	2003df74 	.word	0x2003df74
   d430c:	000d7955 	.word	0x000d7955
   d4310:	2003df88 	.word	0x2003df88
   d4314:	2003dfb0 	.word	0x2003dfb0
   d4318:	000d595f 	.word	0x000d595f
   d431c:	2003dfa8 	.word	0x2003dfa8
   d4320:	2003dfa0 	.word	0x2003dfa0
   d4324:	000d596d 	.word	0x000d596d

000d4328 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <netdb_freeaddrinfo+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	689b      	ldr	r3, [r3, #8]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030268 	.word	0x00030268

000d4338 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <netdb_getaddrinfo+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	68db      	ldr	r3, [r3, #12]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030268 	.word	0x00030268

000d4348 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <HAL_RNG_GetRandomNumber+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	685b      	ldr	r3, [r3, #4]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030218 	.word	0x00030218

000d4358 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <HAL_Delay_Microseconds+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	68db      	ldr	r3, [r3, #12]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030218 	.word	0x00030218

000d4368 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	695b      	ldr	r3, [r3, #20]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030218 	.word	0x00030218

000d4378 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <hal_ble_stack_init+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	689b      	ldr	r3, [r3, #8]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030278 	.word	0x00030278

000d4388 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <hal_ble_gap_start_scan+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030278 	.word	0x00030278

000d4398 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b03      	ldr	r3, [pc, #12]	; (d43a8 <hal_ble_gap_stop_scan+0x10>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d43a2:	9301      	str	r3, [sp, #4]
   d43a4:	bd08      	pop	{r3, pc}
   d43a6:	0000      	.short	0x0000
   d43a8:	00030278 	.word	0x00030278

000d43ac <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b03      	ldr	r3, [pc, #12]	; (d43bc <hal_ble_gap_disconnect+0x10>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d43b6:	9301      	str	r3, [sp, #4]
   d43b8:	bd08      	pop	{r3, pc}
   d43ba:	0000      	.short	0x0000
   d43bc:	00030278 	.word	0x00030278

000d43c0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b03      	ldr	r3, [pc, #12]	; (d43d0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d43ca:	9301      	str	r3, [sp, #4]
   d43cc:	bd08      	pop	{r3, pc}
   d43ce:	0000      	.short	0x0000
   d43d0:	00030278 	.word	0x00030278

000d43d4 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b03      	ldr	r3, [pc, #12]	; (d43e4 <hal_ble_gatt_client_discover_all_services+0x10>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d43de:	9301      	str	r3, [sp, #4]
   d43e0:	bd08      	pop	{r3, pc}
   d43e2:	0000      	.short	0x0000
   d43e4:	00030278 	.word	0x00030278

000d43e8 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b03      	ldr	r3, [pc, #12]	; (d43f8 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d43f2:	9301      	str	r3, [sp, #4]
   d43f4:	bd08      	pop	{r3, pc}
   d43f6:	0000      	.short	0x0000
   d43f8:	00030278 	.word	0x00030278

000d43fc <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b03      	ldr	r3, [pc, #12]	; (d440c <hal_ble_gatt_client_write_with_response+0x10>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4406:	9301      	str	r3, [sp, #4]
   d4408:	bd08      	pop	{r3, pc}
   d440a:	0000      	.short	0x0000
   d440c:	00030278 	.word	0x00030278

000d4410 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b03      	ldr	r3, [pc, #12]	; (d4420 <hal_ble_gatt_client_write_without_response+0x10>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d441a:	9301      	str	r3, [sp, #4]
   d441c:	bd08      	pop	{r3, pc}
   d441e:	0000      	.short	0x0000
   d4420:	00030278 	.word	0x00030278

000d4424 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b03      	ldr	r3, [pc, #12]	; (d4434 <hal_ble_gatt_client_read+0x10>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d442e:	9301      	str	r3, [sp, #4]
   d4430:	bd08      	pop	{r3, pc}
   d4432:	0000      	.short	0x0000
   d4434:	00030278 	.word	0x00030278

000d4438 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b03      	ldr	r3, [pc, #12]	; (d4448 <hal_ble_gap_connect+0x10>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d4442:	9301      	str	r3, [sp, #4]
   d4444:	bd08      	pop	{r3, pc}
   d4446:	0000      	.short	0x0000
   d4448:	00030278 	.word	0x00030278

000d444c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b03      	ldr	r3, [pc, #12]	; (d445c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4456:	9301      	str	r3, [sp, #4]
   d4458:	bd08      	pop	{r3, pc}
   d445a:	0000      	.short	0x0000
   d445c:	00030278 	.word	0x00030278

000d4460 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b03      	ldr	r3, [pc, #12]	; (d4470 <hal_ble_gatt_client_configure_cccd+0x10>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d446a:	9301      	str	r3, [sp, #4]
   d446c:	bd08      	pop	{r3, pc}
   d446e:	0000      	.short	0x0000
   d4470:	00030278 	.word	0x00030278

000d4474 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b03      	ldr	r3, [pc, #12]	; (d4484 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d447e:	9301      	str	r3, [sp, #4]
   d4480:	bd08      	pop	{r3, pc}
   d4482:	0000      	.short	0x0000
   d4484:	00030278 	.word	0x00030278

000d4488 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b03      	ldr	r3, [pc, #12]	; (d4498 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4492:	9301      	str	r3, [sp, #4]
   d4494:	bd08      	pop	{r3, pc}
   d4496:	0000      	.short	0x0000
   d4498:	00030278 	.word	0x00030278

000d449c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <os_mutex_recursive_create+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030248 	.word	0x00030248

000d44ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <os_mutex_recursive_destroy+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	00030248 	.word	0x00030248

000d44bc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <os_mutex_recursive_lock+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030248 	.word	0x00030248

000d44cc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <os_mutex_recursive_unlock+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030248 	.word	0x00030248

000d44dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <inet_inet_ntop+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	695b      	ldr	r3, [r3, #20]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030264 	.word	0x00030264

000d44ec <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <hal_usart_init+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	681b      	ldr	r3, [r3, #0]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003023c 	.word	0x0003023c

000d44fc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <hal_usart_write+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	68db      	ldr	r3, [r3, #12]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003023c 	.word	0x0003023c

000d450c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <hal_usart_available+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	691b      	ldr	r3, [r3, #16]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	0003023c 	.word	0x0003023c

000d451c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <hal_usart_read+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	695b      	ldr	r3, [r3, #20]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	0003023c 	.word	0x0003023c

000d452c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <hal_usart_peek+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	699b      	ldr	r3, [r3, #24]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	0003023c 	.word	0x0003023c

000d453c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <hal_usart_flush+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	69db      	ldr	r3, [r3, #28]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003023c 	.word	0x0003023c

000d454c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <hal_usart_available_data_for_write+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003023c 	.word	0x0003023c

000d455c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <HAL_USB_USART_Init+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	681b      	ldr	r3, [r3, #0]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003024c 	.word	0x0003024c

000d456c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <HAL_USB_USART_Begin+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	685b      	ldr	r3, [r3, #4]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003024c 	.word	0x0003024c

000d457c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <HAL_USB_USART_Available_Data+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	691b      	ldr	r3, [r3, #16]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	0003024c 	.word	0x0003024c

000d458c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	695b      	ldr	r3, [r3, #20]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	0003024c 	.word	0x0003024c

000d459c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_USB_USART_Receive_Data+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	699b      	ldr	r3, [r3, #24]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	0003024c 	.word	0x0003024c

000d45ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_USB_USART_Send_Data+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	69db      	ldr	r3, [r3, #28]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003024c 	.word	0x0003024c

000d45bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_USB_USART_Flush_Data+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6a1b      	ldr	r3, [r3, #32]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	0003024c 	.word	0x0003024c

000d45cc <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <HAL_USB_USART_Is_Connected+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003024c 	.word	0x0003024c

000d45dc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <panic_+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030260 	.word	0x00030260

000d45ec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <log_message+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030260 	.word	0x00030260

000d45fc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <set_system_mode+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	685b      	ldr	r3, [r3, #4]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030220 	.word	0x00030220

000d460c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <system_thread_set_state+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030220 	.word	0x00030220

000d461c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b03      	ldr	r3, [pc, #12]	; (d462c <system_ctrl_set_app_request_handler+0x10>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4626:	9301      	str	r3, [sp, #4]
   d4628:	bd08      	pop	{r3, pc}
   d462a:	0000      	.short	0x0000
   d462c:	00030220 	.word	0x00030220

000d4630 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b03      	ldr	r3, [pc, #12]	; (d4640 <system_ctrl_set_result+0x10>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d463a:	9301      	str	r3, [sp, #4]
   d463c:	bd08      	pop	{r3, pc}
   d463e:	0000      	.short	0x0000
   d4640:	00030220 	.word	0x00030220

000d4644 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <network_connect+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	685b      	ldr	r3, [r3, #4]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030240 	.word	0x00030240

000d4654 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <network_connecting+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	689b      	ldr	r3, [r3, #8]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030240 	.word	0x00030240

000d4664 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <network_disconnect+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	68db      	ldr	r3, [r3, #12]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030240 	.word	0x00030240

000d4674 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <network_ready+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	691b      	ldr	r3, [r3, #16]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030240 	.word	0x00030240

000d4684 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <network_on+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	695b      	ldr	r3, [r3, #20]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030240 	.word	0x00030240

000d4694 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <network_off+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	699b      	ldr	r3, [r3, #24]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030240 	.word	0x00030240

000d46a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <network_listen+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	69db      	ldr	r3, [r3, #28]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030240 	.word	0x00030240

000d46b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <network_listening+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6a1b      	ldr	r3, [r3, #32]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030240 	.word	0x00030240

000d46c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <network_set_listen_timeout+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030240 	.word	0x00030240

000d46d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <network_get_listen_timeout+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030240 	.word	0x00030240

000d46e4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <network_is_on+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030240 	.word	0x00030240

000d46f4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <network_is_off+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030240 	.word	0x00030240

000d4704 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030244 	.word	0x00030244

000d4714 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <malloc+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	681b      	ldr	r3, [r3, #0]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003021c 	.word	0x0003021c

000d4724 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <free+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	685b      	ldr	r3, [r3, #4]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003021c 	.word	0x0003021c

000d4734 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <realloc+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	689b      	ldr	r3, [r3, #8]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003021c 	.word	0x0003021c

000d4744 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <abort+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003021c 	.word	0x0003021c

000d4754 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <newlib_impure_ptr_callback+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	0003021c 	.word	0x0003021c

000d4764 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4764:	2200      	movs	r2, #0
   d4766:	6840      	ldr	r0, [r0, #4]
   d4768:	4611      	mov	r1, r2
   d476a:	f7ff bfa3 	b.w	d46b4 <network_listening>

000d476e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d476e:	2200      	movs	r2, #0
   d4770:	6840      	ldr	r0, [r0, #4]
   d4772:	4611      	mov	r1, r2
   d4774:	f7ff bfae 	b.w	d46d4 <network_get_listen_timeout>

000d4778 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4778:	6840      	ldr	r0, [r0, #4]
   d477a:	2200      	movs	r2, #0
   d477c:	f7ff bfa2 	b.w	d46c4 <network_set_listen_timeout>

000d4780 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4780:	6840      	ldr	r0, [r0, #4]
   d4782:	2200      	movs	r2, #0
   d4784:	f081 0101 	eor.w	r1, r1, #1
   d4788:	f7ff bf8c 	b.w	d46a4 <network_listen>

000d478c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d478c:	2300      	movs	r3, #0
   d478e:	6840      	ldr	r0, [r0, #4]
   d4790:	461a      	mov	r2, r3
   d4792:	4619      	mov	r1, r3
   d4794:	f7ff bf7e 	b.w	d4694 <network_off>

000d4798 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4798:	2300      	movs	r3, #0
   d479a:	6840      	ldr	r0, [r0, #4]
   d479c:	461a      	mov	r2, r3
   d479e:	4619      	mov	r1, r3
   d47a0:	f7ff bf70 	b.w	d4684 <network_on>

000d47a4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47a4:	2200      	movs	r2, #0
   d47a6:	6840      	ldr	r0, [r0, #4]
   d47a8:	4611      	mov	r1, r2
   d47aa:	f7ff bf63 	b.w	d4674 <network_ready>

000d47ae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d47ae:	2200      	movs	r2, #0
   d47b0:	6840      	ldr	r0, [r0, #4]
   d47b2:	4611      	mov	r1, r2
   d47b4:	f7ff bf4e 	b.w	d4654 <network_connecting>

000d47b8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47b8:	6840      	ldr	r0, [r0, #4]
   d47ba:	2200      	movs	r2, #0
   d47bc:	2102      	movs	r1, #2
   d47be:	f7ff bf51 	b.w	d4664 <network_disconnect>

000d47c2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d47c2:	2300      	movs	r3, #0
   d47c4:	6840      	ldr	r0, [r0, #4]
   d47c6:	461a      	mov	r2, r3
   d47c8:	f7ff bf3c 	b.w	d4644 <network_connect>

000d47cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d47cc:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d47ce:	2203      	movs	r2, #3
   d47d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d47d2:	4a02      	ldr	r2, [pc, #8]	; (d47dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d47d4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d47d6:	4770      	bx	lr
   d47d8:	2003e660 	.word	0x2003e660
   d47dc:	000d7984 	.word	0x000d7984

000d47e0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d47e0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d47e2:	4b09      	ldr	r3, [pc, #36]	; (d4808 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d47e4:	4c09      	ldr	r4, [pc, #36]	; (d480c <_GLOBAL__sub_I_System+0x2c>)
   d47e6:	2202      	movs	r2, #2
   d47e8:	2000      	movs	r0, #0
   d47ea:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d47ec:	4b08      	ldr	r3, [pc, #32]	; (d4810 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d47ee:	6020      	str	r0, [r4, #0]
   d47f0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d47f2:	71a0      	strb	r0, [r4, #6]
   d47f4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47f6:	f7ff ff01 	bl	d45fc <set_system_mode>
SystemClass System;
   d47fa:	4620      	mov	r0, r4
   d47fc:	4a05      	ldr	r2, [pc, #20]	; (d4814 <_GLOBAL__sub_I_System+0x34>)
   d47fe:	4906      	ldr	r1, [pc, #24]	; (d4818 <_GLOBAL__sub_I_System+0x38>)
   d4800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4804:	f002 beb8 	b.w	d7578 <__aeabi_atexit>
   d4808:	2003e674 	.word	0x2003e674
   d480c:	2003e668 	.word	0x2003e668
   d4810:	ffff0000 	.word	0xffff0000
   d4814:	2003df50 	.word	0x2003df50
   d4818:	000d40ab 	.word	0x000d40ab

000d481c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d481c:	b510      	push	{r4, lr}
   d481e:	4604      	mov	r4, r0
{
	free(buffer);
   d4820:	6800      	ldr	r0, [r0, #0]
   d4822:	f7ff ff7f 	bl	d4724 <free>
}
   d4826:	4620      	mov	r0, r4
   d4828:	bd10      	pop	{r4, pc}

000d482a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d482a:	b510      	push	{r4, lr}
   d482c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d482e:	6800      	ldr	r0, [r0, #0]
   d4830:	b108      	cbz	r0, d4836 <_ZN6String10invalidateEv+0xc>
   d4832:	f7ff ff77 	bl	d4724 <free>
	buffer = NULL;
   d4836:	2300      	movs	r3, #0
	capacity = len = 0;
   d4838:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d483c:	6023      	str	r3, [r4, #0]
}
   d483e:	bd10      	pop	{r4, pc}

000d4840 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4840:	b538      	push	{r3, r4, r5, lr}
   d4842:	4604      	mov	r4, r0
   d4844:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4846:	6800      	ldr	r0, [r0, #0]
   d4848:	3101      	adds	r1, #1
   d484a:	f7ff ff73 	bl	d4734 <realloc>
	if (newbuffer) {
   d484e:	b110      	cbz	r0, d4856 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4850:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4854:	2001      	movs	r0, #1
	}
	return 0;
}
   d4856:	bd38      	pop	{r3, r4, r5, pc}

000d4858 <_ZN6String7reserveEj>:
{
   d4858:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d485a:	6803      	ldr	r3, [r0, #0]
{
   d485c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d485e:	b123      	cbz	r3, d486a <_ZN6String7reserveEj+0x12>
   d4860:	6843      	ldr	r3, [r0, #4]
   d4862:	428b      	cmp	r3, r1
   d4864:	d301      	bcc.n	d486a <_ZN6String7reserveEj+0x12>
   d4866:	2001      	movs	r0, #1
}
   d4868:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d486a:	4620      	mov	r0, r4
   d486c:	f7ff ffe8 	bl	d4840 <_ZN6String12changeBufferEj>
   d4870:	2800      	cmp	r0, #0
   d4872:	d0f9      	beq.n	d4868 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4874:	68a3      	ldr	r3, [r4, #8]
   d4876:	2b00      	cmp	r3, #0
   d4878:	d1f5      	bne.n	d4866 <_ZN6String7reserveEj+0xe>
   d487a:	6822      	ldr	r2, [r4, #0]
   d487c:	7013      	strb	r3, [r2, #0]
   d487e:	e7f2      	b.n	d4866 <_ZN6String7reserveEj+0xe>

000d4880 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4880:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4882:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4884:	4611      	mov	r1, r2
   d4886:	9201      	str	r2, [sp, #4]
{
   d4888:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d488a:	f7ff ffe5 	bl	d4858 <_ZN6String7reserveEj>
   d488e:	9a01      	ldr	r2, [sp, #4]
   d4890:	b928      	cbnz	r0, d489e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4892:	4620      	mov	r0, r4
   d4894:	f7ff ffc9 	bl	d482a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4898:	4620      	mov	r0, r4
   d489a:	b003      	add	sp, #12
   d489c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d489e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d48a0:	4629      	mov	r1, r5
   d48a2:	6820      	ldr	r0, [r4, #0]
   d48a4:	f002 ffa0 	bl	d77e8 <memcpy>
	buffer[len] = 0;
   d48a8:	6822      	ldr	r2, [r4, #0]
   d48aa:	68a3      	ldr	r3, [r4, #8]
   d48ac:	2100      	movs	r1, #0
   d48ae:	54d1      	strb	r1, [r2, r3]
	return *this;
   d48b0:	e7f2      	b.n	d4898 <_ZN6String4copyEPKcj+0x18>

000d48b2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d48b2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d48b4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d48b6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d48ba:	4604      	mov	r4, r0
	len = 0;
   d48bc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d48be:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d48c0:	b141      	cbz	r1, d48d4 <_ZN6StringC1EPKc+0x22>
   d48c2:	4608      	mov	r0, r1
   d48c4:	9101      	str	r1, [sp, #4]
   d48c6:	f002 fff5 	bl	d78b4 <strlen>
   d48ca:	9901      	ldr	r1, [sp, #4]
   d48cc:	4602      	mov	r2, r0
   d48ce:	4620      	mov	r0, r4
   d48d0:	f7ff ffd6 	bl	d4880 <_ZN6String4copyEPKcj>
}
   d48d4:	4620      	mov	r0, r4
   d48d6:	b002      	add	sp, #8
   d48d8:	bd10      	pop	{r4, pc}

000d48da <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d48da:	b538      	push	{r3, r4, r5, lr}
   d48dc:	4605      	mov	r5, r0
	if (buffer) {
   d48de:	6800      	ldr	r0, [r0, #0]
{
   d48e0:	460c      	mov	r4, r1
	if (buffer) {
   d48e2:	b168      	cbz	r0, d4900 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d48e4:	686a      	ldr	r2, [r5, #4]
   d48e6:	688b      	ldr	r3, [r1, #8]
   d48e8:	429a      	cmp	r2, r3
   d48ea:	d307      	bcc.n	d48fc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d48ec:	6809      	ldr	r1, [r1, #0]
   d48ee:	f002 ffd9 	bl	d78a4 <strcpy>
			len = rhs.len;
   d48f2:	68a3      	ldr	r3, [r4, #8]
   d48f4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d48f6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d48f8:	60a3      	str	r3, [r4, #8]
}
   d48fa:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d48fc:	f7ff ff12 	bl	d4724 <free>
	buffer = rhs.buffer;
   d4900:	6823      	ldr	r3, [r4, #0]
   d4902:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4904:	6863      	ldr	r3, [r4, #4]
   d4906:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4908:	68a3      	ldr	r3, [r4, #8]
   d490a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d490c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d490e:	e9c4 3300 	strd	r3, r3, [r4]
   d4912:	e7f1      	b.n	d48f8 <_ZN6String4moveERS_+0x1e>

000d4914 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4914:	b510      	push	{r4, lr}
	buffer = NULL;
   d4916:	2300      	movs	r3, #0
	capacity = 0;
   d4918:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d491c:	4604      	mov	r4, r0
	len = 0;
   d491e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4920:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4922:	f7ff ffda 	bl	d48da <_ZN6String4moveERS_>
}
   d4926:	4620      	mov	r0, r4
   d4928:	bd10      	pop	{r4, pc}

000d492a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d492a:	4288      	cmp	r0, r1
{
   d492c:	b510      	push	{r4, lr}
   d492e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4930:	d005      	beq.n	d493e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4932:	680b      	ldr	r3, [r1, #0]
   d4934:	b12b      	cbz	r3, d4942 <_ZN6StringaSERKS_+0x18>
   d4936:	688a      	ldr	r2, [r1, #8]
   d4938:	4619      	mov	r1, r3
   d493a:	f7ff ffa1 	bl	d4880 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d493e:	4620      	mov	r0, r4
   d4940:	bd10      	pop	{r4, pc}
	else invalidate();
   d4942:	f7ff ff72 	bl	d482a <_ZN6String10invalidateEv>
   d4946:	e7fa      	b.n	d493e <_ZN6StringaSERKS_+0x14>

000d4948 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4948:	b510      	push	{r4, lr}
	buffer = NULL;
   d494a:	2300      	movs	r3, #0
String::String(const String &value)
   d494c:	4604      	mov	r4, r0
	capacity = 0;
   d494e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4952:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4954:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4956:	f7ff ffe8 	bl	d492a <_ZN6StringaSERKS_>
}
   d495a:	4620      	mov	r0, r4
   d495c:	bd10      	pop	{r4, pc}

000d495e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d495e:	b513      	push	{r0, r1, r4, lr}
   d4960:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4962:	b159      	cbz	r1, d497c <_ZN6StringaSEPKc+0x1e>
   d4964:	4608      	mov	r0, r1
   d4966:	9101      	str	r1, [sp, #4]
   d4968:	f002 ffa4 	bl	d78b4 <strlen>
   d496c:	9901      	ldr	r1, [sp, #4]
   d496e:	4602      	mov	r2, r0
   d4970:	4620      	mov	r0, r4
   d4972:	f7ff ff85 	bl	d4880 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4976:	4620      	mov	r0, r4
   d4978:	b002      	add	sp, #8
   d497a:	bd10      	pop	{r4, pc}
	else invalidate();
   d497c:	f7ff ff55 	bl	d482a <_ZN6String10invalidateEv>
   d4980:	e7f9      	b.n	d4976 <_ZN6StringaSEPKc+0x18>

000d4982 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4982:	b570      	push	{r4, r5, r6, lr}
   d4984:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4986:	460e      	mov	r6, r1
   d4988:	b909      	cbnz	r1, d498e <_ZN6String6concatEPKcj+0xc>
   d498a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d498c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d498e:	b16a      	cbz	r2, d49ac <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4990:	6884      	ldr	r4, [r0, #8]
   d4992:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4994:	4621      	mov	r1, r4
   d4996:	f7ff ff5f 	bl	d4858 <_ZN6String7reserveEj>
   d499a:	2800      	cmp	r0, #0
   d499c:	d0f5      	beq.n	d498a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d499e:	6828      	ldr	r0, [r5, #0]
   d49a0:	68ab      	ldr	r3, [r5, #8]
   d49a2:	4631      	mov	r1, r6
   d49a4:	4418      	add	r0, r3
   d49a6:	f002 ff7d 	bl	d78a4 <strcpy>
	len = newlen;
   d49aa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d49ac:	2001      	movs	r0, #1
   d49ae:	e7ed      	b.n	d498c <_ZN6String6concatEPKcj+0xa>

000d49b0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d49b0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d49b2:	2300      	movs	r3, #0
	buf[0] = c;
   d49b4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d49b8:	2201      	movs	r2, #1
   d49ba:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d49bc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d49c0:	f7ff ffdf 	bl	d4982 <_ZN6String6concatEPKcj>
}
   d49c4:	b003      	add	sp, #12
   d49c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d49ca <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   d49ca:	6802      	ldr	r2, [r0, #0]
{
   d49cc:	460b      	mov	r3, r1
   d49ce:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   d49d0:	b162      	cbz	r2, d49ec <_ZNK6String9compareToERKS_+0x22>
   d49d2:	b941      	cbnz	r1, d49e6 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   d49d4:	6880      	ldr	r0, [r0, #8]
   d49d6:	b160      	cbz	r0, d49f2 <_ZNK6String9compareToERKS_+0x28>
   d49d8:	7810      	ldrb	r0, [r2, #0]
   d49da:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d49dc:	6898      	ldr	r0, [r3, #8]
   d49de:	b140      	cbz	r0, d49f2 <_ZNK6String9compareToERKS_+0x28>
   d49e0:	7809      	ldrb	r1, [r1, #0]
   d49e2:	4248      	negs	r0, r1
   d49e4:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   d49e6:	4610      	mov	r0, r2
   d49e8:	f002 bf52 	b.w	d7890 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d49ec:	2900      	cmp	r1, #0
   d49ee:	d1f5      	bne.n	d49dc <_ZNK6String9compareToERKS_+0x12>
		return 0;
   d49f0:	4608      	mov	r0, r1
}
   d49f2:	4770      	bx	lr

000d49f4 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   d49f4:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   d49f6:	6882      	ldr	r2, [r0, #8]
   d49f8:	688b      	ldr	r3, [r1, #8]
   d49fa:	429a      	cmp	r2, r3
   d49fc:	d105      	bne.n	d4a0a <_ZNK6String6equalsERKS_+0x16>
   d49fe:	f7ff ffe4 	bl	d49ca <_ZNK6String9compareToERKS_>
   d4a02:	fab0 f080 	clz	r0, r0
   d4a06:	0940      	lsrs	r0, r0, #5
}
   d4a08:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   d4a0a:	2000      	movs	r0, #0
   d4a0c:	e7fc      	b.n	d4a08 <_ZNK6String6equalsERKS_+0x14>

000d4a0e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
   d4a0e:	4770      	bx	lr

000d4a10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d4a10:	4770      	bx	lr

000d4a12 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      virtual void
      _M_dispose() noexcept
      {
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }
   d4a12:	4770      	bx	lr

000d4a14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4a14:	4770      	bx	lr
	...

000d4a18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
   d4a18:	4b06      	ldr	r3, [pc, #24]	; (d4a34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4a1a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4a1c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d4a1e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4a22:	d005      	beq.n	d4a30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4a24:	4608      	mov	r0, r1
   d4a26:	f002 fdb1 	bl	d758c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4a2a:	2800      	cmp	r0, #0
#endif
	   )
	  return __ptr;
	return nullptr;
   d4a2c:	bf08      	it	eq
   d4a2e:	2400      	moveq	r4, #0
      }
   d4a30:	4620      	mov	r0, r4
   d4a32:	bd10      	pop	{r4, pc}
   d4a34:	000d7bd0 	.word	0x000d7bd0

000d4a38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4a38:	4b06      	ldr	r3, [pc, #24]	; (d4a54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4a3a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4a3c:	b510      	push	{r4, lr}
   d4a3e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4a42:	d005      	beq.n	d4a50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4a44:	4608      	mov	r0, r1
   d4a46:	f002 fda1 	bl	d758c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4a4a:	2800      	cmp	r0, #0
	return nullptr;
   d4a4c:	bf08      	it	eq
   d4a4e:	2400      	moveq	r4, #0
      }
   d4a50:	4620      	mov	r0, r4
   d4a52:	bd10      	pop	{r4, pc}
   d4a54:	000d7bd0 	.word	0x000d7bd0

000d4a58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4a58:	4b06      	ldr	r3, [pc, #24]	; (d4a74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4a5a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4a5c:	b510      	push	{r4, lr}
   d4a5e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4a62:	d005      	beq.n	d4a70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4a64:	4608      	mov	r0, r1
   d4a66:	f002 fd91 	bl	d758c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4a6a:	2800      	cmp	r0, #0
	return nullptr;
   d4a6c:	bf08      	it	eq
   d4a6e:	2400      	moveq	r4, #0
      }
   d4a70:	4620      	mov	r0, r4
   d4a72:	bd10      	pop	{r4, pc}
   d4a74:	000d7bd0 	.word	0x000d7bd0

000d4a78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4a78:	b510      	push	{r4, lr}
   d4a7a:	2168      	movs	r1, #104	; 0x68
   d4a7c:	4604      	mov	r4, r0
   d4a7e:	f002 fd80 	bl	d7582 <_ZdlPvj>
   d4a82:	4620      	mov	r0, r4
   d4a84:	bd10      	pop	{r4, pc}

000d4a86 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4a86:	b510      	push	{r4, lr}
   d4a88:	2128      	movs	r1, #40	; 0x28
   d4a8a:	4604      	mov	r4, r0
   d4a8c:	f002 fd79 	bl	d7582 <_ZdlPvj>
   d4a90:	4620      	mov	r0, r4
   d4a92:	bd10      	pop	{r4, pc}

000d4a94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4a94:	b510      	push	{r4, lr}
   d4a96:	2130      	movs	r1, #48	; 0x30
   d4a98:	4604      	mov	r4, r0
   d4a9a:	f002 fd72 	bl	d7582 <_ZdlPvj>
   d4a9e:	4620      	mov	r0, r4
   d4aa0:	bd10      	pop	{r4, pc}

000d4aa2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4aa2:	f7ff baf8 	b.w	d4096 <_ZdlPv>

000d4aa6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4aa6:	f7ff baf6 	b.w	d4096 <_ZdlPv>

000d4aaa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4aaa:	f7ff baf4 	b.w	d4096 <_ZdlPv>

000d4aae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4aae:	b510      	push	{r4, lr}
          _M_dispose();
   d4ab0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4ab2:	4604      	mov	r4, r0
          _M_dispose();
   d4ab4:	689b      	ldr	r3, [r3, #8]
   d4ab6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ab8:	68a3      	ldr	r3, [r4, #8]
   d4aba:	3b01      	subs	r3, #1
   d4abc:	60a3      	str	r3, [r4, #8]
   d4abe:	b92b      	cbnz	r3, d4acc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4ac0:	6823      	ldr	r3, [r4, #0]
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	68db      	ldr	r3, [r3, #12]
    }
   d4ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4aca:	4718      	bx	r3
    }
   d4acc:	bd10      	pop	{r4, pc}

000d4ace <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4ace:	b510      	push	{r4, lr}
   d4ad0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ad2:	6800      	ldr	r0, [r0, #0]
   d4ad4:	b108      	cbz	r0, d4ada <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4ad6:	f7ff fce9 	bl	d44ac <os_mutex_recursive_destroy>
    }
   d4ada:	4620      	mov	r0, r4
   d4adc:	bd10      	pop	{r4, pc}
	...

000d4ae0 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d4ae0:	b510      	push	{r4, lr}
        mutex_.lock();
   d4ae2:	4b04      	ldr	r3, [pc, #16]	; (d4af4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d4ae4:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4ae6:	6818      	ldr	r0, [r3, #0]
   d4ae8:	f7ff fce8 	bl	d44bc <os_mutex_recursive_lock>
        locked_ = true;
   d4aec:	2301      	movs	r3, #1
   d4aee:	7023      	strb	r3, [r4, #0]
    }
   d4af0:	bd10      	pop	{r4, pc}
   d4af2:	bf00      	nop
   d4af4:	2003e67c 	.word	0x2003e67c

000d4af8 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d4af8:	b510      	push	{r4, lr}
        mutex_.unlock();
   d4afa:	4b04      	ldr	r3, [pc, #16]	; (d4b0c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d4afc:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4afe:	6818      	ldr	r0, [r3, #0]
   d4b00:	f7ff fce4 	bl	d44cc <os_mutex_recursive_unlock>
        locked_ = false;
   d4b04:	2300      	movs	r3, #0
   d4b06:	7023      	strb	r3, [r4, #0]
    }
   d4b08:	bd10      	pop	{r4, pc}
   d4b0a:	bf00      	nop
   d4b0c:	2003e67c 	.word	0x2003e67c

000d4b10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4b12:	2500      	movs	r5, #0
   d4b14:	1cec      	adds	r4, r5, #3
   d4b16:	428c      	cmp	r4, r1
   d4b18:	d80d      	bhi.n	d4b36 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4b1a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d4b1c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d4b1e:	5d87      	ldrb	r7, [r0, r6]
   d4b20:	4297      	cmp	r7, r2
   d4b22:	d105      	bne.n	d4b30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4b24:	4426      	add	r6, r4
   d4b26:	42b1      	cmp	r1, r6
   d4b28:	d305      	bcc.n	d4b36 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d4b2a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d4b2c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d4b30:	3401      	adds	r4, #1
   d4b32:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4b34:	e7ee      	b.n	d4b14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d4b36:	2000      	movs	r0, #0
   d4b38:	e7f9      	b.n	d4b2e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d4b3a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4b3a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4b3e:	4604      	mov	r4, r0
   d4b40:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d4b44:	461e      	mov	r6, r3
   d4b46:	4689      	mov	r9, r1
   d4b48:	ab01      	add	r3, sp, #4
   d4b4a:	4690      	mov	r8, r2
   d4b4c:	460a      	mov	r2, r1
   d4b4e:	6a01      	ldr	r1, [r0, #32]
   d4b50:	f7ff ffde 	bl	d4b10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d4b54:	6a25      	ldr	r5, [r4, #32]
   d4b56:	1cb3      	adds	r3, r6, #2
   d4b58:	bb17      	cbnz	r7, d4ba0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d4b5a:	b308      	cbz	r0, d4ba0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4b5c:	195f      	adds	r7, r3, r5
   d4b5e:	1a3f      	subs	r7, r7, r0
   d4b60:	2f1f      	cmp	r7, #31
   d4b62:	d819      	bhi.n	d4b98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4b64:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4b68:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4b6c:	eba5 0209 	sub.w	r2, r5, r9
   d4b70:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4b72:	eb00 0109 	add.w	r1, r0, r9
   d4b76:	eb06 000a 	add.w	r0, r6, sl
   d4b7a:	b292      	uxth	r2, r2
   d4b7c:	4421      	add	r1, r4
   d4b7e:	4420      	add	r0, r4
   d4b80:	f002 fe40 	bl	d7804 <memmove>
            selfData_[offset] = len + 1;
   d4b84:	1c73      	adds	r3, r6, #1
   d4b86:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d4b8a:	4632      	mov	r2, r6
   d4b8c:	4641      	mov	r1, r8
   d4b8e:	eb04 000a 	add.w	r0, r4, sl
   d4b92:	f002 fe29 	bl	d77e8 <memcpy>
            selfLen_ = staLen + len + 2;
   d4b96:	6227      	str	r7, [r4, #32]
}
   d4b98:	6a20      	ldr	r0, [r4, #32]
   d4b9a:	b002      	add	sp, #8
   d4b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4ba0:	442b      	add	r3, r5
   d4ba2:	2b1f      	cmp	r3, #31
   d4ba4:	d8f8      	bhi.n	d4b98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d4ba6:	1c73      	adds	r3, r6, #1
   d4ba8:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4baa:	1ca8      	adds	r0, r5, #2
   d4bac:	4425      	add	r5, r4
   d4bae:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4bb0:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4bb2:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4bb6:	4641      	mov	r1, r8
   d4bb8:	4420      	add	r0, r4
   d4bba:	f002 fe15 	bl	d77e8 <memcpy>
        selfLen_ += len;
   d4bbe:	6a23      	ldr	r3, [r4, #32]
   d4bc0:	4433      	add	r3, r6
   d4bc2:	6223      	str	r3, [r4, #32]
   d4bc4:	e7e8      	b.n	d4b98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d4bc8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   d4bc8:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   d4bca:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   d4bcc:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   d4bce:	2220      	movs	r2, #32
   d4bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   d4bd4:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   d4bd6:	4a08      	ldr	r2, [pc, #32]	; (d4bf8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   d4bd8:	9200      	str	r2, [sp, #0]
   d4bda:	4908      	ldr	r1, [pc, #32]	; (d4bfc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   d4bdc:	aa02      	add	r2, sp, #8
   d4bde:	2001      	movs	r0, #1
   d4be0:	f7ff fd04 	bl	d45ec <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d4be4:	6820      	ldr	r0, [r4, #0]
   d4be6:	4906      	ldr	r1, [pc, #24]	; (d4c00 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   d4be8:	8800      	ldrh	r0, [r0, #0]
   d4bea:	2300      	movs	r3, #0
   d4bec:	4622      	mov	r2, r4
   d4bee:	f7ff fbf1 	bl	d43d4 <hal_ble_gatt_client_discover_all_services>
    }
   d4bf2:	b00a      	add	sp, #40	; 0x28
   d4bf4:	bd10      	pop	{r4, pc}
   d4bf6:	bf00      	nop
   d4bf8:	000d79c3 	.word	0x000d79c3
   d4bfc:	000d79b8 	.word	0x000d79b8
   d4c00:	000d65ad 	.word	0x000d65ad

000d4c04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
        SPARK_ASSERT(false);
   d4c04:	4a02      	ldr	r2, [pc, #8]	; (d4c10 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d4c06:	2100      	movs	r1, #0
   d4c08:	200a      	movs	r0, #10
   d4c0a:	f7ff bce7 	b.w	d45dc <panic_>
   d4c0e:	bf00      	nop
   d4c10:	000d4359 	.word	0x000d4359

000d4c14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4c14:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d4c16:	6803      	ldr	r3, [r0, #0]
   d4c18:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   d4c1a:	4605      	mov	r5, r0
   d4c1c:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   d4c1e:	d00c      	beq.n	d4c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x26>
	  {
	    if (__tmp != 0)
   d4c20:	b111      	cbz	r1, d4c28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   d4c22:	684b      	ldr	r3, [r1, #4]
   d4c24:	3301      	adds	r3, #1
   d4c26:	604b      	str	r3, [r1, #4]
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4c28:	6828      	ldr	r0, [r5, #0]
   d4c2a:	b128      	cbz	r0, d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x24>
      if (--_M_use_count == 0)
   d4c2c:	6843      	ldr	r3, [r0, #4]
   d4c2e:	3b01      	subs	r3, #1
   d4c30:	6043      	str	r3, [r0, #4]
   d4c32:	b90b      	cbnz	r3, d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x24>
   d4c34:	f7ff ff3b 	bl	d4aae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d4c38:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d4c3a:	4628      	mov	r0, r5
   d4c3c:	bd38      	pop	{r3, r4, r5, pc}

000d4c3e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   d4c3e:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   d4c40:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   d4c42:	4604      	mov	r4, r0
	if (_M_manager)
   d4c44:	b12b      	cbz	r3, d4c52 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c46:	2203      	movs	r2, #3
   d4c48:	4601      	mov	r1, r0
   d4c4a:	4798      	blx	r3
	    _M_manager = nullptr;
   d4c4c:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   d4c4e:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   d4c52:	4620      	mov	r0, r4
   d4c54:	bd10      	pop	{r4, pc}

000d4c56 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   d4c56:	b510      	push	{r4, lr}
	if (_M_manager)
   d4c58:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   d4c5a:	4604      	mov	r4, r0
	if (_M_manager)
   d4c5c:	b12b      	cbz	r3, d4c6a <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c5e:	2203      	movs	r2, #3
   d4c60:	4601      	mov	r1, r0
   d4c62:	4798      	blx	r3
	    _M_manager = nullptr;
   d4c64:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   d4c66:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	bd10      	pop	{r4, pc}

000d4c6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	  switch (__op)
   d4c6e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c70:	b538      	push	{r3, r4, r5, lr}
   d4c72:	4604      	mov	r4, r0
	  switch (__op)
   d4c74:	d007      	beq.n	d4c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d4c76:	2a03      	cmp	r2, #3
   d4c78:	d011      	beq.n	d4c9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d4c7a:	2a01      	cmp	r2, #1
   d4c7c:	d101      	bne.n	d4c82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4c7e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d4c80:	6023      	str	r3, [r4, #0]
	}
   d4c82:	2000      	movs	r0, #0
   d4c84:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4c86:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d4c88:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4c8a:	f7ff fa02 	bl	d4092 <_Znwj>
   d4c8e:	4603      	mov	r3, r0
   d4c90:	2800      	cmp	r0, #0
   d4c92:	d0f5      	beq.n	d4c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d4c94:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4c98:	e883 0003 	stmia.w	r3, {r0, r1}
   d4c9c:	e7f0      	b.n	d4c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d4c9e:	6800      	ldr	r0, [r0, #0]
   d4ca0:	2800      	cmp	r0, #0
   d4ca2:	d0ee      	beq.n	d4c82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d4ca4:	2108      	movs	r1, #8
   d4ca6:	f002 fc6c 	bl	d7582 <_ZdlPvj>
   d4caa:	e7ea      	b.n	d4c82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d4cac <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4cac:	b430      	push	{r4, r5}
   d4cae:	460d      	mov	r5, r1
   d4cb0:	4611      	mov	r1, r2
   d4cb2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d4cb4:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4cb6:	6809      	ldr	r1, [r1, #0]
   d4cb8:	6828      	ldr	r0, [r5, #0]
   d4cba:	e9d3 4300 	ldrd	r4, r3, [r3]
   d4cbe:	46a4      	mov	ip, r4
      }
   d4cc0:	bc30      	pop	{r4, r5}
   d4cc2:	4760      	bx	ip

000d4cc4 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d4cc4:	b530      	push	{r4, r5, lr}
   d4cc6:	3801      	subs	r0, #1
   d4cc8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   d4ccc:	4613      	mov	r3, r2
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d4cce:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   d4cd2:	0924      	lsrs	r4, r4, #4
    char hex_digit = nibble + 48;
   d4cd4:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d4cd8:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d4cda:	bf88      	it	hi
   d4cdc:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   d4ce0:	f803 5b02 	strb.w	r5, [r3], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   d4ce4:	7804      	ldrb	r4, [r0, #0]
   d4ce6:	f004 040f 	and.w	r4, r4, #15
    char hex_digit = nibble + 48;
   d4cea:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d4cee:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d4cf0:	bf88      	it	hi
   d4cf2:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    for (i = 0; i < len; ++i)
   d4cf6:	4299      	cmp	r1, r3
    *p++ = ascii_nibble(nibble);
   d4cf8:	f803 5c01 	strb.w	r5, [r3, #-1]
    for (i = 0; i < len; ++i)
   d4cfc:	d1e7      	bne.n	d4cce <_ZL12bytes2hexbufPKhjPc+0xa>
    }
    return result;
}
   d4cfe:	4610      	mov	r0, r2
   d4d00:	bd30      	pop	{r4, r5, pc}

000d4d02 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4d02:	b510      	push	{r4, lr}
      if (_M_manager)
   d4d04:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4d06:	4604      	mov	r4, r0
      if (_M_manager)
   d4d08:	b113      	cbz	r3, d4d10 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d0a:	2203      	movs	r2, #3
   d4d0c:	4601      	mov	r1, r0
   d4d0e:	4798      	blx	r3
    }
   d4d10:	4620      	mov	r0, r4
   d4d12:	bd10      	pop	{r4, pc}

000d4d14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4d14:	b510      	push	{r4, lr}
   d4d16:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d4d18:	3058      	adds	r0, #88	; 0x58
   d4d1a:	f7ff fff2 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d4d1e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d4d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d26:	f7ff bd79 	b.w	d481c <_ZN6StringD1Ev>

000d4d2a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4d2a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4d2e:	b2da      	uxtb	r2, r3
   d4d30:	2a09      	cmp	r2, #9
   d4d32:	d801      	bhi.n	d4d38 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4d34:	4618      	mov	r0, r3
   d4d36:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4d38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4d3c:	2b05      	cmp	r3, #5
   d4d3e:	d801      	bhi.n	d4d44 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4d40:	3857      	subs	r0, #87	; 0x57
   d4d42:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4d44:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4d48:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4d4a:	bf94      	ite	ls
   d4d4c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4d4e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4d52:	4770      	bx	lr

000d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d4d54:	b510      	push	{r4, lr}
            locked_(false) {
   d4d56:	2300      	movs	r3, #0
    WiringBleLock() :
   d4d58:	4604      	mov	r4, r0
            locked_(false) {
   d4d5a:	7003      	strb	r3, [r0, #0]
        lock();
   d4d5c:	f7ff fec0 	bl	d4ae0 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d4d60:	4620      	mov	r0, r4
   d4d62:	bd10      	pop	{r4, pc}

000d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d4d64:	b510      	push	{r4, lr}
        if (locked_) {
   d4d66:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d4d68:	4604      	mov	r4, r0
        if (locked_) {
   d4d6a:	b10b      	cbz	r3, d4d70 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d4d6c:	f7ff fec4 	bl	d4af8 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d4d70:	4620      	mov	r0, r4
   d4d72:	bd10      	pop	{r4, pc}

000d4d74 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d4d74:	b082      	sub	sp, #8
   d4d76:	4603      	mov	r3, r0
    address_ = addr;
   d4d78:	6808      	ldr	r0, [r1, #0]
   d4d7a:	6849      	ldr	r1, [r1, #4]
   d4d7c:	466a      	mov	r2, sp
   d4d7e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d4d80:	466a      	mov	r2, sp
   d4d82:	ca03      	ldmia	r2!, {r0, r1}
   d4d84:	6018      	str	r0, [r3, #0]
}
   d4d86:	4618      	mov	r0, r3
    address_ = addr.address_;
   d4d88:	6059      	str	r1, [r3, #4]
}
   d4d8a:	b002      	add	sp, #8
   d4d8c:	4770      	bx	lr

000d4d8e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d4d8e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4d90:	7982      	ldrb	r2, [r0, #6]
   d4d92:	798b      	ldrb	r3, [r1, #6]
   d4d94:	429a      	cmp	r2, r3
   d4d96:	d106      	bne.n	d4da6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4d98:	2206      	movs	r2, #6
   d4d9a:	f002 fd17 	bl	d77cc <memcmp>
   d4d9e:	fab0 f080 	clz	r0, r0
   d4da2:	0940      	lsrs	r0, r0, #5
}
   d4da4:	bd08      	pop	{r3, pc}
    return false;
   d4da6:	2000      	movs	r0, #0
   d4da8:	e7fc      	b.n	d4da4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d4daa <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d4daa:	f04f 33ff 	mov.w	r3, #4294967295
   d4dae:	6003      	str	r3, [r0, #0]
   d4db0:	8083      	strh	r3, [r0, #4]
}
   d4db2:	2000      	movs	r0, #0
   d4db4:	4770      	bx	lr

000d4db6 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d4db6:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d4db8:	b508      	push	{r3, lr}
        : address_{} {
   d4dba:	6001      	str	r1, [r0, #0]
   d4dbc:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d4dbe:	4602      	mov	r2, r0
    clear();
   d4dc0:	f7ff fff3 	bl	d4daa <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d4dc4:	7191      	strb	r1, [r2, #6]
}
   d4dc6:	4610      	mov	r0, r2
   d4dc8:	bd08      	pop	{r3, pc}
	...

000d4dcc <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d4dcc:	2201      	movs	r2, #1
   d4dce:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4dd0:	4a06      	ldr	r2, [pc, #24]	; (d4dec <_ZN8particle7BleUuidC1Ev+0x20>)
   d4dd2:	6811      	ldr	r1, [r2, #0]
   d4dd4:	6001      	str	r1, [r0, #0]
   d4dd6:	6851      	ldr	r1, [r2, #4]
   d4dd8:	6041      	str	r1, [r0, #4]
   d4dda:	8911      	ldrh	r1, [r2, #8]
   d4ddc:	7a92      	ldrb	r2, [r2, #10]
   d4dde:	7282      	strb	r2, [r0, #10]
   d4de0:	2200      	movs	r2, #0
   d4de2:	8101      	strh	r1, [r0, #8]
   d4de4:	f8c0 200b 	str.w	r2, [r0, #11]
   d4de8:	73c2      	strb	r2, [r0, #15]
}
   d4dea:	4770      	bx	lr
   d4dec:	000d7bd8 	.word	0x000d7bd8

000d4df0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4df0:	7c0b      	ldrb	r3, [r1, #16]
   d4df2:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d4df6:	b510      	push	{r4, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4df8:	d10f      	bne.n	d4e1a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2a>
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4dfa:	4a0e      	ldr	r2, [pc, #56]	; (d4e34 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d4dfc:	f8c0 300b 	str.w	r3, [r0, #11]
   d4e00:	6814      	ldr	r4, [r2, #0]
   d4e02:	6004      	str	r4, [r0, #0]
   d4e04:	6854      	ldr	r4, [r2, #4]
   d4e06:	6044      	str	r4, [r0, #4]
   d4e08:	8914      	ldrh	r4, [r2, #8]
   d4e0a:	7a92      	ldrb	r2, [r2, #10]
        type_ = BleUuidType::SHORT;
   d4e0c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4e0e:	8104      	strh	r4, [r0, #8]
   d4e10:	7282      	strb	r2, [r0, #10]
   d4e12:	73c3      	strb	r3, [r0, #15]
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d4e14:	880b      	ldrh	r3, [r1, #0]
   d4e16:	8183      	strh	r3, [r0, #12]
}
   d4e18:	bd10      	pop	{r4, pc}
        type_ = BleUuidType::LONG;
   d4e1a:	2301      	movs	r3, #1
   d4e1c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e1e:	f101 0210 	add.w	r2, r1, #16
   d4e22:	4603      	mov	r3, r0
   d4e24:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e28:	f843 4b04 	str.w	r4, [r3], #4
   d4e2c:	4291      	cmp	r1, r2
   d4e2e:	d1f9      	bne.n	d4e24 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x34>
   d4e30:	e7f2      	b.n	d4e18 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x28>
   d4e32:	bf00      	nop
   d4e34:	000d7bd8 	.word	0x000d7bd8

000d4e38 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d4e38:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d4e3a:	690b      	ldr	r3, [r1, #16]
   d4e3c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4e3e:	f101 0210 	add.w	r2, r1, #16
   d4e42:	4603      	mov	r3, r0
   d4e44:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e48:	f843 4b04 	str.w	r4, [r3], #4
   d4e4c:	4291      	cmp	r1, r2
   d4e4e:	d1f9      	bne.n	d4e44 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4e50:	bd10      	pop	{r4, pc}

000d4e52 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4e52:	b510      	push	{r4, lr}
    if (uuid128) {
   d4e54:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4e56:	4604      	mov	r4, r0
    if (uuid128) {
   d4e58:	b1b1      	cbz	r1, d4e88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d4e5a:	2a01      	cmp	r2, #1
   d4e5c:	f101 0210 	add.w	r2, r1, #16
   d4e60:	d10a      	bne.n	d4e78 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e62:	4601      	mov	r1, r0
   d4e64:	f853 0b04 	ldr.w	r0, [r3], #4
   d4e68:	f841 0b04 	str.w	r0, [r1], #4
   d4e6c:	4293      	cmp	r3, r2
   d4e6e:	d1f9      	bne.n	d4e64 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d4e70:	2301      	movs	r3, #1
   d4e72:	6123      	str	r3, [r4, #16]
}
   d4e74:	4620      	mov	r0, r4
   d4e76:	bd10      	pop	{r4, pc}
   d4e78:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d4e7a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d4e7e:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4e82:	429a      	cmp	r2, r3
   d4e84:	d1f9      	bne.n	d4e7a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d4e86:	e7f3      	b.n	d4e70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4e88:	2210      	movs	r2, #16
   d4e8a:	f002 fcd5 	bl	d7838 <memset>
   d4e8e:	e7f1      	b.n	d4e74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d4e90 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   d4e90:	b510      	push	{r4, lr}
   d4e92:	4603      	mov	r3, r0
   d4e94:	460c      	mov	r4, r1
        : BleUuid() {
   d4e96:	f7ff ff99 	bl	d4dcc <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d4e9a:	2200      	movs	r2, #0
   d4e9c:	611a      	str	r2, [r3, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4e9e:	819c      	strh	r4, [r3, #12]
}
   d4ea0:	4618      	mov	r0, r3
   d4ea2:	bd10      	pop	{r4, pc}

000d4ea4 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d4ea4:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4ea6:	6902      	ldr	r2, [r0, #16]
   d4ea8:	690b      	ldr	r3, [r1, #16]
   d4eaa:	429a      	cmp	r2, r3
   d4eac:	d106      	bne.n	d4ebc <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4eae:	2210      	movs	r2, #16
   d4eb0:	f002 fc8c 	bl	d77cc <memcmp>
   d4eb4:	fab0 f080 	clz	r0, r0
   d4eb8:	0940      	lsrs	r0, r0, #5
}
   d4eba:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4ebc:	2000      	movs	r0, #0
   d4ebe:	e7fc      	b.n	d4eba <_ZNK8particle7BleUuideqERKS0_+0x16>

000d4ec0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d4ec0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d4ec2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d4ec6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4ec8:	4b32      	ldr	r3, [pc, #200]	; (d4f94 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d4eca:	681a      	ldr	r2, [r3, #0]
   d4ecc:	6002      	str	r2, [r0, #0]
   d4ece:	685a      	ldr	r2, [r3, #4]
   d4ed0:	6042      	str	r2, [r0, #4]
   d4ed2:	2500      	movs	r5, #0
   d4ed4:	891a      	ldrh	r2, [r3, #8]
   d4ed6:	7a9b      	ldrb	r3, [r3, #10]
   d4ed8:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d4eda:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4edc:	7283      	strb	r3, [r0, #10]
   d4ede:	f8c0 500b 	str.w	r5, [r0, #11]
   d4ee2:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d4ee4:	460e      	mov	r6, r1
   d4ee6:	b321      	cbz	r1, d4f32 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4ee8:	2124      	movs	r1, #36	; 0x24
   d4eea:	4630      	mov	r0, r6
   d4eec:	f002 fcea 	bl	d78c4 <strnlen>
   d4ef0:	2804      	cmp	r0, #4
   d4ef2:	d121      	bne.n	d4f38 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d4ef4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4ef8:	af01      	add	r7, sp, #4
   d4efa:	1cb5      	adds	r5, r6, #2
   d4efc:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4efe:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d4f02:	f7ff ff12 	bl	d4d2a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4f06:	f1b0 0800 	subs.w	r8, r0, #0
   d4f0a:	db10      	blt.n	d4f2e <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d4f0c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d4f10:	f7ff ff0b 	bl	d4d2a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4f14:	2800      	cmp	r0, #0
   d4f16:	db0a      	blt.n	d4f2e <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4f18:	3502      	adds	r5, #2
   d4f1a:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d4f1e:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4f20:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d4f24:	d1eb      	bne.n	d4efe <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d4f26:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4f2a:	ba5b      	rev16	r3, r3
   d4f2c:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d4f2e:	2300      	movs	r3, #0
   d4f30:	6123      	str	r3, [r4, #16]
}
   d4f32:	b002      	add	sp, #8
   d4f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d4f38:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f3a:	2124      	movs	r1, #36	; 0x24
   d4f3c:	4630      	mov	r0, r6
   d4f3e:	f002 fcc1 	bl	d78c4 <strnlen>
   d4f42:	42a8      	cmp	r0, r5
   d4f44:	d806      	bhi.n	d4f54 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d4f46:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d4f48:	2300      	movs	r3, #0
    while (len > 0) {
   d4f4a:	42bc      	cmp	r4, r7
   d4f4c:	d0f1      	beq.n	d4f32 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d4f4e:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d4f52:	e7fa      	b.n	d4f4a <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f54:	2f00      	cmp	r7, #0
   d4f56:	d0ec      	beq.n	d4f32 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d4f58:	5d70      	ldrb	r0, [r6, r5]
   d4f5a:	f7ff fee6 	bl	d4d2a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4f5e:	0603      	lsls	r3, r0, #24
   d4f60:	d415      	bmi.n	d4f8e <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d4f62:	0100      	lsls	r0, r0, #4
   d4f64:	3f01      	subs	r7, #1
   d4f66:	fa5f f880 	uxtb.w	r8, r0
   d4f6a:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4f6e:	2124      	movs	r1, #36	; 0x24
   d4f70:	4630      	mov	r0, r6
   d4f72:	f002 fca7 	bl	d78c4 <strnlen>
   d4f76:	3501      	adds	r5, #1
   d4f78:	42a8      	cmp	r0, r5
   d4f7a:	d908      	bls.n	d4f8e <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d4f7c:	5d70      	ldrb	r0, [r6, r5]
   d4f7e:	f7ff fed4 	bl	d4d2a <_ZN8particle11hexToNibbleEc>
   d4f82:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4f84:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d4f86:	bfa4      	itt	ge
   d4f88:	ea40 0008 	orrge.w	r0, r0, r8
   d4f8c:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f8e:	3501      	adds	r5, #1
   d4f90:	e7d3      	b.n	d4f3a <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d4f92:	bf00      	nop
   d4f94:	000d7bd8 	.word	0x000d7bd8

000d4f98 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d4f98:	b513      	push	{r0, r1, r4, lr}
   d4f9a:	4604      	mov	r4, r0
   d4f9c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d4f9e:	f7ff ff15 	bl	d4dcc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	9901      	ldr	r1, [sp, #4]
   d4fa6:	f7ff ff8b 	bl	d4ec0 <_ZN8particle7BleUuid9constructEPKc>
}
   d4faa:	4620      	mov	r0, r4
   d4fac:	b002      	add	sp, #8
   d4fae:	bd10      	pop	{r4, pc}

000d4fb0 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d4fb0:	b510      	push	{r4, lr}
   d4fb2:	f100 030f 	add.w	r3, r0, #15
   d4fb6:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   d4fb8:	781c      	ldrb	r4, [r3, #0]
   d4fba:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4fbe:	4283      	cmp	r3, r0
   d4fc0:	f103 33ff 	add.w	r3, r3, #4294967295
   d4fc4:	d1f8      	bne.n	d4fb8 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   d4fc6:	bd10      	pop	{r4, pc}

000d4fc8 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d4fc8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   d4fcc:	461f      	mov	r7, r3
   d4fce:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   d4fd0:	460c      	mov	r4, r1
   d4fd2:	2900      	cmp	r1, #0
   d4fd4:	d05d      	beq.n	d5092 <_ZNK8particle7BleUuid8toStringEPcjb+0xca>
   d4fd6:	b1ea      	cbz	r2, d5014 <_ZNK8particle7BleUuid8toStringEPcjb+0x4c>
    if (type() == BleUuidType::SHORT) {
   d4fd8:	f8d0 9010 	ldr.w	r9, [r0, #16]
   d4fdc:	1e55      	subs	r5, r2, #1
   d4fde:	f1b9 0f00 	cmp.w	r9, #0
   d4fe2:	d11b      	bne.n	d501c <_ZNK8particle7BleUuid8toStringEPcjb+0x54>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d4fe4:	7b02      	ldrb	r2, [r0, #12]
   d4fe6:	7b43      	ldrb	r3, [r0, #13]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d4fe8:	f8cd 9014 	str.w	r9, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d4fec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d4ff0:	2102      	movs	r1, #2
   d4ff2:	aa05      	add	r2, sp, #20
   d4ff4:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d4ff6:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d4ffa:	f7ff fe63 	bl	d4cc4 <_ZL12bytes2hexbufPKhjPc>
        len = std::min(len - 1, sizeof(cStr));
   d4ffe:	2d04      	cmp	r5, #4
   d5000:	bf28      	it	cs
   d5002:	2504      	movcs	r5, #4
        memcpy(buf, cStr, len);
   d5004:	462a      	mov	r2, r5
   d5006:	a905      	add	r1, sp, #20
   d5008:	4620      	mov	r0, r4
   d500a:	f002 fbed 	bl	d77e8 <memcpy>
        buf[len++] = '\0';
   d500e:	f804 9005 	strb.w	r9, [r4, r5]
   d5012:	1c6a      	adds	r2, r5, #1
}
   d5014:	4610      	mov	r0, r2
   d5016:	b00e      	add	sp, #56	; 0x38
   d5018:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    toBigEndian(temp);
   d501c:	a901      	add	r1, sp, #4
   d501e:	f7ff ffc7 	bl	d4fb0 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5022:	aa05      	add	r2, sp, #20
    if (stripped) {
   d5024:	b17f      	cbz	r7, d5046 <_ZNK8particle7BleUuid8toStringEPcjb+0x7e>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5026:	2110      	movs	r1, #16
   d5028:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d502a:	f7ff fe4b 	bl	d4cc4 <_ZL12bytes2hexbufPKhjPc>
    len = std::min(len - 1, sizeof(cStr));
   d502e:	2d24      	cmp	r5, #36	; 0x24
   d5030:	bf28      	it	cs
   d5032:	2524      	movcs	r5, #36	; 0x24
    memcpy(buf, cStr, len);
   d5034:	462a      	mov	r2, r5
   d5036:	a905      	add	r1, sp, #20
   d5038:	4620      	mov	r0, r4
   d503a:	f002 fbd5 	bl	d77e8 <memcpy>
    buf[len++] = '\0';
   d503e:	2300      	movs	r3, #0
   d5040:	5563      	strb	r3, [r4, r5]
   d5042:	1c6a      	adds	r2, r5, #1
    return len;
   d5044:	e7e6      	b.n	d5014 <_ZNK8particle7BleUuid8toStringEPcjb+0x4c>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d5046:	2104      	movs	r1, #4
   d5048:	eb0d 0001 	add.w	r0, sp, r1
   d504c:	f7ff fe3a 	bl	d4cc4 <_ZL12bytes2hexbufPKhjPc>
        cStr[idx * 2] = '-';
   d5050:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d5052:	f10d 021d 	add.w	r2, sp, #29
   d5056:	2102      	movs	r1, #2
   d5058:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   d505a:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d505e:	f7ff fe31 	bl	d4cc4 <_ZL12bytes2hexbufPKhjPc>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d5062:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d5066:	2102      	movs	r1, #2
   d5068:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   d506c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d5070:	f7ff fe28 	bl	d4cc4 <_ZL12bytes2hexbufPKhjPc>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d5074:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d5078:	2102      	movs	r1, #2
   d507a:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   d507c:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d5080:	f7ff fe20 	bl	d4cc4 <_ZL12bytes2hexbufPKhjPc>
        cStr[idx * 2 + 3] = '-';
   d5084:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d5088:	aa0b      	add	r2, sp, #44	; 0x2c
   d508a:	2106      	movs	r1, #6
   d508c:	f10d 000e 	add.w	r0, sp, #14
   d5090:	e7cb      	b.n	d502a <_ZNK8particle7BleUuid8toStringEPcjb+0x62>
        return 0;
   d5092:	460a      	mov	r2, r1
   d5094:	e7be      	b.n	d5014 <_ZNK8particle7BleUuid8toStringEPcjb+0x4c>

000d5096 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   d5096:	b510      	push	{r4, lr}
   d5098:	b08a      	sub	sp, #40	; 0x28
   d509a:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   d509c:	2300      	movs	r3, #0
   d509e:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   d50a0:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   d50a2:	4669      	mov	r1, sp
   d50a4:	f7ff ff90 	bl	d4fc8 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d50a8:	4669      	mov	r1, sp
   d50aa:	4620      	mov	r0, r4
   d50ac:	f7ff fc01 	bl	d48b2 <_ZN6StringC1EPKc>
}
   d50b0:	4620      	mov	r0, r4
   d50b2:	b00a      	add	sp, #40	; 0x28
   d50b4:	bd10      	pop	{r4, pc}

000d50b6 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d50b6:	b538      	push	{r3, r4, r5, lr}
   d50b8:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d50ba:	b101      	cbz	r1, d50be <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d50bc:	b91a      	cbnz	r2, d50c6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
        selfLen_ = 0;
   d50be:	2400      	movs	r4, #0
    selfLen_ = len;
   d50c0:	622c      	str	r4, [r5, #32]
}
   d50c2:	4620      	mov	r0, r4
   d50c4:	bd38      	pop	{r3, r4, r5, pc}
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
   d50c6:	2a1f      	cmp	r2, #31
   d50c8:	bf28      	it	cs
   d50ca:	221f      	movcs	r2, #31
   d50cc:	4614      	mov	r4, r2
    memcpy(selfData_, buf, len);
   d50ce:	f002 fb8b 	bl	d77e8 <memcpy>
   d50d2:	e7f5      	b.n	d50c0 <_ZN8particle18BleAdvertisingData3setEPKhj+0xa>

000d50d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d50d4:	b430      	push	{r4, r5}
   d50d6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d50da:	b912      	cbnz	r2, d50e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d50dc:	6a00      	ldr	r0, [r0, #32]
}
   d50de:	bc30      	pop	{r4, r5}
   d50e0:	4770      	bx	lr
   d50e2:	9502      	str	r5, [sp, #8]
   d50e4:	bc30      	pop	{r4, r5}
   d50e6:	f7ff bd28 	b.w	d4b3a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d50ea <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d50ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d50ec:	4604      	mov	r4, r0
          selfLen_(0) {
   d50ee:	4602      	mov	r2, r0
   d50f0:	f100 011f 	add.w	r1, r0, #31
   d50f4:	2300      	movs	r3, #0
   d50f6:	f802 3b01 	strb.w	r3, [r2], #1
   d50fa:	4291      	cmp	r1, r2
   d50fc:	d1fb      	bne.n	d50f6 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d50fe:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5100:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5102:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5104:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5106:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d510a:	4619      	mov	r1, r3
   d510c:	f10d 020f 	add.w	r2, sp, #15
   d5110:	4620      	mov	r0, r4
   d5112:	f7ff ffdf 	bl	d50d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5116:	4620      	mov	r0, r4
   d5118:	b004      	add	sp, #16
   d511a:	bd10      	pop	{r4, pc}

000d511c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d511c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d511e:	4615      	mov	r5, r2
   d5120:	461f      	mov	r7, r3
   d5122:	460a      	mov	r2, r1
   d5124:	ab01      	add	r3, sp, #4
   d5126:	6a01      	ldr	r1, [r0, #32]
   d5128:	4606      	mov	r6, r0
   d512a:	f7ff fcf1 	bl	d4b10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   d512e:	f030 0402 	bics.w	r4, r0, #2
   d5132:	d00b      	beq.n	d514c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
            adsLen -= 2;
   d5134:	1e84      	subs	r4, r0, #2
   d5136:	42bc      	cmp	r4, r7
   d5138:	bf28      	it	cs
   d513a:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   d513c:	b135      	cbz	r5, d514c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
                memcpy(buf, &selfData_[offset + 2], len);
   d513e:	9901      	ldr	r1, [sp, #4]
   d5140:	3102      	adds	r1, #2
   d5142:	4622      	mov	r2, r4
   d5144:	4431      	add	r1, r6
   d5146:	4628      	mov	r0, r5
   d5148:	f002 fb4e 	bl	d77e8 <memcpy>
}
   d514c:	4620      	mov	r0, r4
   d514e:	b003      	add	sp, #12
   d5150:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5152 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d5152:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5154:	4613      	mov	r3, r2
   d5156:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d5158:	9201      	str	r2, [sp, #4]
   d515a:	460a      	mov	r2, r1
   d515c:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d515e:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d5160:	f7ff ffdc 	bl	d511c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   d5164:	b940      	cbnz	r0, d5178 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d5166:	9b01      	ldr	r3, [sp, #4]
   d5168:	4622      	mov	r2, r4
   d516a:	2109      	movs	r1, #9
   d516c:	4628      	mov	r0, r5
}
   d516e:	b003      	add	sp, #12
   d5170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d5174:	f7ff bfd2 	b.w	d511c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   d5178:	b003      	add	sp, #12
   d517a:	bd30      	pop	{r4, r5, pc}

000d517c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   d517c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d517e:	460c      	mov	r4, r1
   d5180:	b089      	sub	sp, #36	; 0x24
    String name;
   d5182:	490c      	ldr	r1, [pc, #48]	; (d51b4 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   d5184:	4605      	mov	r5, r0
    String name;
   d5186:	f7ff fb94 	bl	d48b2 <_ZN6StringC1EPKc>
    size_t len = deviceName(buf, sizeof(buf));
   d518a:	221f      	movs	r2, #31
   d518c:	4669      	mov	r1, sp
   d518e:	4620      	mov	r0, r4
   d5190:	f7ff ffdf 	bl	d5152 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   d5194:	4606      	mov	r6, r0
   d5196:	b150      	cbz	r0, d51ae <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   d5198:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   d519a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   d519c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d51a0:	4628      	mov	r0, r5
   d51a2:	f7ff fc05 	bl	d49b0 <_ZN6String6concatEc>
   d51a6:	b110      	cbz	r0, d51ae <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   d51a8:	3701      	adds	r7, #1
   d51aa:	42be      	cmp	r6, r7
   d51ac:	d1f6      	bne.n	d519c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   d51ae:	4628      	mov	r0, r5
   d51b0:	b009      	add	sp, #36	; 0x24
   d51b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51b4:	000d7a28 	.word	0x000d7a28

000d51b8 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   d51b8:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   d51ba:	2302      	movs	r3, #2
   d51bc:	aa01      	add	r2, sp, #4
   d51be:	2119      	movs	r1, #25
   d51c0:	f7ff ffac 	bl	d511c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   d51c4:	b128      	cbz	r0, d51d2 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x1a>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   d51c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d51ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d51ce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
   d51d2:	b003      	add	sp, #12
   d51d4:	f85d fb04 	ldr.w	pc, [sp], #4

000d51d8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d51d8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d51da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d51de:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d51e0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d51e2:	8043      	strh	r3, [r0, #2]
   d51e4:	220e      	movs	r2, #14
   d51e6:	4629      	mov	r1, r5
   d51e8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d51ea:	7105      	strb	r5, [r0, #4]
   d51ec:	3006      	adds	r0, #6
   d51ee:	f002 fb23 	bl	d7838 <memset>
   d51f2:	f104 0014 	add.w	r0, r4, #20
   d51f6:	f7ff fde9 	bl	d4dcc <_ZN8particle7BleUuidC1Ev>
   d51fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d51fe:	f7ff fde5 	bl	d4dcc <_ZN8particle7BleUuidC1Ev>
   d5202:	4904      	ldr	r1, [pc, #16]	; (d5214 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5204:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5208:	f7ff fb53 	bl	d48b2 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d520c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d520e:	4620      	mov	r0, r4
   d5210:	bd38      	pop	{r3, r4, r5, pc}
   d5212:	bf00      	nop
   d5214:	000d7a28 	.word	0x000d7a28

000d5218 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   d5218:	b538      	push	{r3, r4, r5, lr}
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d521a:	680d      	ldr	r5, [r1, #0]
   d521c:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   d521e:	4601      	mov	r1, r0
   d5220:	f105 0028 	add.w	r0, r5, #40	; 0x28
   d5224:	f7ff fe3e 	bl	d4ea4 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   d5228:	b140      	cbz	r0, d523c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   d522a:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   d522c:	8aa2      	ldrh	r2, [r4, #20]
   d522e:	429a      	cmp	r2, r3
   d5230:	d805      	bhi.n	d523e <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   d5232:	8ae0      	ldrh	r0, [r4, #22]
   d5234:	4298      	cmp	r0, r3
   d5236:	bf34      	ite	cc
   d5238:	2000      	movcc	r0, #0
   d523a:	2001      	movcs	r0, #1
    }
   d523c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   d523e:	2000      	movs	r0, #0
   d5240:	e7fc      	b.n	d523c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000d5242 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5242:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5244:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d5248:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d524c:	4293      	cmp	r3, r2
   d524e:	4618      	mov	r0, r3
   d5250:	d006      	beq.n	d5260 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5252:	6804      	ldr	r4, [r0, #0]
   d5254:	8824      	ldrh	r4, [r4, #0]
   d5256:	428c      	cmp	r4, r1
   d5258:	f103 0308 	add.w	r3, r3, #8
   d525c:	d1f6      	bne.n	d524c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d525e:	bd10      	pop	{r4, pc}
        return nullptr;
   d5260:	2000      	movs	r0, #0
   d5262:	e7fc      	b.n	d525e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000d5264 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5264:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   d5266:	b570      	push	{r4, r5, r6, lr}
   d5268:	6003      	str	r3, [r0, #0]
   d526a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d526c:	2068      	movs	r0, #104	; 0x68
   d526e:	f7fe ff10 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5272:	1e04      	subs	r4, r0, #0
   d5274:	f104 060c 	add.w	r6, r4, #12
   d5278:	d007      	beq.n	d528a <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   d527a:	2301      	movs	r3, #1
   d527c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   d5280:	4b04      	ldr	r3, [pc, #16]	; (d5294 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   d5282:	6023      	str	r3, [r4, #0]
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5284:	4630      	mov	r0, r6
   d5286:	f7ff ffa7 	bl	d51d8 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   d528a:	e9c5 6400 	strd	r6, r4, [r5]
}
   d528e:	4628      	mov	r0, r5
   d5290:	bd70      	pop	{r4, r5, r6, pc}
   d5292:	bf00      	nop
   d5294:	000d7b84 	.word	0x000d7b84

000d5298 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5298:	b5f0      	push	{r4, r5, r6, r7, lr}
   d529a:	4606      	mov	r6, r0
   d529c:	b085      	sub	sp, #20
   d529e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d52a0:	460d      	mov	r5, r1
   d52a2:	2900      	cmp	r1, #0
   d52a4:	d050      	beq.n	d5348 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d52a6:	2a00      	cmp	r2, #0
   d52a8:	d04e      	beq.n	d5348 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d52aa:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   d52ac:	7823      	ldrb	r3, [r4, #0]
   d52ae:	2af4      	cmp	r2, #244	; 0xf4
   d52b0:	bf28      	it	cs
   d52b2:	22f4      	movcs	r2, #244	; 0xf4
   d52b4:	b343      	cbz	r3, d5308 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d52b6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d52b8:	0798      	lsls	r0, r3, #30
   d52ba:	d509      	bpl.n	d52d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d52bc:	89a0      	ldrh	r0, [r4, #12]
   d52be:	9203      	str	r2, [sp, #12]
   d52c0:	2300      	movs	r3, #0
   d52c2:	f7ff f87d 	bl	d43c0 <hal_ble_gatt_server_set_characteristic_value>
   d52c6:	2800      	cmp	r0, #0
   d52c8:	9a03      	ldr	r2, [sp, #12]
   d52ca:	da03      	bge.n	d52d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   d52cc:	b005      	add	sp, #20
   d52ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d52d0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d52d4:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d52d6:	7923      	ldrb	r3, [r4, #4]
   d52d8:	06d9      	lsls	r1, r3, #27
   d52da:	d509      	bpl.n	d52f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d52dc:	2f01      	cmp	r7, #1
   d52de:	d007      	beq.n	d52f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d52e0:	89a0      	ldrh	r0, [r4, #12]
   d52e2:	2300      	movs	r3, #0
   d52e4:	4629      	mov	r1, r5
}
   d52e6:	b005      	add	sp, #20
   d52e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d52ec:	f7ff b8c2 	b.w	d4474 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d52f0:	069b      	lsls	r3, r3, #26
   d52f2:	d5eb      	bpl.n	d52cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d52f4:	2f02      	cmp	r7, #2
   d52f6:	d0e9      	beq.n	d52cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d52f8:	89a0      	ldrh	r0, [r4, #12]
   d52fa:	2300      	movs	r3, #0
   d52fc:	4629      	mov	r1, r5
}
   d52fe:	b005      	add	sp, #20
   d5300:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5304:	f7ff b8c0 	b.w	d4488 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5308:	8860      	ldrh	r0, [r4, #2]
   d530a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d530e:	4288      	cmp	r0, r1
   d5310:	d01c      	beq.n	d534c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5312:	7921      	ldrb	r1, [r4, #4]
   d5314:	074e      	lsls	r6, r1, #29
   d5316:	d501      	bpl.n	d531c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d5318:	2f01      	cmp	r7, #1
   d531a:	d104      	bne.n	d5326 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d531c:	070b      	lsls	r3, r1, #28
   d531e:	d409      	bmi.n	d5334 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5320:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5324:	e7d2      	b.n	d52cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5326:	89a1      	ldrh	r1, [r4, #12]
   d5328:	9300      	str	r3, [sp, #0]
   d532a:	4613      	mov	r3, r2
   d532c:	462a      	mov	r2, r5
   d532e:	f7ff f86f 	bl	d4410 <hal_ble_gatt_client_write_without_response>
   d5332:	e7cb      	b.n	d52cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5334:	2f02      	cmp	r7, #2
   d5336:	d0f3      	beq.n	d5320 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5338:	2300      	movs	r3, #0
   d533a:	89a1      	ldrh	r1, [r4, #12]
   d533c:	9300      	str	r3, [sp, #0]
   d533e:	4613      	mov	r3, r2
   d5340:	462a      	mov	r2, r5
   d5342:	f7ff f85b 	bl	d43fc <hal_ble_gatt_client_write_with_response>
   d5346:	e7c1      	b.n	d52cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5348:	4802      	ldr	r0, [pc, #8]	; (d5354 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d534a:	e7bf      	b.n	d52cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d534c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5350:	e7bc      	b.n	d52cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d5352:	bf00      	nop
   d5354:	fffffef2 	.word	0xfffffef2

000d5358 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   d5358:	b510      	push	{r4, lr}
   d535a:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   d535c:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   d535e:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   d5360:	bb52      	cbnz	r2, d53b8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d5362:	885c      	ldrh	r4, [r3, #2]
   d5364:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5368:	4284      	cmp	r4, r0
   d536a:	d025      	beq.n	d53b8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d536c:	8a18      	ldrh	r0, [r3, #16]
   d536e:	b330      	cbz	r0, d53be <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    config.version = BLE_API_VERSION;
   d5370:	4814      	ldr	r0, [pc, #80]	; (d53c4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   d5372:	9000      	str	r0, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   d5374:	4814      	ldr	r0, [pc, #80]	; (d53c8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    hal_ble_cccd_config_t config = {};
   d5376:	9205      	str	r2, [sp, #20]
   d5378:	e9cd 2203 	strd	r2, r2, [sp, #12]
    config.context = impl();
   d537c:	e9cd 0301 	strd	r0, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   d5380:	8858      	ldrh	r0, [r3, #2]
   d5382:	f8ad 000c 	strh.w	r0, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d5386:	8a18      	ldrh	r0, [r3, #16]
   d5388:	f8ad 000e 	strh.w	r0, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d538c:	8998      	ldrh	r0, [r3, #12]
   d538e:	f8ad 0010 	strh.w	r0, [sp, #16]
    if (enable) {
   d5392:	b159      	cbz	r1, d53ac <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   d5394:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d5396:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d5398:	bf44      	itt	mi
   d539a:	2202      	movmi	r2, #2
   d539c:	9205      	strmi	r2, [sp, #20]
   d539e:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d53a0:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d53a2:	bf42      	ittt	mi
   d53a4:	9b05      	ldrmi	r3, [sp, #20]
   d53a6:	f043 0301 	orrmi.w	r3, r3, #1
   d53aa:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d53ac:	2100      	movs	r1, #0
   d53ae:	4668      	mov	r0, sp
   d53b0:	f7ff f856 	bl	d4460 <hal_ble_gatt_client_configure_cccd>
}
   d53b4:	b006      	add	sp, #24
   d53b6:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   d53b8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d53bc:	e7fa      	b.n	d53b4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d53be:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d53c2:	e7f7      	b.n	d53b4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   d53c4:	00180001 	.word	0x00180001
   d53c8:	000d5685 	.word	0x000d5685

000d53cc <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   d53cc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d53ce:	2500      	movs	r5, #0
   d53d0:	6005      	str	r5, [r0, #0]
   d53d2:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d53d4:	2028      	movs	r0, #40	; 0x28
   d53d6:	f7fe fe5c 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d53da:	1e03      	subs	r3, r0, #0
   d53dc:	f103 060c 	add.w	r6, r3, #12
   d53e0:	d00a      	beq.n	d53f8 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   d53e2:	2201      	movs	r2, #1
   d53e4:	e9c3 2201 	strd	r2, r2, [r3, #4]
	: _M_impl(__a)
   d53e8:	4a05      	ldr	r2, [pc, #20]	; (d5400 <_ZN8particle10BleServiceC1Ev+0x34>)
   d53ea:	601a      	str	r2, [r3, #0]
              characteristicsDiscovered_(false) {
   d53ec:	4630      	mov	r0, r6
   d53ee:	f7ff fced 	bl	d4dcc <_ZN8particle7BleUuidC1Ev>
   d53f2:	621d      	str	r5, [r3, #32]
   d53f4:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
	  __p = __pi->_M_ptr();
   d53f8:	e9c4 6300 	strd	r6, r3, [r4]
}
   d53fc:	4620      	mov	r0, r4
   d53fe:	bd70      	pop	{r4, r5, r6, pc}
   d5400:	000d7ba0 	.word	0x000d7ba0

000d5404 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
   d5404:	b510      	push	{r4, lr}
   d5406:	680b      	ldr	r3, [r1, #0]
   d5408:	4604      	mov	r4, r0
   d540a:	f840 3b04 	str.w	r3, [r0], #4
   d540e:	6849      	ldr	r1, [r1, #4]
   d5410:	f7ff fc00 	bl	d4c14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
   d5414:	4620      	mov	r0, r4
   d5416:	bd10      	pop	{r4, pc}

000d5418 <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE>:

    int discoverCharacteristics(const BlePeerDevice& peer, const BleService& service) const {
   d5418:	b5f0      	push	{r4, r5, r6, r7, lr}
   d541a:	4614      	mov	r4, r2
   d541c:	b091      	sub	sp, #68	; 0x44
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   d541e:	2600      	movs	r6, #0
   d5420:	2320      	movs	r3, #32
    int discoverCharacteristics(const BlePeerDevice& peer, const BleService& service) const {
   d5422:	460d      	mov	r5, r1
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   d5424:	4632      	mov	r2, r6
   d5426:	6821      	ldr	r1, [r4, #0]
   d5428:	a803      	add	r0, sp, #12
   d542a:	e9cd 3608 	strd	r3, r6, [sp, #32]
   d542e:	f7ff fe32 	bl	d5096 <_ZNK8particle7BleUuid8toStringEb>
   d5432:	9b03      	ldr	r3, [sp, #12]
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	4b27      	ldr	r3, [pc, #156]	; (d54d4 <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE+0xbc>)
   d5438:	4927      	ldr	r1, [pc, #156]	; (d54d8 <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE+0xc0>)
   d543a:	9300      	str	r3, [sp, #0]
   d543c:	aa08      	add	r2, sp, #32
   d543e:	4633      	mov	r3, r6
   d5440:	2001      	movs	r0, #1
   d5442:	f7ff f8d3 	bl	d45ec <log_message>
   d5446:	a803      	add	r0, sp, #12
   d5448:	f7ff f9e8 	bl	d481c <_ZN6StringD1Ev>
        hal_ble_svc_t halService;
        halService.size = sizeof(hal_ble_svc_t);
   d544c:	231c      	movs	r3, #28
   d544e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22

    bool operator==(const BleService& service) const;
    bool operator!=(const BleService& service) const;

    BleServiceImpl* impl() const {
        return impl_.get();
   d5452:	6823      	ldr	r3, [r4, #0]
        halService.start_handle = service.impl()->startHandle();
   d5454:	8a9a      	ldrh	r2, [r3, #20]
   d5456:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   d545a:	8adb      	ldrh	r3, [r3, #22]
   d545c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    }

    BlePeerDevice& operator=(const BlePeerDevice& peer);

    BlePeerDeviceImpl* impl() const {
        return impl_.get();
   d5460:	682b      	ldr	r3, [r5, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   d5462:	4a1e      	ldr	r2, [pc, #120]	; (d54dc <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE+0xc4>)
   d5464:	8818      	ldrh	r0, [r3, #0]
   d5466:	9600      	str	r6, [sp, #0]
   d5468:	a908      	add	r1, sp, #32
   d546a:	f7fe ffbd 	bl	d43e8 <hal_ble_gatt_client_discover_characteristics>
   d546e:	2800      	cmp	r0, #0
   d5470:	db2d      	blt.n	d54ce <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE+0xb6>
   d5472:	682b      	ldr	r3, [r5, #0]
   d5474:	e9d3 4706 	ldrd	r4, r7, [r3, #24]
   d5478:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d547c:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   d547e:	f1a4 0308 	sub.w	r3, r4, #8
   d5482:	429f      	cmp	r7, r3
   d5484:	d022      	beq.n	d54cc <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE+0xb4>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d5486:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d548a:	89db      	ldrh	r3, [r3, #14]
   d548c:	2b00      	cmp	r3, #0
   d548e:	d0f5      	beq.n	d547c <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE+0x64>
                char desc[BLE_MAX_DESC_LEN] = {};
   d5490:	2210      	movs	r2, #16
   d5492:	2100      	movs	r1, #0
   d5494:	eb0d 0002 	add.w	r0, sp, r2
   d5498:	9603      	str	r6, [sp, #12]
   d549a:	f002 f9cd 	bl	d7838 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d549e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d54a2:	89d9      	ldrh	r1, [r3, #14]
   d54a4:	682b      	ldr	r3, [r5, #0]
   d54a6:	aa03      	add	r2, sp, #12
   d54a8:	8818      	ldrh	r0, [r3, #0]
   d54aa:	9600      	str	r6, [sp, #0]
   d54ac:	2313      	movs	r3, #19
   d54ae:	f7fe ffb9 	bl	d4424 <hal_ble_gatt_client_read>
                if (len > 0) {
   d54b2:	2800      	cmp	r0, #0
   d54b4:	d0e2      	beq.n	d547c <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE+0x64>
                    desc[len] = '\0';
   d54b6:	ab10      	add	r3, sp, #64	; 0x40
   d54b8:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d54ba:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   d54bc:	f800 6c34 	strb.w	r6, [r0, #-52]
        return description_;
   d54c0:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   d54c4:	303c      	adds	r0, #60	; 0x3c
   d54c6:	f7ff fa4a 	bl	d495e <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   d54ca:	e7d7      	b.n	d547c <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE+0x64>
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
   d54cc:	2000      	movs	r0, #0
    }
   d54ce:	b011      	add	sp, #68	; 0x44
   d54d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d54d2:	bf00      	nop
   d54d4:	000d79df 	.word	0x000d79df
   d54d8:	000d79b8 	.word	0x000d79b8
   d54dc:	000d69dd 	.word	0x000d69dd

000d54e0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d54e0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d54e2:	2500      	movs	r5, #0
   d54e4:	6005      	str	r5, [r0, #0]
   d54e6:	4606      	mov	r6, r0
   d54e8:	2030      	movs	r0, #48	; 0x30
   d54ea:	f7fe fdd2 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d54ee:	4604      	mov	r4, r0
   d54f0:	b188      	cbz	r0, d5516 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d54f2:	2301      	movs	r3, #1
   d54f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d54f8:	4b09      	ldr	r3, [pc, #36]	; (d5520 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d54fa:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d54fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5500:	8183      	strh	r3, [r0, #12]
   d5502:	300e      	adds	r0, #14
   d5504:	f7ff fc57 	bl	d4db6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d5508:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d550c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d5510:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d5514:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d5516:	6074      	str	r4, [r6, #4]
   d5518:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d551a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d551c:	4630      	mov	r0, r6
   d551e:	bd70      	pop	{r4, r5, r6, pc}
   d5520:	000d7bbc 	.word	0x000d7bbc

000d5524 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d5524:	b510      	push	{r4, lr}
    class __shared_ptr
   d5526:	680b      	ldr	r3, [r1, #0]
   d5528:	4604      	mov	r4, r0
   d552a:	f840 3b04 	str.w	r3, [r0], #4
   d552e:	6849      	ldr	r1, [r1, #4]
   d5530:	f7ff fb70 	bl	d4c14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
    impl_ = peer.impl_;
    return *this;
}
   d5534:	4620      	mov	r0, r4
   d5536:	bd10      	pop	{r4, pc}

000d5538 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   d5538:	b513      	push	{r0, r1, r4, lr}
   d553a:	4604      	mov	r4, r0
    WiringBleLock lk;
   d553c:	a801      	add	r0, sp, #4
   d553e:	f7ff fc09 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d5542:	6823      	ldr	r3, [r4, #0]
   d5544:	881c      	ldrh	r4, [r3, #0]
   d5546:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d554a:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   d554c:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d554e:	bf18      	it	ne
   d5550:	2401      	movne	r4, #1
    WiringBleLock lk;
   d5552:	f7ff fc07 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d5556:	4620      	mov	r0, r4
   d5558:	b002      	add	sp, #8
   d555a:	bd10      	pop	{r4, pc}

000d555c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d555c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d555e:	4605      	mov	r5, r0
   d5560:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5562:	a801      	add	r0, sp, #4
   d5564:	f7ff fbf6 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
   d5568:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   d556a:	6823      	ldr	r3, [r4, #0]
   d556c:	f8c2 3002 	str.w	r3, [r2, #2]
   d5570:	6863      	ldr	r3, [r4, #4]
   d5572:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   d5576:	a801      	add	r0, sp, #4
   d5578:	f7ff fbf4 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   d557c:	b003      	add	sp, #12
   d557e:	bd30      	pop	{r4, r5, pc}

000d5580 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   d5580:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5582:	460d      	mov	r5, r1
   d5584:	4604      	mov	r4, r0
    WiringBleLock lk;
   d5586:	a801      	add	r0, sp, #4
   d5588:	f7ff fbe4 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d558c:	682a      	ldr	r2, [r5, #0]
   d558e:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5592:	6023      	str	r3, [r4, #0]
   d5594:	6853      	ldr	r3, [r2, #4]
   d5596:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d5598:	a801      	add	r0, sp, #4
   d559a:	f7ff fbe3 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d559e:	4620      	mov	r0, r4
   d55a0:	b003      	add	sp, #12
   d55a2:	bd30      	pop	{r4, r5, pc}

000d55a4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d55a4:	b530      	push	{r4, r5, lr}
   d55a6:	4605      	mov	r5, r0
   d55a8:	b087      	sub	sp, #28
   d55aa:	460c      	mov	r4, r1
    WiringBleLock lk;
   d55ac:	a801      	add	r0, sp, #4
   d55ae:	f7ff fbd1 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d55b2:	682a      	ldr	r2, [r5, #0]
   d55b4:	6823      	ldr	r3, [r4, #0]
   d55b6:	8812      	ldrh	r2, [r2, #0]
   d55b8:	881b      	ldrh	r3, [r3, #0]
   d55ba:	429a      	cmp	r2, r3
   d55bc:	d10d      	bne.n	d55da <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d55be:	4629      	mov	r1, r5
   d55c0:	a802      	add	r0, sp, #8
   d55c2:	f7ff ffdd 	bl	d5580 <_ZNK8particle13BlePeerDevice7addressEv>
   d55c6:	4621      	mov	r1, r4
   d55c8:	a804      	add	r0, sp, #16
   d55ca:	f7ff ffd9 	bl	d5580 <_ZNK8particle13BlePeerDevice7addressEv>
   d55ce:	a904      	add	r1, sp, #16
   d55d0:	a802      	add	r0, sp, #8
   d55d2:	f7ff fbdc 	bl	d4d8e <_ZNK8particle10BleAddresseqERKS0_>
   d55d6:	4604      	mov	r4, r0
   d55d8:	b900      	cbnz	r0, d55dc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d55da:	2400      	movs	r4, #0
    WiringBleLock lk;
   d55dc:	a801      	add	r0, sp, #4
   d55de:	f7ff fbc1 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d55e2:	4620      	mov	r0, r4
   d55e4:	b007      	add	sp, #28
   d55e6:	bd30      	pop	{r4, r5, pc}

000d55e8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d55e8:	b510      	push	{r4, lr}
   d55ea:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d55ec:	2054      	movs	r0, #84	; 0x54
   d55ee:	f7fe fd50 	bl	d4092 <_Znwj>
   d55f2:	4601      	mov	r1, r0
   d55f4:	b160      	cbz	r0, d5610 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d55f6:	2300      	movs	r3, #0
   d55f8:	e9c0 3300 	strd	r3, r3, [r0]
   d55fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5600:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5604:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d5608:	6203      	str	r3, [r0, #32]
   d560a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d560c:	63c3      	str	r3, [r0, #60]	; 0x3c
   d560e:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5610:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5612:	b919      	cbnz	r1, d561c <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d5614:	4a09      	ldr	r2, [pc, #36]	; (d563c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d5616:	200a      	movs	r0, #10
   d5618:	f7fe ffe0 	bl	d45dc <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d561c:	2000      	movs	r0, #0
   d561e:	f7fe feab 	bl	d4378 <hal_ble_stack_init>
   d5622:	b120      	cbz	r0, d562e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d5624:	4a05      	ldr	r2, [pc, #20]	; (d563c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d5626:	2100      	movs	r1, #0
   d5628:	200a      	movs	r0, #10
   d562a:	f7fe ffd7 	bl	d45dc <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d562e:	6821      	ldr	r1, [r4, #0]
   d5630:	4803      	ldr	r0, [pc, #12]	; (d5640 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5632:	2200      	movs	r2, #0
   d5634:	f7fe ff0a 	bl	d444c <hal_ble_set_callback_on_periph_link_events>
}
   d5638:	4620      	mov	r0, r4
   d563a:	bd10      	pop	{r4, pc}
   d563c:	000d4359 	.word	0x000d4359
   d5640:	000d5d89 	.word	0x000d5d89

000d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5644:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5646:	4c0b      	ldr	r4, [pc, #44]	; (d5674 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5648:	7823      	ldrb	r3, [r4, #0]
   d564a:	f3bf 8f5b 	dmb	ish
   d564e:	07db      	lsls	r3, r3, #31
   d5650:	d40e      	bmi.n	d5670 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d5652:	4620      	mov	r0, r4
   d5654:	f7fe fd21 	bl	d409a <__cxa_guard_acquire>
   d5658:	b150      	cbz	r0, d5670 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d565a:	4807      	ldr	r0, [pc, #28]	; (d5678 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d565c:	f7ff ffc4 	bl	d55e8 <_ZN8particle14BleLocalDeviceC1Ev>
   d5660:	4620      	mov	r0, r4
   d5662:	f7fe fd1f 	bl	d40a4 <__cxa_guard_release>
   d5666:	4a05      	ldr	r2, [pc, #20]	; (d567c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5668:	4905      	ldr	r1, [pc, #20]	; (d5680 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d566a:	4803      	ldr	r0, [pc, #12]	; (d5678 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d566c:	f001 ff84 	bl	d7578 <__aeabi_atexit>
    return instance;
}
   d5670:	4801      	ldr	r0, [pc, #4]	; (d5678 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5672:	bd10      	pop	{r4, pc}
   d5674:	2003e678 	.word	0x2003e678
   d5678:	2003e680 	.word	0x2003e680
   d567c:	2003df50 	.word	0x2003df50
   d5680:	000d59d7 	.word	0x000d59d7

000d5684 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5684:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d5686:	6803      	ldr	r3, [r0, #0]
   d5688:	3b09      	subs	r3, #9
   d568a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d568c:	b08d      	sub	sp, #52	; 0x34
   d568e:	4604      	mov	r4, r0
   d5690:	460d      	mov	r5, r1
    switch (event->type) {
   d5692:	d811      	bhi.n	d56b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5694:	f7ff ffd6 	bl	d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5698:	88a1      	ldrh	r1, [r4, #4]
   d569a:	6800      	ldr	r0, [r0, #0]
   d569c:	f7ff fdd1 	bl	d5242 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d56a0:	4603      	mov	r3, r0
   d56a2:	b958      	cbnz	r0, d56bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d56a4:	2220      	movs	r2, #32
   d56a6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d56aa:	4a0b      	ldr	r2, [pc, #44]	; (d56d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d56ac:	9200      	str	r2, [sp, #0]
   d56ae:	490b      	ldr	r1, [pc, #44]	; (d56dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d56b0:	aa04      	add	r2, sp, #16
   d56b2:	2032      	movs	r0, #50	; 0x32
   d56b4:	f7fe ff9a 	bl	d45ec <log_message>
}
   d56b8:	b00d      	add	sp, #52	; 0x34
   d56ba:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d56bc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d56be:	2a00      	cmp	r2, #0
   d56c0:	d0fa      	beq.n	d56b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d56c2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56c6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d56ca:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d56ce:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d56d0:	aa04      	add	r2, sp, #16
   d56d2:	a903      	add	r1, sp, #12
   d56d4:	47a0      	blx	r4
}
   d56d6:	e7ef      	b.n	d56b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d56d8:	000d7a11 	.word	0x000d7a11
   d56dc:	000d79b8 	.word	0x000d79b8

000d56e0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d56e0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d56e2:	2000      	movs	r0, #0
   d56e4:	f7fe fe48 	bl	d4378 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d56e8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d56ec:	bd08      	pop	{r3, pc}

000d56ee <_ZN8particle16BleScanDelegatorC1Ev>:
   d56ee:	2200      	movs	r2, #0
              customDataLen_(0) {
   d56f0:	f647 717f 	movw	r1, #32639	; 0x7f7f
   d56f4:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   d56f8:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d56fc:	e9c0 2204 	strd	r2, r2, [r0, #16]
   d5700:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   d5704:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   d5708:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   d570c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   d5710:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   d5714:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   d5718:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   d571c:	6202      	str	r2, [r0, #32]
   d571e:	6302      	str	r2, [r0, #48]	; 0x30
   d5720:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   d5724:	4770      	bx	lr
	...

000d5728 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   d5728:	b570      	push	{r4, r5, r6, lr}
   d572a:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   d572c:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   d572e:	460e      	mov	r6, r1
   d5730:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   d5732:	f7ff fa90 	bl	d4c56 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   d5736:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d573a:	f7ff fa80 	bl	d4c3e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d573e:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5742:	2200      	movs	r2, #0
   d5744:	4621      	mov	r1, r4
   d5746:	4803      	ldr	r0, [pc, #12]	; (d5754 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   d5748:	f7fe fe1e 	bl	d4388 <hal_ble_gap_start_scan>
   d574c:	2800      	cmp	r0, #0
        return foundCount_;
   d574e:	bfa8      	it	ge
   d5750:	6960      	ldrge	r0, [r4, #20]
    }
   d5752:	bd70      	pop	{r4, r5, r6, pc}
   d5754:	000d6c61 	.word	0x000d6c61

000d5758 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
            return false;
        }
        return true;
    }

    bool filterByCustomData(const BleScanResult& result) {
   d5758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return customData_;
   d575c:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   d5760:	b08b      	sub	sp, #44	; 0x2c
   d5762:	460e      	mov	r6, r1
        size_t filterCustomDatalen;
        const uint8_t* filterCustomData = filter_.customData(&filterCustomDatalen);
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   d5764:	f1b8 0f00 	cmp.w	r8, #0
   d5768:	d103      	bne.n	d5772 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x1a>
                }
            }
            LOG_DEBUG(TRACE, "Custom data mismatched.");
            return false;
        }
        return true;
   d576a:	2001      	movs	r0, #1
    }
   d576c:	b00b      	add	sp, #44	; 0x2c
   d576e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *len = customDataLen_;
   d5772:	6f05      	ldr	r5, [r0, #112]	; 0x70
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   d5774:	2d00      	cmp	r5, #0
   d5776:	d0f8      	beq.n	d576a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x12>
        return scanResponse_;
   d5778:	f101 092c 	add.w	r9, r1, #44	; 0x2c
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, sizeof(size_t));
   d577c:	2304      	movs	r3, #4
   d577e:	2200      	movs	r2, #0
   d5780:	21ff      	movs	r1, #255	; 0xff
   d5782:	4648      	mov	r0, r9
   d5784:	f7ff fcca 	bl	d511c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   d5788:	3608      	adds	r6, #8
   d578a:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, sizeof(size_t));
   d578c:	2304      	movs	r3, #4
   d578e:	2200      	movs	r2, #0
   d5790:	21ff      	movs	r1, #255	; 0xff
   d5792:	4630      	mov	r0, r6
   d5794:	f7ff fcc2 	bl	d511c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   d5798:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, sizeof(size_t));
   d579a:	4607      	mov	r7, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   d579c:	d013      	beq.n	d57c6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x6e>
   d579e:	42af      	cmp	r7, r5
   d57a0:	d10f      	bne.n	d57c2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x6a>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   d57a2:	4628      	mov	r0, r5
   d57a4:	f7fe ffb6 	bl	d4714 <malloc>
                if (!buf) {
   d57a8:	4604      	mov	r4, r0
   d57aa:	bb00      	cbnz	r0, d57ee <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x96>
                    LOG(ERROR, "Failed to allocate memory!");
   d57ac:	2320      	movs	r3, #32
   d57ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d57b2:	4b16      	ldr	r3, [pc, #88]	; (d580c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xb4>)
   d57b4:	9300      	str	r3, [sp, #0]
   d57b6:	4916      	ldr	r1, [pc, #88]	; (d5810 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xb8>)
   d57b8:	4623      	mov	r3, r4
   d57ba:	aa02      	add	r2, sp, #8
   d57bc:	2032      	movs	r0, #50	; 0x32
   d57be:	f7fe ff15 	bl	d45ec <log_message>
                return false;
   d57c2:	2000      	movs	r0, #0
   d57c4:	e7d2      	b.n	d576c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x14>
                uint8_t* buf = (uint8_t*)malloc(srLen);
   d57c6:	4620      	mov	r0, r4
   d57c8:	f7fe ffa4 	bl	d4714 <malloc>
                if (!buf) {
   d57cc:	4604      	mov	r4, r0
   d57ce:	2800      	cmp	r0, #0
   d57d0:	d0ec      	beq.n	d57ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x54>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   d57d2:	4602      	mov	r2, r0
   d57d4:	21ff      	movs	r1, #255	; 0xff
   d57d6:	462b      	mov	r3, r5
   d57d8:	4648      	mov	r0, r9
   d57da:	f7ff fc9f 	bl	d511c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   d57de:	462a      	mov	r2, r5
   d57e0:	4641      	mov	r1, r8
   d57e2:	4620      	mov	r0, r4
   d57e4:	f001 fff2 	bl	d77cc <memcmp>
   d57e8:	2800      	cmp	r0, #0
   d57ea:	d1d8      	bne.n	d579e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x46>
   d57ec:	e7bd      	b.n	d576a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x12>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   d57ee:	4602      	mov	r2, r0
   d57f0:	462b      	mov	r3, r5
   d57f2:	21ff      	movs	r1, #255	; 0xff
   d57f4:	4630      	mov	r0, r6
   d57f6:	f7ff fc91 	bl	d511c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   d57fa:	462a      	mov	r2, r5
   d57fc:	4641      	mov	r1, r8
   d57fe:	4620      	mov	r0, r4
   d5800:	f001 ffe4 	bl	d77cc <memcmp>
   d5804:	fab0 f080 	clz	r0, r0
   d5808:	0940      	lsrs	r0, r0, #5
   d580a:	e7af      	b.n	d576c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x14>
   d580c:	000d7a29 	.word	0x000d7a29
   d5810:	000d79b8 	.word	0x000d79b8

000d5814 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d5814:	6803      	ldr	r3, [r0, #0]
   d5816:	69d8      	ldr	r0, [r3, #28]
}
   d5818:	2800      	cmp	r0, #0
   d581a:	bfd4      	ite	le
   d581c:	2000      	movle	r0, #0
   d581e:	2001      	movgt	r0, #1
   d5820:	4770      	bx	lr

000d5822 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5822:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5824:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5828:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d582a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d582e:	42ae      	cmp	r6, r5
   d5830:	d004      	beq.n	d583c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5832:	4628      	mov	r0, r5
   d5834:	f7fe fff2 	bl	d481c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d5838:	3510      	adds	r5, #16
   d583a:	e7f8      	b.n	d582e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d583c:	6820      	ldr	r0, [r4, #0]
   d583e:	f7fe ff71 	bl	d4724 <free>
}
   d5842:	4620      	mov	r0, r4
   d5844:	bd70      	pop	{r4, r5, r6, pc}

000d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5846:	b510      	push	{r4, lr}
   d5848:	4604      	mov	r4, r0
    ::free(ptr);
   d584a:	6800      	ldr	r0, [r0, #0]
   d584c:	f7fe ff6a 	bl	d4724 <free>
}
   d5850:	4620      	mov	r0, r4
   d5852:	bd10      	pop	{r4, pc}

000d5854 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   d5854:	b538      	push	{r3, r4, r5, lr}
   d5856:	4604      	mov	r4, r0
    ::free(ptr);
   d5858:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   d585a:	f7fe ff63 	bl	d4724 <free>
   d585e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5860:	f7fe ff60 	bl	d4724 <free>
    ~BleScanFilter() = default;
   d5864:	f104 0538 	add.w	r5, r4, #56	; 0x38
   d5868:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d586c:	f7ff ffeb 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   d5870:	4628      	mov	r0, r5
   d5872:	f7ff ffd6 	bl	d5822 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   d5876:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d587a:	f7ff fa42 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
   d587e:	f104 0018 	add.w	r0, r4, #24
   d5882:	f7ff fa3e 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
   d5886:	6820      	ldr	r0, [r4, #0]
   d5888:	f7fe ff4c 	bl	d4724 <free>
   d588c:	4620      	mov	r0, r4
   d588e:	bd38      	pop	{r3, r4, r5, pc}

000d5890 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5890:	b530      	push	{r4, r5, lr}
   d5892:	4615      	mov	r5, r2
   d5894:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   d5896:	460c      	mov	r4, r1
   d5898:	b179      	cbz	r1, d58ba <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   d589a:	b172      	cbz	r2, d58ba <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   d589c:	a801      	add	r0, sp, #4
   d589e:	f7ff ff26 	bl	d56ee <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   d58a2:	4621      	mov	r1, r4
   d58a4:	462a      	mov	r2, r5
   d58a6:	a801      	add	r0, sp, #4
   d58a8:	f7ff ff3e 	bl	d5728 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   d58ac:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   d58ae:	a801      	add	r0, sp, #4
   d58b0:	f7ff ffd0 	bl	d5854 <_ZN8particle16BleScanDelegatorD1Ev>
}
   d58b4:	4620      	mov	r0, r4
   d58b6:	b01f      	add	sp, #124	; 0x7c
   d58b8:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d58ba:	4c01      	ldr	r4, [pc, #4]	; (d58c0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   d58bc:	e7fa      	b.n	d58b4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   d58be:	bf00      	nop
   d58c0:	fffffef2 	.word	0xfffffef2

000d58c4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d58c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d58c6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d58c8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d58ca:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d58cc:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d58ce:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d58d0:	f7fe fbdf 	bl	d4092 <_Znwj>
   d58d4:	b118      	cbz	r0, d58de <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d58d6:	682b      	ldr	r3, [r5, #0]
   d58d8:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d58da:	686b      	ldr	r3, [r5, #4]
   d58dc:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d58de:	4b03      	ldr	r3, [pc, #12]	; (d58ec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d58e0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d58e2:	4b03      	ldr	r3, [pc, #12]	; (d58f0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d58e4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d58e6:	60a3      	str	r3, [r4, #8]
      }
   d58e8:	4620      	mov	r0, r4
   d58ea:	bd38      	pop	{r3, r4, r5, pc}
   d58ec:	000d4cad 	.word	0x000d4cad
   d58f0:	000d4c6f 	.word	0x000d4c6f

000d58f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d58f4:	680b      	ldr	r3, [r1, #0]
   d58f6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d58f8:	b113      	cbz	r3, d5900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d58fa:	685a      	ldr	r2, [r3, #4]
   d58fc:	3201      	adds	r2, #1
   d58fe:	605a      	str	r2, [r3, #4]
      }
   d5900:	4770      	bx	lr

000d5902 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5902:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5904:	f851 3b04 	ldr.w	r3, [r1], #4
   d5908:	4604      	mov	r4, r0
   d590a:	f840 3b04 	str.w	r3, [r0], #4
   d590e:	f7ff fff1 	bl	d58f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d5912:	6823      	ldr	r3, [r4, #0]
   d5914:	b90b      	cbnz	r3, d591a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5916:	f7ff f975 	bl	d4c04 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d591a:	4620      	mov	r0, r4
   d591c:	bd10      	pop	{r4, pc}

000d591e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d591e:	b510      	push	{r4, lr}
   d5920:	f851 3b04 	ldr.w	r3, [r1], #4
   d5924:	4604      	mov	r4, r0
   d5926:	f840 3b04 	str.w	r3, [r0], #4
   d592a:	f7ff ffe3 	bl	d58f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d592e:	4620      	mov	r0, r4
   d5930:	bd10      	pop	{r4, pc}

000d5932 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5932:	b510      	push	{r4, lr}
   d5934:	f851 3b04 	ldr.w	r3, [r1], #4
   d5938:	4604      	mov	r4, r0
   d593a:	f840 3b04 	str.w	r3, [r0], #4
   d593e:	f7ff ffd9 	bl	d58f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5942:	4620      	mov	r0, r4
   d5944:	bd10      	pop	{r4, pc}

000d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5946:	b510      	push	{r4, lr}
   d5948:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d594a:	6800      	ldr	r0, [r0, #0]
   d594c:	b128      	cbz	r0, d595a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d594e:	6843      	ldr	r3, [r0, #4]
   d5950:	3b01      	subs	r3, #1
   d5952:	6043      	str	r3, [r0, #4]
   d5954:	b90b      	cbnz	r3, d595a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5956:	f7ff f8aa 	bl	d4aae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d595a:	4620      	mov	r0, r4
   d595c:	bd10      	pop	{r4, pc}

000d595e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d595e:	b510      	push	{r4, lr}
   d5960:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5962:	3004      	adds	r0, #4
   d5964:	f7ff ffef 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5968:	4620      	mov	r0, r4
   d596a:	bd10      	pop	{r4, pc}

000d596c <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   d596c:	b510      	push	{r4, lr}
   d596e:	4604      	mov	r4, r0
   d5970:	3004      	adds	r0, #4
   d5972:	f7ff ffe8 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5976:	4620      	mov	r0, r4
   d5978:	bd10      	pop	{r4, pc}

000d597a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d597a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d597c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5980:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5982:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5986:	42ae      	cmp	r6, r5
   d5988:	d004      	beq.n	d5994 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d598a:	1d28      	adds	r0, r5, #4
   d598c:	f7ff ffdb 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5990:	3508      	adds	r5, #8
   d5992:	e7f8      	b.n	d5986 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5994:	6820      	ldr	r0, [r4, #0]
   d5996:	f7fe fec5 	bl	d4724 <free>
}
   d599a:	4620      	mov	r0, r4
   d599c:	bd70      	pop	{r4, r5, r6, pc}

000d599e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d599e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d59a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d59a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d59a6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d59aa:	42ae      	cmp	r6, r5
   d59ac:	d004      	beq.n	d59b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d59ae:	1d28      	adds	r0, r5, #4
   d59b0:	f7ff ffc9 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59b4:	3508      	adds	r5, #8
   d59b6:	e7f8      	b.n	d59aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d59b8:	6820      	ldr	r0, [r4, #0]
   d59ba:	f7fe feb3 	bl	d4724 <free>
}
   d59be:	4620      	mov	r0, r4
   d59c0:	bd70      	pop	{r4, r5, r6, pc}

000d59c2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d59c2:	b510      	push	{r4, lr}
   d59c4:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d59c6:	3024      	adds	r0, #36	; 0x24
   d59c8:	f7ff ffe9 	bl	d599e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d59cc:	f104 0018 	add.w	r0, r4, #24
   d59d0:	f7ff ffd3 	bl	d597a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d59d4:	bd10      	pop	{r4, pc}

000d59d6 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d59d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d59d8:	6804      	ldr	r4, [r0, #0]
   d59da:	4606      	mov	r6, r0
   d59dc:	b324      	cbz	r4, d5a28 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d59de:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d59e2:	f7ff f98e 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
   d59e6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d59ea:	f7ff f98a 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
   d59ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d59f2:	f7ff f986 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d59f6:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d59fa:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d59fe:	42af      	cmp	r7, r5
   d5a00:	d004      	beq.n	d5a0c <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d5a02:	1d28      	adds	r0, r5, #4
   d5a04:	f7ff ff9f 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a08:	3508      	adds	r5, #8
   d5a0a:	e7f8      	b.n	d59fe <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d5a0c:	69a0      	ldr	r0, [r4, #24]
   d5a0e:	f7fe fe89 	bl	d4724 <free>
    ~BleLocalDeviceImpl() = default;
   d5a12:	f104 000c 	add.w	r0, r4, #12
   d5a16:	f7ff ffc2 	bl	d599e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	f7ff ffad 	bl	d597a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d5a20:	2154      	movs	r1, #84	; 0x54
   d5a22:	4620      	mov	r0, r4
   d5a24:	f001 fdad 	bl	d7582 <_ZdlPvj>
   d5a28:	4630      	mov	r0, r6
   d5a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a2c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d5a2c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5a2e:	b510      	push	{r4, lr}
      if (_M_empty())
   d5a30:	b90a      	cbnz	r2, d5a36 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d5a32:	f001 fda8 	bl	d7586 <_ZSt25__throw_bad_function_callv>
    }
   d5a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a3a:	68c3      	ldr	r3, [r0, #12]
   d5a3c:	4718      	bx	r3

000d5a3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   d5a42:	2300      	movs	r3, #0
   d5a44:	e9c0 3300 	strd	r3, r3, [r0]
   d5a48:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5a4a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   d5a4e:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5a50:	4605      	mov	r5, r0
   d5a52:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5a54:	dd47      	ble.n	d5ae6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xa8>
    return ::malloc(size);
   d5a56:	ea4f 1008 	mov.w	r0, r8, lsl #4
   d5a5a:	f7fe fe5b 	bl	d4714 <malloc>
            if (!d) {
   d5a5e:	4606      	mov	r6, r0
   d5a60:	2800      	cmp	r0, #0
   d5a62:	d040      	beq.n	d5ae6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xa8>
            move(d, data_, data_ + size_);
   d5a64:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   d5a68:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   d5a6a:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   d5a6e:	d916      	bls.n	d5a9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   d5a70:	4550      	cmp	r0, sl
   d5a72:	d215      	bcs.n	d5aa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   d5a74:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   d5a78:	f1a4 0910 	sub.w	r9, r4, #16
   d5a7c:	ebaa 0404 	sub.w	r4, sl, r4
   d5a80:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5a82:	45d1      	cmp	r9, sl
   d5a84:	d01a      	beq.n	d5abc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x7e>
                new(dest) T(std::move(*end));
   d5a86:	b11c      	cbz	r4, d5a90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   d5a88:	4651      	mov	r1, sl
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	f7fe ff42 	bl	d4914 <_ZN6StringC1EOS_>
                end->~T();
   d5a90:	4650      	mov	r0, sl
   d5a92:	f7fe fec3 	bl	d481c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5a96:	f1aa 0a10 	sub.w	sl, sl, #16
   d5a9a:	3c10      	subs	r4, #16
   d5a9c:	e7f1      	b.n	d5a82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   d5a9e:	d00d      	beq.n	d5abc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x7e>
   d5aa0:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   d5aa2:	45a2      	cmp	sl, r4
   d5aa4:	d00a      	beq.n	d5abc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x7e>
                new(dest) T(std::move(*p));
   d5aa6:	4621      	mov	r1, r4
   d5aa8:	4648      	mov	r0, r9
   d5aaa:	f7fe ff33 	bl	d4914 <_ZN6StringC1EOS_>
                p->~T();
   d5aae:	4620      	mov	r0, r4
   d5ab0:	f7fe feb4 	bl	d481c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5ab4:	3410      	adds	r4, #16
   d5ab6:	f109 0910 	add.w	r9, r9, #16
   d5aba:	e7f2      	b.n	d5aa2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   d5abc:	6828      	ldr	r0, [r5, #0]
   d5abe:	f7fe fe31 	bl	d4724 <free>
        capacity_ = n;
   d5ac2:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   d5ac6:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5ac8:	e9d7 4300 	ldrd	r4, r3, [r7]
   d5acc:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   d5ad0:	45a0      	cmp	r8, r4
   d5ad2:	d006      	beq.n	d5ae2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xa4>
            new(dest) T(*it);
   d5ad4:	4621      	mov	r1, r4
   d5ad6:	4630      	mov	r0, r6
   d5ad8:	f7fe ff36 	bl	d4948 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   d5adc:	3410      	adds	r4, #16
   d5ade:	3610      	adds	r6, #16
   d5ae0:	e7f6      	b.n	d5ad0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x92>
        size_ = vector.size_;
   d5ae2:	687b      	ldr	r3, [r7, #4]
   d5ae4:	606b      	str	r3, [r5, #4]
}
   d5ae6:	4628      	mov	r0, r5
   d5ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5aec <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   d5aec:	b530      	push	{r4, r5, lr}
   d5aee:	b08d      	sub	sp, #52	; 0x34
   d5af0:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   d5af2:	f100 0138 	add.w	r1, r0, #56	; 0x38
   d5af6:	a801      	add	r0, sp, #4
   d5af8:	f7ff ffa1 	bl	d5a3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   d5afc:	9b02      	ldr	r3, [sp, #8]
   d5afe:	2b00      	cmp	r3, #0
   d5b00:	dd2f      	ble.n	d5b62 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   d5b02:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d5b06:	a804      	add	r0, sp, #16
   d5b08:	f7ff fb38 	bl	d517c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   d5b0c:	f104 0108 	add.w	r1, r4, #8
   d5b10:	a808      	add	r0, sp, #32
   d5b12:	f7ff fb33 	bl	d517c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   d5b16:	9a06      	ldr	r2, [sp, #24]
   d5b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5b1a:	4313      	orrs	r3, r2
   d5b1c:	d01f      	beq.n	d5b5e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   d5b1e:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   d5b22:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   d5b26:	42ac      	cmp	r4, r5
   d5b28:	d019      	beq.n	d5b5e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   d5b2a:	a904      	add	r1, sp, #16
   d5b2c:	4620      	mov	r0, r4
   d5b2e:	f7fe ff61 	bl	d49f4 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   d5b32:	b160      	cbz	r0, d5b4e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   d5b34:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   d5b36:	a808      	add	r0, sp, #32
   d5b38:	f7fe fe70 	bl	d481c <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   d5b3c:	a804      	add	r0, sp, #16
   d5b3e:	f7fe fe6d 	bl	d481c <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   d5b42:	a801      	add	r0, sp, #4
   d5b44:	f7ff fe6d 	bl	d5822 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   d5b48:	4620      	mov	r0, r4
   d5b4a:	b00d      	add	sp, #52	; 0x34
   d5b4c:	bd30      	pop	{r4, r5, pc}
   d5b4e:	4620      	mov	r0, r4
   d5b50:	a908      	add	r1, sp, #32
   d5b52:	f7fe ff4f 	bl	d49f4 <_ZNK6String6equalsERKS_>
   d5b56:	3410      	adds	r4, #16
                if (name == srName || name == advName) {
   d5b58:	2800      	cmp	r0, #0
   d5b5a:	d0e4      	beq.n	d5b26 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   d5b5c:	e7ea      	b.n	d5b34 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   d5b5e:	2400      	movs	r4, #0
   d5b60:	e7e9      	b.n	d5b36 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   d5b62:	2401      	movs	r4, #1
   d5b64:	e7ed      	b.n	d5b42 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000d5b66 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   d5b68:	2300      	movs	r3, #0
   d5b6a:	e9c0 3300 	strd	r3, r3, [r0]
   d5b6e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5b70:	684f      	ldr	r7, [r1, #4]
   d5b72:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5b74:	4605      	mov	r5, r0
   d5b76:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5b78:	dd39      	ble.n	d5bee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x88>
    return ::malloc(size);
   d5b7a:	00f8      	lsls	r0, r7, #3
   d5b7c:	f7fe fdca 	bl	d4714 <malloc>
            if (!d) {
   d5b80:	4604      	mov	r4, r0
   d5b82:	b3a0      	cbz	r0, d5bee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x88>
            move(d, data_, data_ + size_);
   d5b84:	e9d5 3200 	ldrd	r3, r2, [r5]
        if (dest > p && dest < end) {
   d5b88:	4298      	cmp	r0, r3
            move(d, data_, data_ + size_);
   d5b8a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (dest > p && dest < end) {
   d5b8e:	d910      	bls.n	d5bb2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   d5b90:	4290      	cmp	r0, r2
   d5b92:	d20f      	bcs.n	d5bb4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   d5b94:	3a08      	subs	r2, #8
            dest += end - p - 1;
   d5b96:	f1a3 0008 	sub.w	r0, r3, #8
   d5b9a:	1ad3      	subs	r3, r2, r3
   d5b9c:	4423      	add	r3, r4
            for (; end != p; --end, --dest) {
   d5b9e:	4290      	cmp	r0, r2
   d5ba0:	d012      	beq.n	d5bc8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x62>
                new(dest) T(std::move(*end));
   d5ba2:	b11b      	cbz	r3, d5bac <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   d5ba4:	6811      	ldr	r1, [r2, #0]
   d5ba6:	6019      	str	r1, [r3, #0]
   d5ba8:	6851      	ldr	r1, [r2, #4]
   d5baa:	6059      	str	r1, [r3, #4]
            for (; end != p; --end, --dest) {
   d5bac:	3a08      	subs	r2, #8
   d5bae:	3b08      	subs	r3, #8
   d5bb0:	e7f5      	b.n	d5b9e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   d5bb2:	d009      	beq.n	d5bc8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x62>
   d5bb4:	4621      	mov	r1, r4
            for (; p != end; ++p, ++dest) {
   d5bb6:	429a      	cmp	r2, r3
   d5bb8:	d006      	beq.n	d5bc8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x62>
   d5bba:	6818      	ldr	r0, [r3, #0]
   d5bbc:	6008      	str	r0, [r1, #0]
   d5bbe:	6858      	ldr	r0, [r3, #4]
   d5bc0:	6048      	str	r0, [r1, #4]
   d5bc2:	3308      	adds	r3, #8
   d5bc4:	3108      	adds	r1, #8
   d5bc6:	e7f6      	b.n	d5bb6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x50>
    ::free(ptr);
   d5bc8:	6828      	ldr	r0, [r5, #0]
   d5bca:	f7fe fdab 	bl	d4724 <free>
        data_ = d;
   d5bce:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5bd0:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5bd2:	e9d6 3100 	ldrd	r3, r1, [r6]
   d5bd6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   d5bda:	4298      	cmp	r0, r3
   d5bdc:	d006      	beq.n	d5bec <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x86>
   d5bde:	681a      	ldr	r2, [r3, #0]
   d5be0:	6022      	str	r2, [r4, #0]
   d5be2:	685a      	ldr	r2, [r3, #4]
   d5be4:	6062      	str	r2, [r4, #4]
   d5be6:	3308      	adds	r3, #8
   d5be8:	3408      	adds	r4, #8
   d5bea:	e7f6      	b.n	d5bda <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x74>
        size_ = vector.size_;
   d5bec:	6069      	str	r1, [r5, #4]
}
   d5bee:	4628      	mov	r0, r5
   d5bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5bf2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5bf2:	b570      	push	{r4, r5, r6, lr}
   d5bf4:	4604      	mov	r4, r0
        capacity_(0) {
   d5bf6:	2000      	movs	r0, #0
   d5bf8:	e9c4 0000 	strd	r0, r0, [r4]
   d5bfc:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5bfe:	684e      	ldr	r6, [r1, #4]
   d5c00:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5c02:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5c04:	dd12      	ble.n	d5c2c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   d5c06:	0071      	lsls	r1, r6, #1
   d5c08:	f7fe fd94 	bl	d4734 <realloc>
            if (!d) {
   d5c0c:	b170      	cbz	r0, d5c2c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   d5c0e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5c10:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5c12:	e9d5 3200 	ldrd	r3, r2, [r5]
   d5c16:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   d5c1a:	429a      	cmp	r2, r3
   d5c1c:	d004      	beq.n	d5c28 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   d5c1e:	f833 1b02 	ldrh.w	r1, [r3], #2
   d5c22:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   d5c26:	e7f8      	b.n	d5c1a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   d5c28:	686b      	ldr	r3, [r5, #4]
   d5c2a:	6063      	str	r3, [r4, #4]
}
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	bd70      	pop	{r4, r5, r6, pc}

000d5c30 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   d5c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c32:	680b      	ldr	r3, [r1, #0]
   d5c34:	6003      	str	r3, [r0, #0]
   d5c36:	684b      	ldr	r3, [r1, #4]
   d5c38:	6043      	str	r3, [r0, #4]
   d5c3a:	f101 0508 	add.w	r5, r1, #8
   d5c3e:	4606      	mov	r6, r0
   d5c40:	460f      	mov	r7, r1
   d5c42:	f100 0408 	add.w	r4, r0, #8
   d5c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c4e:	682b      	ldr	r3, [r5, #0]
   d5c50:	6023      	str	r3, [r4, #0]
   d5c52:	f107 052c 	add.w	r5, r7, #44	; 0x2c
   d5c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c58:	f106 042c 	add.w	r4, r6, #44	; 0x2c
   d5c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c62:	682b      	ldr	r3, [r5, #0]
   d5c64:	6023      	str	r3, [r4, #0]
   d5c66:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   d5c6a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
   d5c6e:	4630      	mov	r0, r6
   d5c70:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5c72:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c76:	4604      	mov	r4, r0
   d5c78:	460d      	mov	r5, r1
   d5c7a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5c7c:	d914      	bls.n	d5ca8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5c7e:	4290      	cmp	r0, r2
   d5c80:	d213      	bcs.n	d5caa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d5c82:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d5c86:	1a75      	subs	r5, r6, r1
   d5c88:	f1a1 0708 	sub.w	r7, r1, #8
   d5c8c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5c8e:	42b7      	cmp	r7, r6
   d5c90:	d018      	beq.n	d5cc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5c92:	b11c      	cbz	r4, d5c9c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5c94:	4631      	mov	r1, r6
   d5c96:	4620      	mov	r0, r4
   d5c98:	f7ff fe4b 	bl	d5932 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5c9c:	1d30      	adds	r0, r6, #4
   d5c9e:	f7ff fe52 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5ca2:	3e08      	subs	r6, #8
   d5ca4:	3c08      	subs	r4, #8
   d5ca6:	e7f2      	b.n	d5c8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5ca8:	d00c      	beq.n	d5cc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5caa:	42b5      	cmp	r5, r6
   d5cac:	d00a      	beq.n	d5cc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5cae:	b11c      	cbz	r4, d5cb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5cb0:	4629      	mov	r1, r5
   d5cb2:	4620      	mov	r0, r4
   d5cb4:	f7ff fe3d 	bl	d5932 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5cb8:	1d28      	adds	r0, r5, #4
   d5cba:	f7ff fe44 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5cbe:	3508      	adds	r5, #8
   d5cc0:	3408      	adds	r4, #8
   d5cc2:	e7f2      	b.n	d5caa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5cca:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5cce:	4605      	mov	r5, r0
   d5cd0:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5cd2:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d5cd6:	42a7      	cmp	r7, r4
   d5cd8:	d103      	bne.n	d5ce2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d5cda:	2600      	movs	r6, #0
}
   d5cdc:	4630      	mov	r0, r6
   d5cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d5ce2:	4641      	mov	r1, r8
   d5ce4:	4620      	mov	r0, r4
   d5ce6:	f7ff fc5d 	bl	d55a4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5cea:	4606      	mov	r6, r0
   d5cec:	b908      	cbnz	r0, d5cf2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d5cee:	3408      	adds	r4, #8
   d5cf0:	e7f1      	b.n	d5cd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d5cf2:	2c00      	cmp	r4, #0
   d5cf4:	d0f1      	beq.n	d5cda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d5cf6:	1d20      	adds	r0, r4, #4
   d5cf8:	f7ff fe25 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d5cfc:	e9d5 3200 	ldrd	r3, r2, [r5]
   d5d00:	f104 0108 	add.w	r1, r4, #8
   d5d04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5d08:	4620      	mov	r0, r4
   d5d0a:	f7ff ffb2 	bl	d5c72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5d0e:	686b      	ldr	r3, [r5, #4]
   d5d10:	3b01      	subs	r3, #1
   d5d12:	606b      	str	r3, [r5, #4]
    return true;
   d5d14:	e7e2      	b.n	d5cdc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d5d16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5d18:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5d1a:	6846      	ldr	r6, [r0, #4]
   d5d1c:	4668      	mov	r0, sp
   d5d1e:	f7ff fe08 	bl	d5932 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d22:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d5d26:	429f      	cmp	r7, r3
   d5d28:	db12      	blt.n	d5d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d5d2a:	3701      	adds	r7, #1
        if (n > 0) {
   d5d2c:	2f00      	cmp	r7, #0
   d5d2e:	dd29      	ble.n	d5d84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d5d30:	00f8      	lsls	r0, r7, #3
   d5d32:	f7fe fcef 	bl	d4714 <malloc>
            if (!d) {
   d5d36:	4605      	mov	r5, r0
   d5d38:	b1f0      	cbz	r0, d5d78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d5d3a:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5d3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5d42:	f7ff ff96 	bl	d5c72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5d46:	6820      	ldr	r0, [r4, #0]
   d5d48:	f7fe fcec 	bl	d4724 <free>
        data_ = d;
   d5d4c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5d4e:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d5d50:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5d52:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5d54:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d5d58:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5d5c:	4631      	mov	r1, r6
   d5d5e:	f106 0008 	add.w	r0, r6, #8
   d5d62:	f7ff ff86 	bl	d5c72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5d66:	b11e      	cbz	r6, d5d70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d5d68:	4669      	mov	r1, sp
   d5d6a:	4630      	mov	r0, r6
   d5d6c:	f7ff fde1 	bl	d5932 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5d70:	6863      	ldr	r3, [r4, #4]
   d5d72:	3301      	adds	r3, #1
   d5d74:	6063      	str	r3, [r4, #4]
    return true;
   d5d76:	2501      	movs	r5, #1
   d5d78:	a801      	add	r0, sp, #4
   d5d7a:	f7ff fde4 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d7e:	4628      	mov	r0, r5
   d5d80:	b003      	add	sp, #12
   d5d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d5d84:	2500      	movs	r5, #0
   d5d86:	e7de      	b.n	d5d46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000d5d88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d8c:	4605      	mov	r5, r0
   d5d8e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d5d90:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5d92:	460c      	mov	r4, r1
        WiringBleLock lk;
   d5d94:	f7fe ffde 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5d98:	682e      	ldr	r6, [r5, #0]
   d5d9a:	2e04      	cmp	r6, #4
   d5d9c:	d06b      	beq.n	d5e76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d5d9e:	d807      	bhi.n	d5db0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d5da0:	2e03      	cmp	r6, #3
   d5da2:	d028      	beq.n	d5df6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d5da4:	a803      	add	r0, sp, #12
   d5da6:	f7fe ffdd 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d5daa:	b00e      	add	sp, #56	; 0x38
   d5dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d5db0:	f1a6 030c 	sub.w	r3, r6, #12
   d5db4:	2b03      	cmp	r3, #3
   d5db6:	d8f5      	bhi.n	d5da4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5db8:	89a9      	ldrh	r1, [r5, #12]
   d5dba:	4620      	mov	r0, r4
   d5dbc:	f7ff fa41 	bl	d5242 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5dc0:	4607      	mov	r7, r0
   d5dc2:	2800      	cmp	r0, #0
   d5dc4:	d0ee      	beq.n	d5da4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d5dc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d5dc8:	2b00      	cmp	r3, #0
   d5dca:	d0eb      	beq.n	d5da4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d5dcc:	2210      	movs	r2, #16
   d5dce:	2100      	movs	r1, #0
   d5dd0:	a807      	add	r0, sp, #28
   d5dd2:	f001 fd31 	bl	d7838 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d5dd6:	2e0d      	cmp	r6, #13
                        };
   d5dd8:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d5dda:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d5dde:	f040 8092 	bne.w	d5f06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d5de2:	686b      	ldr	r3, [r5, #4]
   d5de4:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d5de6:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d5de8:	9308      	str	r3, [sp, #32]
   d5dea:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5dec:	a906      	add	r1, sp, #24
   d5dee:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5df2:	4798      	blx	r3
   d5df4:	e7d6      	b.n	d5da4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d5df6:	a804      	add	r0, sp, #16
   d5df8:	f7ff fb72 	bl	d54e0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5dfc:	9b04      	ldr	r3, [sp, #16]
   d5dfe:	89aa      	ldrh	r2, [r5, #12]
   d5e00:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d5e02:	6869      	ldr	r1, [r5, #4]
   d5e04:	9804      	ldr	r0, [sp, #16]
   d5e06:	3108      	adds	r1, #8
   d5e08:	3002      	adds	r0, #2
   d5e0a:	f7fe ffb3 	bl	d4d74 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d5e0e:	a904      	add	r1, sp, #16
   d5e10:	a806      	add	r0, sp, #24
   d5e12:	f7ff fd8e 	bl	d5932 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d5e16:	a906      	add	r1, sp, #24
   d5e18:	f104 0018 	add.w	r0, r4, #24
   d5e1c:	f7ff ff7b 	bl	d5d16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5e20:	4605      	mov	r5, r0
   d5e22:	a807      	add	r0, sp, #28
   d5e24:	f7ff fd8f 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e28:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5e2a:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d5e2c:	b98d      	cbnz	r5, d5e52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5e2e:	4b3e      	ldr	r3, [pc, #248]	; (d5f28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d5e30:	493e      	ldr	r1, [pc, #248]	; (d5f2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5e32:	9300      	str	r3, [sp, #0]
   d5e34:	2032      	movs	r0, #50	; 0x32
   d5e36:	462b      	mov	r3, r5
   d5e38:	aa06      	add	r2, sp, #24
   d5e3a:	9507      	str	r5, [sp, #28]
   d5e3c:	f7fe fbd6 	bl	d45ec <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5e40:	9b04      	ldr	r3, [sp, #16]
   d5e42:	4629      	mov	r1, r5
   d5e44:	8818      	ldrh	r0, [r3, #0]
   d5e46:	f7fe fab1 	bl	d43ac <hal_ble_gap_disconnect>
   d5e4a:	a805      	add	r0, sp, #20
   d5e4c:	f7ff fd7b 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e50:	e7a8      	b.n	d5da4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d5e52:	4a37      	ldr	r2, [pc, #220]	; (d5f30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d5e54:	9200      	str	r2, [sp, #0]
   d5e56:	2300      	movs	r3, #0
   d5e58:	4934      	ldr	r1, [pc, #208]	; (d5f2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5e5a:	9307      	str	r3, [sp, #28]
   d5e5c:	aa06      	add	r2, sp, #24
   d5e5e:	2001      	movs	r0, #1
   d5e60:	f7fe fbc4 	bl	d45ec <log_message>
                if (impl->connectedCallback_) {
   d5e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5e66:	2b00      	cmp	r3, #0
   d5e68:	d0ef      	beq.n	d5e4a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d5e6a:	a904      	add	r1, sp, #16
   d5e6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5e70:	f7ff fddc 	bl	d5a2c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d5e74:	e7e9      	b.n	d5e4a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5e76:	89a9      	ldrh	r1, [r5, #12]
   d5e78:	4620      	mov	r0, r4
   d5e7a:	f7ff f9e2 	bl	d5242 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5e7e:	4606      	mov	r6, r0
   d5e80:	2800      	cmp	r0, #0
   d5e82:	d08f      	beq.n	d5da4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d5e84:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d5e86:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5e8e:	802a      	strh	r2, [r5, #0]
   d5e90:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d5e94:	4299      	cmp	r1, r3
   d5e96:	d003      	beq.n	d5ea0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d5e98:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5e9c:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d5e9e:	e7f9      	b.n	d5e94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d5ea0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d5ea4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5ea8:	45b8      	cmp	r8, r7
   d5eaa:	d004      	beq.n	d5eb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d5eac:	1d38      	adds	r0, r7, #4
   d5eae:	f7ff fd4a 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5eb2:	3708      	adds	r7, #8
   d5eb4:	e7f8      	b.n	d5ea8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d5eb6:	2300      	movs	r3, #0
   d5eb8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d5eba:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d5ebe:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5ec2:	45b8      	cmp	r8, r7
   d5ec4:	d004      	beq.n	d5ed0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d5ec6:	1d38      	adds	r0, r7, #4
   d5ec8:	f7ff fd3d 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ecc:	3708      	adds	r7, #8
   d5ece:	e7f8      	b.n	d5ec2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d5ed0:	2300      	movs	r3, #0
   d5ed2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d5ed4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d5ed6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5ed8:	b123      	cbz	r3, d5ee4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d5eda:	4631      	mov	r1, r6
   d5edc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5ee0:	f7ff fda4 	bl	d5a2c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d5ee4:	2300      	movs	r3, #0
   d5ee6:	2220      	movs	r2, #32
   d5ee8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5eec:	4a11      	ldr	r2, [pc, #68]	; (d5f34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d5eee:	9200      	str	r2, [sp, #0]
   d5ef0:	490e      	ldr	r1, [pc, #56]	; (d5f2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5ef2:	aa06      	add	r2, sp, #24
   d5ef4:	2001      	movs	r0, #1
   d5ef6:	f7fe fb79 	bl	d45ec <log_message>
                    impl->peers_.removeOne(*peer);
   d5efa:	4631      	mov	r1, r6
   d5efc:	f104 0018 	add.w	r0, r4, #24
   d5f00:	f7ff fee1 	bl	d5cc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5f04:	e74e      	b.n	d5da4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d5f06:	2e0f      	cmp	r6, #15
   d5f08:	f47f af6f 	bne.w	d5dea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d5f0c:	686b      	ldr	r3, [r5, #4]
   d5f0e:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d5f10:	7a2b      	ldrb	r3, [r5, #8]
   d5f12:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d5f16:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d5f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d5f1e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d5f22:	2308      	movs	r3, #8
   d5f24:	e760      	b.n	d5de8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d5f26:	bf00      	nop
   d5f28:	000d7a44 	.word	0x000d7a44
   d5f2c:	000d79b8 	.word	0x000d79b8
   d5f30:	000d7a6a 	.word	0x000d7a6a
   d5f34:	000d7a87 	.word	0x000d7a87

000d5f38 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d5f38:	b513      	push	{r0, r1, r4, lr}
   d5f3a:	460b      	mov	r3, r1
   d5f3c:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f3e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5f42:	466c      	mov	r4, sp
   d5f44:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5f48:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5f4c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5f50:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5f54:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5f58:	b002      	add	sp, #8
   d5f5a:	bd10      	pop	{r4, pc}

000d5f5c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d5f5c:	b538      	push	{r3, r4, r5, lr}
   d5f5e:	4605      	mov	r5, r0
   d5f60:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d5f62:	f7ff ffe9 	bl	d5f38 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f66:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5f68:	68a2      	ldr	r2, [r4, #8]
   d5f6a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f6c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f6e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5f70:	68e2      	ldr	r2, [r4, #12]
   d5f72:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f74:	60e3      	str	r3, [r4, #12]
      }
   d5f76:	bd38      	pop	{r3, r4, r5, pc}

000d5f78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d5f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5f7a:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d5f7c:	4604      	mov	r4, r0
   d5f7e:	4608      	mov	r0, r1
	__x.swap(*this);
   d5f80:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d5f82:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d5f84:	f7ff ffea 	bl	d5f5c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d5f88:	4621      	mov	r1, r4
   d5f8a:	4668      	mov	r0, sp
   d5f8c:	f7ff ffe6 	bl	d5f5c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d5f90:	4668      	mov	r0, sp
   d5f92:	f7fe feb6 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
      }
   d5f96:	4620      	mov	r0, r4
   d5f98:	b004      	add	sp, #16
   d5f9a:	bd10      	pop	{r4, pc}

000d5f9c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d5f9c:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d5f9e:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d5fa0:	b086      	sub	sp, #24
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d5fa2:	344c      	adds	r4, #76	; 0x4c
   d5fa4:	b171      	cbz	r1, d5fc4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x28>
   d5fa6:	e9cd 1200 	strd	r1, r2, [sp]
   d5faa:	a802      	add	r0, sp, #8
   d5fac:	4669      	mov	r1, sp
   d5fae:	f7ff fc89 	bl	d58c4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d5fb2:	a902      	add	r1, sp, #8
   d5fb4:	4620      	mov	r0, r4
   d5fb6:	f7ff ffdf 	bl	d5f78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d5fba:	a802      	add	r0, sp, #8
   d5fbc:	f7fe fea1 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
}
   d5fc0:	b006      	add	sp, #24
   d5fc2:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d5fc4:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d5fc6:	e7f4      	b.n	d5fb2 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000d5fc8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_>:
      operator=(const function& __x)
   d5fc8:	b530      	push	{r4, r5, lr}
   d5fca:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   d5fcc:	2300      	movs	r3, #0
   d5fce:	9302      	str	r3, [sp, #8]
      { return !_M_empty(); }
   d5fd0:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   d5fd2:	4605      	mov	r5, r0
   d5fd4:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   d5fd6:	b133      	cbz	r3, d5fe6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5fd8:	2202      	movs	r2, #2
   d5fda:	4668      	mov	r0, sp
   d5fdc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5fde:	68e3      	ldr	r3, [r4, #12]
   d5fe0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   d5fe2:	68a3      	ldr	r3, [r4, #8]
   d5fe4:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   d5fe6:	4629      	mov	r1, r5
   d5fe8:	4668      	mov	r0, sp
   d5fea:	f7ff ffb7 	bl	d5f5c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d5fee:	4668      	mov	r0, sp
   d5ff0:	f7fe fe87 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
      }
   d5ff4:	4628      	mov	r0, r5
   d5ff6:	b005      	add	sp, #20
   d5ff8:	bd30      	pop	{r4, r5, pc}

000d5ffa <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d5ffa:	b538      	push	{r3, r4, r5, lr}
   d5ffc:	460d      	mov	r5, r1
   d5ffe:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   d6000:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d6002:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   d6004:	b123      	cbz	r3, d6010 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   d6006:	6828      	ldr	r0, [r5, #0]
   d6008:	314c      	adds	r1, #76	; 0x4c
   d600a:	304c      	adds	r0, #76	; 0x4c
   d600c:	f7ff ffdc 	bl	d5fc8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_>
    class __shared_ptr
   d6010:	4620      	mov	r0, r4
   d6012:	682b      	ldr	r3, [r5, #0]
   d6014:	f840 3b04 	str.w	r3, [r0], #4
   d6018:	6869      	ldr	r1, [r5, #4]
   d601a:	f7fe fdfb 	bl	d4c14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   d601e:	4620      	mov	r0, r4
   d6020:	bd38      	pop	{r3, r4, r5, pc}

000d6022 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d6022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6026:	4604      	mov	r4, r0
   d6028:	b087      	sub	sp, #28
    WiringBleLock lk;
   d602a:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d602c:	460e      	mov	r6, r1
   d602e:	4617      	mov	r7, r2
    WiringBleLock lk;
   d6030:	f7fe fe90 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
        return impl_.get();
   d6034:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   d6036:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   d603a:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d603e:	4544      	cmp	r4, r8
   d6040:	46a1      	mov	r9, r4
   d6042:	d017      	beq.n	d6074 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x52>
        return charUuid_;
   d6044:	f854 1b08 	ldr.w	r1, [r4], #8
    return impl()->charUUID();
   d6048:	a801      	add	r0, sp, #4
   d604a:	3114      	adds	r1, #20
   d604c:	f7fe fef4 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
        if (existChar.UUID() == uuid) {
   d6050:	4639      	mov	r1, r7
   d6052:	a801      	add	r0, sp, #4
   d6054:	f7fe ff26 	bl	d4ea4 <_ZNK8particle7BleUuideqERKS0_>
   d6058:	4605      	mov	r5, r0
   d605a:	2800      	cmp	r0, #0
   d605c:	d0ef      	beq.n	d603e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   d605e:	4649      	mov	r1, r9
   d6060:	4630      	mov	r0, r6
   d6062:	f7ff ffca 	bl	d5ffa <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   d6066:	4668      	mov	r0, sp
   d6068:	f7fe fe7c 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d606c:	4628      	mov	r0, r5
   d606e:	b007      	add	sp, #28
   d6070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   d6074:	2500      	movs	r5, #0
   d6076:	e7f6      	b.n	d6066 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x44>

000d6078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6078:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d607a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d607c:	4604      	mov	r4, r0
   d607e:	460d      	mov	r5, r1
   d6080:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6082:	d911      	bls.n	d60a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x30>
   d6084:	4290      	cmp	r0, r2
   d6086:	d210      	bcs.n	d60aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
            --end;
   d6088:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d608c:	1a75      	subs	r5, r6, r1
   d608e:	f1a1 0714 	sub.w	r7, r1, #20
   d6092:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6094:	42b7      	cmp	r7, r6
   d6096:	d012      	beq.n	d60be <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
                new(dest) T(std::move(*end));
   d6098:	b11c      	cbz	r4, d60a2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d609a:	4631      	mov	r1, r6
   d609c:	4620      	mov	r0, r4
   d609e:	f7fe fecb 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
            for (; end != p; --end, --dest) {
   d60a2:	3e14      	subs	r6, #20
   d60a4:	3c14      	subs	r4, #20
   d60a6:	e7f5      	b.n	d6094 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d60a8:	d009      	beq.n	d60be <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
            for (; p != end; ++p, ++dest) {
   d60aa:	42b5      	cmp	r5, r6
   d60ac:	d007      	beq.n	d60be <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
                new(dest) T(std::move(*p));
   d60ae:	b11c      	cbz	r4, d60b8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
   d60b0:	4629      	mov	r1, r5
   d60b2:	4620      	mov	r0, r4
   d60b4:	f7fe fec0 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
            for (; p != end; ++p, ++dest) {
   d60b8:	3514      	adds	r5, #20
   d60ba:	3414      	adds	r4, #20
   d60bc:	e7f5      	b.n	d60aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
    }
   d60be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d60c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   d60c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d60c4:	4605      	mov	r5, r0
        if (n > 0) {
   d60c6:	dd13      	ble.n	d60f0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d60c8:	2714      	movs	r7, #20
    return ::malloc(size);
   d60ca:	fb07 f006 	mul.w	r0, r7, r6
   d60ce:	f7fe fb21 	bl	d4714 <malloc>
            if (!d) {
   d60d2:	4604      	mov	r4, r0
   d60d4:	b158      	cbz	r0, d60ee <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   d60d6:	e9d5 1200 	ldrd	r1, r2, [r5]
   d60da:	fb07 1202 	mla	r2, r7, r2, r1
   d60de:	f7ff ffcb 	bl	d6078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d60e2:	6828      	ldr	r0, [r5, #0]
   d60e4:	f7fe fb1e 	bl	d4724 <free>
        data_ = d;
   d60e8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d60ea:	60ae      	str	r6, [r5, #8]
        return true;
   d60ec:	2001      	movs	r0, #1
    }
   d60ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   d60f0:	2400      	movs	r4, #0
   d60f2:	e7f6      	b.n	d60e2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000d60f4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d60f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d60f8:	2300      	movs	r3, #0
   d60fa:	e9c0 3300 	strd	r3, r3, [r0]
   d60fe:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6100:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6102:	6849      	ldr	r1, [r1, #4]
   d6104:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6106:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6108:	dd15      	ble.n	d6136 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x42>
   d610a:	f7ff ffd9 	bl	d60c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d610e:	b190      	cbz	r0, d6136 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x42>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6110:	e9d5 6300 	ldrd	r6, r3, [r5]
   d6114:	f04f 0814 	mov.w	r8, #20
   d6118:	6827      	ldr	r7, [r4, #0]
   d611a:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   d611e:	45b0      	cmp	r8, r6
   d6120:	d007      	beq.n	d6132 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
            new(dest) T(*it);
   d6122:	b11f      	cbz	r7, d612c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x38>
   d6124:	4631      	mov	r1, r6
   d6126:	4638      	mov	r0, r7
   d6128:	f7fe fe86 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   d612c:	3614      	adds	r6, #20
   d612e:	3714      	adds	r7, #20
   d6130:	e7f5      	b.n	d611e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2a>
        size_ = vector.size_;
   d6132:	686b      	ldr	r3, [r5, #4]
   d6134:	6063      	str	r3, [r4, #4]
}
   d6136:	4620      	mov	r0, r4
   d6138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d613c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d613c:	b530      	push	{r4, r5, lr}
   d613e:	b087      	sub	sp, #28
    return insert(size_, std::move(value));
   d6140:	6845      	ldr	r5, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6142:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6144:	a801      	add	r0, sp, #4
   d6146:	f7fe fe77 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d614a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d614e:	4299      	cmp	r1, r3
   d6150:	da11      	bge.n	d6176 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x3a>
    T* const p = data_ + i;
   d6152:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6154:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   d6156:	2214      	movs	r2, #20
   d6158:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
   d615c:	f105 0014 	add.w	r0, r5, #20
   d6160:	fb02 3201 	mla	r2, r2, r1, r3
   d6164:	4629      	mov	r1, r5
   d6166:	f7ff ff87 	bl	d6078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d616a:	b965      	cbnz	r5, d6186 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x4a>
    ++size_;
   d616c:	6863      	ldr	r3, [r4, #4]
   d616e:	3301      	adds	r3, #1
   d6170:	6063      	str	r3, [r4, #4]
    return true;
   d6172:	2001      	movs	r0, #1
   d6174:	e005      	b.n	d6182 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x46>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6176:	3101      	adds	r1, #1
   d6178:	4620      	mov	r0, r4
   d617a:	f7ff ffa1 	bl	d60c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d617e:	2800      	cmp	r0, #0
   d6180:	d1e7      	bne.n	d6152 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x16>
}
   d6182:	b007      	add	sp, #28
   d6184:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
   d6186:	a901      	add	r1, sp, #4
   d6188:	4628      	mov	r0, r5
   d618a:	f7fe fe55 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
   d618e:	e7ed      	b.n	d616c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x30>

000d6190 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   d6190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   d6194:	2400      	movs	r4, #0
   d6196:	e9c0 4400 	strd	r4, r4, [r0]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d619a:	f1a2 0902 	sub.w	r9, r2, #2
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   d619e:	b08d      	sub	sp, #52	; 0x34
   d61a0:	4605      	mov	r5, r0
   d61a2:	460f      	mov	r7, r1
   d61a4:	4690      	mov	r8, r2
   d61a6:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d61a8:	fa5f f989 	uxtb.w	r9, r9
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d61ac:	6a39      	ldr	r1, [r7, #32]
   d61ae:	42a1      	cmp	r1, r4
   d61b0:	d94f      	bls.n	d6252 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xc2>
    if (offset == nullptr) {
   d61b2:	ab01      	add	r3, sp, #4
   d61b4:	4642      	mov	r2, r8
   d61b6:	1b09      	subs	r1, r1, r4
   d61b8:	1938      	adds	r0, r7, r4
   d61ba:	f7fe fca9 	bl	d4b10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   d61be:	4606      	mov	r6, r0
   d61c0:	2800      	cmp	r0, #0
   d61c2:	d046      	beq.n	d6252 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xc2>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d61c4:	f1b9 0f01 	cmp.w	r9, #1
   d61c8:	d81e      	bhi.n	d6208 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x78>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   d61ca:	f1a0 0b02 	sub.w	fp, r0, #2
   d61ce:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   d61d2:	f04f 0a00 	mov.w	sl, #0
   d61d6:	45d3      	cmp	fp, sl
   d61d8:	9b01      	ldr	r3, [sp, #4]
   d61da:	d036      	beq.n	d624a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xba>
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   d61dc:	4423      	add	r3, r4
   d61de:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   d61e2:	443b      	add	r3, r7
   d61e4:	a802      	add	r0, sp, #8
   d61e6:	78d9      	ldrb	r1, [r3, #3]
   d61e8:	789b      	ldrb	r3, [r3, #2]
   d61ea:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d61ee:	f7fe fe4f 	bl	d4e90 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   d61f2:	a902      	add	r1, sp, #8
   d61f4:	a807      	add	r0, sp, #28
   d61f6:	f7fe fe1f 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
   d61fa:	a907      	add	r1, sp, #28
   d61fc:	4628      	mov	r0, r5
   d61fe:	f7ff ff9d 	bl	d613c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   d6202:	f10a 0a01 	add.w	sl, sl, #1
   d6206:	e7e6      	b.n	d61d6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x46>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   d6208:	f1a8 0306 	sub.w	r3, r8, #6
   d620c:	2b01      	cmp	r3, #1
   d620e:	d81c      	bhi.n	d624a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xba>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   d6210:	f1a0 0b02 	sub.w	fp, r0, #2
   d6214:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   d6218:	f04f 0a00 	mov.w	sl, #0
   d621c:	45d3      	cmp	fp, sl
   d621e:	9901      	ldr	r1, [sp, #4]
   d6220:	d013      	beq.n	d624a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xba>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   d6222:	3102      	adds	r1, #2
   d6224:	4421      	add	r1, r4
   d6226:	eb01 110a 	add.w	r1, r1, sl, lsl #4
   d622a:	2201      	movs	r2, #1
   d622c:	4439      	add	r1, r7
   d622e:	a802      	add	r0, sp, #8
   d6230:	f7fe fe0f 	bl	d4e52 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   d6234:	a902      	add	r1, sp, #8
   d6236:	a807      	add	r0, sp, #28
   d6238:	f7fe fdfe 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
   d623c:	a907      	add	r1, sp, #28
   d623e:	4628      	mov	r0, r5
   d6240:	f7ff ff7c 	bl	d613c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   d6244:	f10a 0a01 	add.w	sl, sl, #1
   d6248:	e7e8      	b.n	d621c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x8c>
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d624a:	9801      	ldr	r0, [sp, #4]
   d624c:	4406      	add	r6, r0
   d624e:	4434      	add	r4, r6
   d6250:	e7ac      	b.n	d61ac <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1c>
}
   d6252:	4628      	mov	r0, r5
   d6254:	b00d      	add	sp, #52	; 0x34
   d6256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d625a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   d625a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return insert(i, vector.data_, vector.size_);
   d625e:	e9d1 6800 	ldrd	r6, r8, [r1]
    return insert(size_, vector);
   d6262:	6844      	ldr	r4, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   d6264:	6883      	ldr	r3, [r0, #8]
   d6266:	eb04 0108 	add.w	r1, r4, r8
   d626a:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   d626c:	4605      	mov	r5, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   d626e:	dc17      	bgt.n	d62a0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x46>
    T* const p = data_ + i;
   d6270:	682a      	ldr	r2, [r5, #0]
    move(p + n, p, data_ + size_);
   d6272:	6869      	ldr	r1, [r5, #4]
    T* const p = data_ + i;
   d6274:	2314      	movs	r3, #20
   d6276:	fb03 2404 	mla	r4, r3, r4, r2
    move(p + n, p, data_ + size_);
   d627a:	fb03 f708 	mul.w	r7, r3, r8
   d627e:	fb03 2201 	mla	r2, r3, r1, r2
   d6282:	19e0      	adds	r0, r4, r7
   d6284:	4621      	mov	r1, r4
   d6286:	f7ff fef7 	bl	d6078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    copy(p, values, values + n);
   d628a:	4437      	add	r7, r6
        for (; p != end; ++p, ++dest) {
   d628c:	42b7      	cmp	r7, r6
   d628e:	d00d      	beq.n	d62ac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x52>
            new(dest) T(*p);
   d6290:	b11c      	cbz	r4, d629a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x40>
   d6292:	4631      	mov	r1, r6
   d6294:	4620      	mov	r0, r4
   d6296:	f7fe fdcf 	bl	d4e38 <_ZN8particle7BleUuidC1ERKS0_>
        for (; p != end; ++p, ++dest) {
   d629a:	3614      	adds	r6, #20
   d629c:	3414      	adds	r4, #20
   d629e:	e7f5      	b.n	d628c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x32>
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   d62a0:	f7ff ff0e 	bl	d60c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d62a4:	2800      	cmp	r0, #0
   d62a6:	d1e3      	bne.n	d6270 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x16>
}
   d62a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ += n;
   d62ac:	686b      	ldr	r3, [r5, #4]
   d62ae:	4443      	add	r3, r8
   d62b0:	606b      	str	r3, [r5, #4]
    return true;
   d62b2:	2001      	movs	r0, #1
   d62b4:	e7f8      	b.n	d62a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x4e>

000d62b6 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   d62b6:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   d62b8:	2300      	movs	r3, #0
   d62ba:	b085      	sub	sp, #20
   d62bc:	e9c0 3300 	strd	r3, r3, [r0]
   d62c0:	6083      	str	r3, [r0, #8]
   d62c2:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   d62c4:	2202      	movs	r2, #2
   d62c6:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   d62c8:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   d62ca:	f7ff ff61 	bl	d6190 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d62ce:	a901      	add	r1, sp, #4
   d62d0:	4620      	mov	r0, r4
   d62d2:	f7ff ffc2 	bl	d625a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d62d6:	a801      	add	r0, sp, #4
   d62d8:	f7ff fab5 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   d62dc:	2202      	movs	r2, #2
   d62de:	4629      	mov	r1, r5
   d62e0:	a801      	add	r0, sp, #4
   d62e2:	f7ff ff55 	bl	d6190 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d62e6:	a901      	add	r1, sp, #4
   d62e8:	4620      	mov	r0, r4
   d62ea:	f7ff ffb6 	bl	d625a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d62ee:	a801      	add	r0, sp, #4
   d62f0:	f7ff faa9 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   d62f4:	2203      	movs	r2, #3
   d62f6:	4629      	mov	r1, r5
   d62f8:	a801      	add	r0, sp, #4
   d62fa:	f7ff ff49 	bl	d6190 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d62fe:	a901      	add	r1, sp, #4
   d6300:	4620      	mov	r0, r4
   d6302:	f7ff ffaa 	bl	d625a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d6306:	a801      	add	r0, sp, #4
   d6308:	f7ff fa9d 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   d630c:	2206      	movs	r2, #6
   d630e:	4629      	mov	r1, r5
   d6310:	a801      	add	r0, sp, #4
   d6312:	f7ff ff3d 	bl	d6190 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d6316:	a901      	add	r1, sp, #4
   d6318:	4620      	mov	r0, r4
   d631a:	f7ff ff9e 	bl	d625a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d631e:	a801      	add	r0, sp, #4
   d6320:	f7ff fa91 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   d6324:	2207      	movs	r2, #7
   d6326:	4629      	mov	r1, r5
   d6328:	a801      	add	r0, sp, #4
   d632a:	f7ff ff31 	bl	d6190 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d632e:	a901      	add	r1, sp, #4
   d6330:	4620      	mov	r0, r4
   d6332:	f7ff ff92 	bl	d625a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d6336:	a801      	add	r0, sp, #4
   d6338:	f7ff fa85 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   d633c:	4620      	mov	r0, r4
   d633e:	b005      	add	sp, #20
   d6340:	bd30      	pop	{r4, r5, pc}

000d6342 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d6342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6346:	b085      	sub	sp, #20
   d6348:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   d634a:	4601      	mov	r1, r0
   d634c:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d634e:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   d6350:	f7ff ffb1 	bl	d62b6 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    for (const auto& uuid : foundUuids) {
   d6354:	9e01      	ldr	r6, [sp, #4]
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d6356:	9a02      	ldr	r2, [sp, #8]
   d6358:	2314      	movs	r3, #20
   d635a:	fb03 6e02 	mla	lr, r3, r2, r6
   d635e:	2700      	movs	r7, #0
        uuids[found++] = uuid;
   d6360:	469c      	mov	ip, r3
    for (const auto& uuid : foundUuids) {
   d6362:	45b6      	cmp	lr, r6
   d6364:	d00d      	beq.n	d6382 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   d6366:	45b9      	cmp	r9, r7
   d6368:	f106 0614 	add.w	r6, r6, #20
   d636c:	d009      	beq.n	d6382 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   d636e:	f1a6 0514 	sub.w	r5, r6, #20
   d6372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6374:	fb0c 8407 	mla	r4, ip, r7, r8
   d6378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d637a:	682b      	ldr	r3, [r5, #0]
   d637c:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   d637e:	3701      	adds	r7, #1
   d6380:	e7ef      	b.n	d6362 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   d6382:	a801      	add	r0, sp, #4
   d6384:	f7ff fa5f 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   d6388:	4638      	mov	r0, r7
   d638a:	b005      	add	sp, #20
   d638c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6390 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   d6390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6394:	b08b      	sub	sp, #44	; 0x2c
   d6396:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   d6398:	f100 0144 	add.w	r1, r0, #68	; 0x44
   d639c:	a801      	add	r0, sp, #4
   d639e:	f7ff fea9 	bl	d60f4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   d63a2:	9b02      	ldr	r3, [sp, #8]
   d63a4:	2b00      	cmp	r3, #0
   d63a6:	dd4a      	ble.n	d643e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   d63a8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d63ac:	a804      	add	r0, sp, #16
   d63ae:	f7ff ff82 	bl	d62b6 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   d63b2:	f104 0108 	add.w	r1, r4, #8
   d63b6:	a807      	add	r0, sp, #28
   d63b8:	f7ff ff7d 	bl	d62b6 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   d63bc:	9d05      	ldr	r5, [sp, #20]
   d63be:	2d00      	cmp	r5, #0
   d63c0:	dc02      	bgt.n	d63c8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   d63c2:	9b08      	ldr	r3, [sp, #32]
   d63c4:	2b00      	cmp	r3, #0
   d63c6:	dd38      	ble.n	d643a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
   d63c8:	e9dd 9707 	ldrd	r9, r7, [sp, #28]
            for (const auto& uuid : filterServiceUuids) {
   d63cc:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   d63ce:	9e02      	ldr	r6, [sp, #8]
                for (const auto& found : srUuids) {
   d63d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
   d63d4:	2314      	movs	r3, #20
   d63d6:	fb03 2606 	mla	r6, r3, r6, r2
    return data_ + size_;
   d63da:	fb03 8505 	mla	r5, r3, r5, r8
   d63de:	fb03 9707 	mla	r7, r3, r7, r9
   d63e2:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   d63e4:	45b2      	cmp	sl, r6
   d63e6:	d028      	beq.n	d643a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   d63e8:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   d63ea:	45ab      	cmp	fp, r5
   d63ec:	d015      	beq.n	d641a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   d63ee:	4659      	mov	r1, fp
   d63f0:	4650      	mov	r0, sl
   d63f2:	f7fe fd57 	bl	d4ea4 <_ZNK8particle7BleUuideqERKS0_>
   d63f6:	f10b 0b14 	add.w	fp, fp, #20
   d63fa:	4604      	mov	r4, r0
   d63fc:	2800      	cmp	r0, #0
   d63fe:	d0f4      	beq.n	d63ea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   d6400:	a807      	add	r0, sp, #28
   d6402:	f7ff fa20 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   d6406:	a804      	add	r0, sp, #16
   d6408:	f7ff fa1d 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   d640c:	a801      	add	r0, sp, #4
   d640e:	f7ff fa1a 	bl	d5846 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   d6412:	4620      	mov	r0, r4
   d6414:	b00b      	add	sp, #44	; 0x2c
   d6416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d641a:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   d641c:	45bb      	cmp	fp, r7
   d641e:	d009      	beq.n	d6434 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   d6420:	4659      	mov	r1, fp
   d6422:	4650      	mov	r0, sl
   d6424:	f7fe fd3e 	bl	d4ea4 <_ZNK8particle7BleUuideqERKS0_>
   d6428:	f10b 0b14 	add.w	fp, fp, #20
   d642c:	4604      	mov	r4, r0
   d642e:	2800      	cmp	r0, #0
   d6430:	d0f4      	beq.n	d641c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   d6432:	e7e5      	b.n	d6400 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   d6434:	f10a 0a14 	add.w	sl, sl, #20
   d6438:	e7d4      	b.n	d63e4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   d643a:	2400      	movs	r4, #0
   d643c:	e7e0      	b.n	d6400 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   d643e:	2401      	movs	r4, #1
   d6440:	e7e4      	b.n	d640c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000d6442 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6442:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6446:	4604      	mov	r4, r0
   d6448:	460d      	mov	r5, r1
   d644a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d644c:	d914      	bls.n	d6478 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d644e:	4290      	cmp	r0, r2
   d6450:	d213      	bcs.n	d647a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6452:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6456:	1a75      	subs	r5, r6, r1
   d6458:	f1a1 0708 	sub.w	r7, r1, #8
   d645c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d645e:	42b7      	cmp	r7, r6
   d6460:	d018      	beq.n	d6494 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6462:	b11c      	cbz	r4, d646c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6464:	4631      	mov	r1, r6
   d6466:	4620      	mov	r0, r4
   d6468:	f7ff fa59 	bl	d591e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   d646c:	1d30      	adds	r0, r6, #4
   d646e:	f7ff fa6a 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6472:	3e08      	subs	r6, #8
   d6474:	3c08      	subs	r4, #8
   d6476:	e7f2      	b.n	d645e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6478:	d00c      	beq.n	d6494 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d647a:	42b5      	cmp	r5, r6
   d647c:	d00a      	beq.n	d6494 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d647e:	b11c      	cbz	r4, d6488 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6480:	4629      	mov	r1, r5
   d6482:	4620      	mov	r0, r4
   d6484:	f7ff fa4b 	bl	d591e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6488:	1d28      	adds	r0, r5, #4
   d648a:	f7ff fa5c 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d648e:	3508      	adds	r5, #8
   d6490:	3408      	adds	r4, #8
   d6492:	e7f2      	b.n	d647a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6496 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6496:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6498:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d649a:	4605      	mov	r5, r0
        if (n > 0) {
   d649c:	dd11      	ble.n	d64c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d649e:	00f0      	lsls	r0, r6, #3
   d64a0:	f7fe f938 	bl	d4714 <malloc>
            if (!d) {
   d64a4:	4604      	mov	r4, r0
   d64a6:	b158      	cbz	r0, d64c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d64a8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d64ac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d64b0:	f7ff ffc7 	bl	d6442 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d64b4:	6828      	ldr	r0, [r5, #0]
   d64b6:	f7fe f935 	bl	d4724 <free>
        data_ = d;
   d64ba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d64bc:	60ae      	str	r6, [r5, #8]
        return true;
   d64be:	2001      	movs	r0, #1
    }
   d64c0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d64c2:	2400      	movs	r4, #0
   d64c4:	e7f6      	b.n	d64b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d64c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d64c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d64ca:	2300      	movs	r3, #0
   d64cc:	e9c0 3300 	strd	r3, r3, [r0]
   d64d0:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d64d2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d64d4:	6849      	ldr	r1, [r1, #4]
   d64d6:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d64d8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d64da:	dd13      	ble.n	d6504 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d64dc:	f7ff ffdb 	bl	d6496 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d64e0:	b180      	cbz	r0, d6504 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d64e2:	e9d5 6300 	ldrd	r6, r3, [r5]
   d64e6:	6827      	ldr	r7, [r4, #0]
   d64e8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   d64ec:	45b0      	cmp	r8, r6
   d64ee:	d007      	beq.n	d6500 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d64f0:	b11f      	cbz	r7, d64fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d64f2:	4631      	mov	r1, r6
   d64f4:	4638      	mov	r0, r7
   d64f6:	f7ff fa12 	bl	d591e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   d64fa:	3608      	adds	r6, #8
   d64fc:	3708      	adds	r7, #8
   d64fe:	e7f5      	b.n	d64ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   d6500:	686b      	ldr	r3, [r5, #4]
   d6502:	6063      	str	r3, [r4, #4]
}
   d6504:	4620      	mov	r0, r4
   d6506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d650a <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   d650a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d650c:	460d      	mov	r5, r1
   d650e:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6510:	a801      	add	r0, sp, #4
   d6512:	f7fe fc1f 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   d6516:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   d6518:	4620      	mov	r0, r4
   d651a:	310c      	adds	r1, #12
   d651c:	f7ff ffd3 	bl	d64c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   d6520:	a801      	add	r0, sp, #4
   d6522:	f7fe fc1f 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6526:	4620      	mov	r0, r4
   d6528:	b003      	add	sp, #12
   d652a:	bd30      	pop	{r4, r5, pc}

000d652c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   d652c:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d652e:	680b      	ldr	r3, [r1, #0]
   d6530:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6532:	4605      	mov	r5, r0
   d6534:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6536:	b933      	cbnz	r3, d6546 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d6538:	4608      	mov	r0, r1
   d653a:	f7fe fb45 	bl	d4bc8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   d653e:	b910      	cbnz	r0, d6546 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d6540:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   d6542:	2201      	movs	r2, #1
   d6544:	729a      	strb	r2, [r3, #10]
    return services();
   d6546:	4628      	mov	r0, r5
   d6548:	4621      	mov	r1, r4
   d654a:	f7ff ffde 	bl	d650a <_ZNK8particle13BlePeerDevice8servicesEv>
}
   d654e:	4628      	mov	r0, r5
   d6550:	bd38      	pop	{r3, r4, r5, pc}

000d6552 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6552:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6554:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6556:	6845      	ldr	r5, [r0, #4]
   d6558:	4668      	mov	r0, sp
   d655a:	f7ff f9e0 	bl	d591e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d655e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6562:	4299      	cmp	r1, r3
   d6564:	da10      	bge.n	d6588 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6566:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6568:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d656a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d656e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6572:	4629      	mov	r1, r5
   d6574:	f105 0008 	add.w	r0, r5, #8
   d6578:	f7ff ff63 	bl	d6442 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d657c:	b98d      	cbnz	r5, d65a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d657e:	6863      	ldr	r3, [r4, #4]
   d6580:	3301      	adds	r3, #1
   d6582:	6063      	str	r3, [r4, #4]
    return true;
   d6584:	2601      	movs	r6, #1
   d6586:	e006      	b.n	d6596 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6588:	3101      	adds	r1, #1
   d658a:	4620      	mov	r0, r4
   d658c:	f7ff ff83 	bl	d6496 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6590:	4606      	mov	r6, r0
   d6592:	2800      	cmp	r0, #0
   d6594:	d1e7      	bne.n	d6566 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6596:	a801      	add	r0, sp, #4
   d6598:	f7ff f9d5 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d659c:	4630      	mov	r0, r6
   d659e:	b002      	add	sp, #8
   d65a0:	bd70      	pop	{r4, r5, r6, pc}
   d65a2:	4669      	mov	r1, sp
   d65a4:	4628      	mov	r0, r5
   d65a6:	f7ff f9ba 	bl	d591e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d65aa:	e7e8      	b.n	d657e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d65ac <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d65ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   d65b0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; d666c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   d65b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; d6670 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d65b8:	b093      	sub	sp, #76	; 0x4c
   d65ba:	4605      	mov	r5, r0
   d65bc:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   d65be:	2700      	movs	r7, #0
   d65c0:	682b      	ldr	r3, [r5, #0]
   d65c2:	42bb      	cmp	r3, r7
   d65c4:	d94e      	bls.n	d6664 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   d65c6:	a803      	add	r0, sp, #12
   d65c8:	f7fe ff00 	bl	d53cc <_ZN8particle10BleServiceC1Ev>
        return impl_.get();
   d65cc:	261c      	movs	r6, #28
   d65ce:	686a      	ldr	r2, [r5, #4]
   d65d0:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   d65d2:	437e      	muls	r6, r7
   d65d4:	4432      	add	r2, r6
   d65d6:	f10d 0c14 	add.w	ip, sp, #20
   d65da:	1d13      	adds	r3, r2, #4
   d65dc:	46e3      	mov	fp, ip
   d65de:	3214      	adds	r2, #20
   d65e0:	6818      	ldr	r0, [r3, #0]
   d65e2:	6859      	ldr	r1, [r3, #4]
   d65e4:	46e6      	mov	lr, ip
   d65e6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d65ea:	3308      	adds	r3, #8
   d65ec:	4293      	cmp	r3, r2
   d65ee:	46f4      	mov	ip, lr
   d65f0:	d1f6      	bne.n	d65e0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   d65f2:	6818      	ldr	r0, [r3, #0]
   d65f4:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   d65f8:	4659      	mov	r1, fp
   d65fa:	a80a      	add	r0, sp, #40	; 0x28
   d65fc:	f7fe fbf8 	bl	d4df0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d6600:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   d6604:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d660a:	f8dc 3000 	ldr.w	r3, [ip]
   d660e:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   d6610:	686b      	ldr	r3, [r5, #4]
        return impl_.get();
   d6612:	9a03      	ldr	r2, [sp, #12]
   d6614:	4433      	add	r3, r6
   d6616:	a903      	add	r1, sp, #12
   d6618:	8b1b      	ldrh	r3, [r3, #24]
   d661a:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d661c:	686b      	ldr	r3, [r5, #4]
   d661e:	441e      	add	r6, r3
   d6620:	8b73      	ldrh	r3, [r6, #26]
   d6622:	82d3      	strh	r3, [r2, #22]
        return services_;
   d6624:	f8d8 0000 	ldr.w	r0, [r8]
   d6628:	f100 040c 	add.w	r4, r0, #12
   d662c:	a80a      	add	r0, sp, #40	; 0x28
   d662e:	f7ff f976 	bl	d591e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   d6632:	4620      	mov	r0, r4
   d6634:	a90a      	add	r1, sp, #40	; 0x28
   d6636:	f7ff ff8c 	bl	d6552 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d663a:	4604      	mov	r4, r0
   d663c:	a80b      	add	r0, sp, #44	; 0x2c
   d663e:	f7ff f982 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6642:	b954      	cbnz	r4, d665a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   d6644:	2320      	movs	r3, #32
   d6646:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   d664a:	f8cd 9000 	str.w	r9, [sp]
   d664e:	4623      	mov	r3, r4
   d6650:	aa0a      	add	r2, sp, #40	; 0x28
   d6652:	4651      	mov	r1, sl
   d6654:	2032      	movs	r0, #50	; 0x32
   d6656:	f7fd ffc9 	bl	d45ec <log_message>
   d665a:	a804      	add	r0, sp, #16
   d665c:	f7ff f973 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   d6660:	3701      	adds	r7, #1
   d6662:	e7ad      	b.n	d65c0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   d6664:	b013      	add	sp, #76	; 0x4c
   d6666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d666a:	bf00      	nop
   d666c:	000d7aa6 	.word	0x000d7aa6
   d6670:	000d79b8 	.word	0x000d79b8

000d6674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6674:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6678:	4604      	mov	r4, r0
   d667a:	460d      	mov	r5, r1
   d667c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d667e:	d914      	bls.n	d66aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6680:	4290      	cmp	r0, r2
   d6682:	d213      	bcs.n	d66ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6684:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6688:	1a75      	subs	r5, r6, r1
   d668a:	f1a1 0708 	sub.w	r7, r1, #8
   d668e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6690:	42b7      	cmp	r7, r6
   d6692:	d018      	beq.n	d66c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6694:	b11c      	cbz	r4, d669e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6696:	4631      	mov	r1, r6
   d6698:	4620      	mov	r0, r4
   d669a:	f7ff f932 	bl	d5902 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d669e:	1d30      	adds	r0, r6, #4
   d66a0:	f7ff f951 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d66a4:	3e08      	subs	r6, #8
   d66a6:	3c08      	subs	r4, #8
   d66a8:	e7f2      	b.n	d6690 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d66aa:	d00c      	beq.n	d66c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d66ac:	42b5      	cmp	r5, r6
   d66ae:	d00a      	beq.n	d66c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d66b0:	b11c      	cbz	r4, d66ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d66b2:	4629      	mov	r1, r5
   d66b4:	4620      	mov	r0, r4
   d66b6:	f7ff f924 	bl	d5902 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d66ba:	1d28      	adds	r0, r5, #4
   d66bc:	f7ff f943 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d66c0:	3508      	adds	r5, #8
   d66c2:	3408      	adds	r4, #8
   d66c4:	e7f2      	b.n	d66ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d66c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d66c8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d66ca:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d66cc:	4605      	mov	r5, r0
        if (n > 0) {
   d66ce:	dd11      	ble.n	d66f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d66d0:	00f0      	lsls	r0, r6, #3
   d66d2:	f7fe f81f 	bl	d4714 <malloc>
            if (!d) {
   d66d6:	4604      	mov	r4, r0
   d66d8:	b158      	cbz	r0, d66f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d66da:	e9d5 1200 	ldrd	r1, r2, [r5]
   d66de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d66e2:	f7ff ffc7 	bl	d6674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d66e6:	6828      	ldr	r0, [r5, #0]
   d66e8:	f7fe f81c 	bl	d4724 <free>
        data_ = d;
   d66ec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d66ee:	60ae      	str	r6, [r5, #8]
        return true;
   d66f0:	2001      	movs	r0, #1
    }
   d66f2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d66f4:	2400      	movs	r4, #0
   d66f6:	e7f6      	b.n	d66e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d66f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d66f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d66fc:	2300      	movs	r3, #0
   d66fe:	e9c0 3300 	strd	r3, r3, [r0]
   d6702:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6704:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6706:	6849      	ldr	r1, [r1, #4]
   d6708:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d670a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d670c:	dd13      	ble.n	d6736 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d670e:	f7ff ffdb 	bl	d66c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6712:	b180      	cbz	r0, d6736 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6714:	e9d5 6300 	ldrd	r6, r3, [r5]
   d6718:	6827      	ldr	r7, [r4, #0]
   d671a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   d671e:	45b0      	cmp	r8, r6
   d6720:	d007      	beq.n	d6732 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6722:	b11f      	cbz	r7, d672c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6724:	4631      	mov	r1, r6
   d6726:	4638      	mov	r0, r7
   d6728:	f7ff f8eb 	bl	d5902 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   d672c:	3608      	adds	r6, #8
   d672e:	3708      	adds	r7, #8
   d6730:	e7f5      	b.n	d671e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   d6732:	686b      	ldr	r3, [r5, #4]
   d6734:	6063      	str	r3, [r4, #4]
}
   d6736:	4620      	mov	r0, r4
   d6738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d673c <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   d673c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d673e:	460d      	mov	r5, r1
   d6740:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6742:	a801      	add	r0, sp, #4
   d6744:	f7fe fb06 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   d6748:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   d674a:	4620      	mov	r0, r4
   d674c:	3118      	adds	r1, #24
   d674e:	f7ff ffd3 	bl	d66f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   d6752:	a801      	add	r0, sp, #4
   d6754:	f7fe fb06 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6758:	4620      	mov	r0, r4
   d675a:	b003      	add	sp, #12
   d675c:	bd30      	pop	{r4, r5, pc}

000d675e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d675e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6760:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6762:	6845      	ldr	r5, [r0, #4]
   d6764:	4668      	mov	r0, sp
   d6766:	f7ff f8cc 	bl	d5902 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d676a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d676e:	4299      	cmp	r1, r3
   d6770:	da10      	bge.n	d6794 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6772:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6774:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6776:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d677a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d677e:	4629      	mov	r1, r5
   d6780:	f105 0008 	add.w	r0, r5, #8
   d6784:	f7ff ff76 	bl	d6674 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6788:	b98d      	cbnz	r5, d67ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d678a:	6863      	ldr	r3, [r4, #4]
   d678c:	3301      	adds	r3, #1
   d678e:	6063      	str	r3, [r4, #4]
    return true;
   d6790:	2601      	movs	r6, #1
   d6792:	e006      	b.n	d67a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6794:	3101      	adds	r1, #1
   d6796:	4620      	mov	r0, r4
   d6798:	f7ff ff96 	bl	d66c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d679c:	4606      	mov	r6, r0
   d679e:	2800      	cmp	r0, #0
   d67a0:	d1e7      	bne.n	d6772 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d67a2:	a801      	add	r0, sp, #4
   d67a4:	f7ff f8cf 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d67a8:	4630      	mov	r0, r6
   d67aa:	b002      	add	sp, #8
   d67ac:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d67ae:	4669      	mov	r1, sp
   d67b0:	4628      	mov	r0, r5
   d67b2:	f7ff f8a6 	bl	d5902 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d67b6:	e7e8      	b.n	d678a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d67b8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   d67b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67ba:	b085      	sub	sp, #20
   d67bc:	4605      	mov	r5, r0
    WiringBleLock lk;
   d67be:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   d67c0:	460c      	mov	r4, r1
   d67c2:	4617      	mov	r7, r2
    WiringBleLock lk;
   d67c4:	f7fe fac6 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   d67c8:	2300      	movs	r3, #0
   d67ca:	e9c5 3300 	strd	r3, r3, [r5]
   d67ce:	60ab      	str	r3, [r5, #8]
        return impl_.get();
   d67d0:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   d67d2:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   d67d6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   d67da:	42b4      	cmp	r4, r6
   d67dc:	d011      	beq.n	d6802 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   d67de:	6838      	ldr	r0, [r7, #0]
   d67e0:	4621      	mov	r1, r4
   d67e2:	f7fe fd19 	bl	d5218 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   d67e6:	b150      	cbz	r0, d67fe <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   d67e8:	4621      	mov	r1, r4
   d67ea:	a802      	add	r0, sp, #8
   d67ec:	f7ff f889 	bl	d5902 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d67f0:	a902      	add	r1, sp, #8
   d67f2:	4628      	mov	r0, r5
   d67f4:	f7ff ffb3 	bl	d675e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d67f8:	a803      	add	r0, sp, #12
   d67fa:	f7ff f8a4 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   d67fe:	3408      	adds	r4, #8
   d6800:	e7eb      	b.n	d67da <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   d6802:	a801      	add	r0, sp, #4
   d6804:	f7fe faae 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6808:	4628      	mov	r0, r5
   d680a:	b005      	add	sp, #20
   d680c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d680e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   d680e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!impl()->servicesDiscovered()) {
   d6810:	680b      	ldr	r3, [r1, #0]
   d6812:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   d6814:	4604      	mov	r4, r0
   d6816:	460e      	mov	r6, r1
   d6818:	4615      	mov	r5, r2
    if (!impl()->servicesDiscovered()) {
   d681a:	b92b      	cbnz	r3, d6828 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x1a>
        capacity_(0) {
   d681c:	e9c0 3300 	strd	r3, r3, [r0]
   d6820:	6083      	str	r3, [r0, #8]
}
   d6822:	4620      	mov	r0, r4
   d6824:	b002      	add	sp, #8
   d6826:	bd70      	pop	{r4, r5, r6, pc}
    if (!service.impl()->characteristicsDiscovered()) {
   d6828:	6813      	ldr	r3, [r2, #0]
   d682a:	7e1b      	ldrb	r3, [r3, #24]
   d682c:	b933      	cbnz	r3, d683c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x2e>
        if (discovery.discoverCharacteristics(*this, service) == SYSTEM_ERROR_NONE) {
   d682e:	a801      	add	r0, sp, #4
   d6830:	f7fe fdf2 	bl	d5418 <_ZNK8particle21BleDiscoveryDelegator23discoverCharacteristicsERKNS_13BlePeerDeviceERKNS_10BleServiceE>
   d6834:	b910      	cbnz	r0, d683c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x2e>
        return impl_.get();
   d6836:	682b      	ldr	r3, [r5, #0]
        characteristicsDiscovered_ = discovered;
   d6838:	2201      	movs	r2, #1
   d683a:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   d683c:	462a      	mov	r2, r5
   d683e:	4631      	mov	r1, r6
   d6840:	4620      	mov	r0, r4
   d6842:	f7ff ffb9 	bl	d67b8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   d6846:	e7ec      	b.n	d6822 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x14>

000d6848 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6848:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!impl()->servicesDiscovered()) {
   d684a:	680b      	ldr	r3, [r1, #0]
   d684c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d684e:	b085      	sub	sp, #20
   d6850:	4606      	mov	r6, r0
   d6852:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   d6854:	b92b      	cbnz	r3, d6862 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d6856:	a801      	add	r0, sp, #4
   d6858:	f7ff fe68 	bl	d652c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d685c:	a801      	add	r0, sp, #4
   d685e:	f7ff f88c 	bl	d597a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
        return impl_.get();
   d6862:	682b      	ldr	r3, [r5, #0]
    return data_ + size_;
   d6864:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   d6868:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   d686c:	42bc      	cmp	r4, r7
   d686e:	d009      	beq.n	d6884 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   d6870:	4622      	mov	r2, r4
   d6872:	4629      	mov	r1, r5
   d6874:	a801      	add	r0, sp, #4
   d6876:	f7ff ffca 	bl	d680e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   d687a:	a801      	add	r0, sp, #4
   d687c:	f7ff f88f 	bl	d599e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   d6880:	3408      	adds	r4, #8
   d6882:	e7f3      	b.n	d686c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   d6884:	4630      	mov	r0, r6
   d6886:	4629      	mov	r1, r5
   d6888:	f7ff ff58 	bl	d673c <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   d688c:	4630      	mov	r0, r6
   d688e:	b005      	add	sp, #20
   d6890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6894 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6898:	b093      	sub	sp, #76	; 0x4c
   d689a:	4605      	mov	r5, r0
   d689c:	460f      	mov	r7, r1
    return address_;
   d689e:	6808      	ldr	r0, [r1, #0]
   d68a0:	6849      	ldr	r1, [r1, #4]
    connCfg.conn_params = params;
   d68a2:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d68a4:	4698      	mov	r8, r3
    connCfg.version = BLE_API_VERSION;
   d68a6:	4b3f      	ldr	r3, [pc, #252]	; (d69a4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d68a8:	9304      	str	r3, [sp, #16]
    hal_ble_conn_cfg_t connCfg = {};
   d68aa:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   d68ae:	ab05      	add	r3, sp, #20
    return address_;
   d68b0:	ac0a      	add	r4, sp, #40	; 0x28
   d68b2:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   d68b4:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   d68b8:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d68bc:	f7fe fec2 	bl	d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d68c0:	4b39      	ldr	r3, [pc, #228]	; (d69a8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d68c2:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d68c4:	f7fe febe 	bl	d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d68c8:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d68ca:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d68cc:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d68ce:	464a      	mov	r2, r9
   d68d0:	a804      	add	r0, sp, #16
   d68d2:	f7fd fdb1 	bl	d4438 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   d68d6:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   d68d8:	4604      	mov	r4, r0
   d68da:	b138      	cbz	r0, d68ec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   d68dc:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d68de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d68e2:	801a      	strh	r2, [r3, #0]
}
   d68e4:	4620      	mov	r0, r4
   d68e6:	b013      	add	sp, #76	; 0x4c
   d68e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   d68ec:	4639      	mov	r1, r7
   d68ee:	4628      	mov	r0, r5
   d68f0:	f7fe fe34 	bl	d555c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   d68f4:	a803      	add	r0, sp, #12
   d68f6:	f7fe fa2d 	bl	d4d54 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d68fa:	f7fe fea3 	bl	d5644 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   d68fe:	6807      	ldr	r7, [r0, #0]
   d6900:	4629      	mov	r1, r5
   d6902:	3718      	adds	r7, #24
   d6904:	4630      	mov	r0, r6
   d6906:	f7ff f814 	bl	d5932 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d690a:	4631      	mov	r1, r6
   d690c:	4638      	mov	r0, r7
   d690e:	f7ff fa02 	bl	d5d16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6912:	4607      	mov	r7, r0
   d6914:	a80b      	add	r0, sp, #44	; 0x2c
   d6916:	f7ff f816 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d691a:	f04f 0920 	mov.w	r9, #32
   d691e:	b9ef      	cbnz	r7, d695c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
            LOG(ERROR, "Cannot add new peer device.");
   d6920:	4b22      	ldr	r3, [pc, #136]	; (d69ac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6922:	4923      	ldr	r1, [pc, #140]	; (d69b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   d6924:	9300      	str	r3, [sp, #0]
   d6926:	4632      	mov	r2, r6
   d6928:	4623      	mov	r3, r4
   d692a:	2032      	movs	r0, #50	; 0x32
   d692c:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   d6930:	f7fd fe5c 	bl	d45ec <log_message>
            lk.unlock();
   d6934:	a803      	add	r0, sp, #12
   d6936:	f7fe f8df 	bl	d4af8 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d693a:	682b      	ldr	r3, [r5, #0]
   d693c:	4621      	mov	r1, r4
   d693e:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   d6940:	4c1c      	ldr	r4, [pc, #112]	; (d69b4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d6942:	f7fd fd33 	bl	d43ac <hal_ble_gap_disconnect>
            lk.lock();
   d6946:	a803      	add	r0, sp, #12
   d6948:	f7fe f8ca 	bl	d4ae0 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
   d694c:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d694e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6952:	801a      	strh	r2, [r3, #0]
        WiringBleLock lk;
   d6954:	a803      	add	r0, sp, #12
   d6956:	f7fe fa05 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
   d695a:	e7c3      	b.n	d68e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   d695c:	a803      	add	r0, sp, #12
   d695e:	f7fe fa01 	bl	d4d64 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   d6962:	4b15      	ldr	r3, [pc, #84]	; (d69b8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   d6964:	9300      	str	r3, [sp, #0]
   d6966:	4912      	ldr	r1, [pc, #72]	; (d69b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   d6968:	4623      	mov	r3, r4
   d696a:	4632      	mov	r2, r6
   d696c:	2001      	movs	r0, #1
   d696e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   d6972:	f7fd fe3b 	bl	d45ec <log_message>
    if (automatic) {
   d6976:	f1b8 0f00 	cmp.w	r8, #0
   d697a:	d0b3      	beq.n	d68e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d697c:	4629      	mov	r1, r5
   d697e:	4630      	mov	r0, r6
   d6980:	f7ff ff62 	bl	d6848 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d6984:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   d6988:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d698c:	42af      	cmp	r7, r5
   d698e:	d005      	beq.n	d699c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
            characteristic.subscribe(true);
   d6990:	4628      	mov	r0, r5
   d6992:	2101      	movs	r1, #1
   d6994:	f7fe fce0 	bl	d5358 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   d6998:	3508      	adds	r5, #8
   d699a:	e7f7      	b.n	d698c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf8>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d699c:	4630      	mov	r0, r6
   d699e:	f7fe fffe 	bl	d599e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d69a2:	e79f      	b.n	d68e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   d69a4:	00180001 	.word	0x00180001
   d69a8:	000d5d89 	.word	0x000d5d89
   d69ac:	000d7acb 	.word	0x000d7acb
   d69b0:	000d79b8 	.word	0x000d79b8
   d69b4:	fffffefc 	.word	0xfffffefc
   d69b8:	000d7ae7 	.word	0x000d7ae7

000d69bc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d69bc:	b513      	push	{r0, r1, r4, lr}
   d69be:	4604      	mov	r4, r0
   d69c0:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   d69c4:	f7fe fd8c 	bl	d54e0 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d69c8:	9b00      	ldr	r3, [sp, #0]
   d69ca:	9901      	ldr	r1, [sp, #4]
   d69cc:	2200      	movs	r2, #0
   d69ce:	4620      	mov	r0, r4
   d69d0:	f7ff ff60 	bl	d6894 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d69d4:	4620      	mov	r0, r4
   d69d6:	b002      	add	sp, #8
   d69d8:	bd10      	pop	{r4, pc}
	...

000d69dc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d69dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   d69e0:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d69e2:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   d69e4:	2600      	movs	r6, #0
   d69e6:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   d69ea:	4b65      	ldr	r3, [pc, #404]	; (d6b80 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a4>)
   d69ec:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d69ee:	4605      	mov	r5, r0
   d69f0:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   d69f2:	4633      	mov	r3, r6
   d69f4:	4963      	ldr	r1, [pc, #396]	; (d6b84 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   d69f6:	f8df 9190 	ldr.w	r9, [pc, #400]	; d6b88 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
   d69fa:	f8df 8188 	ldr.w	r8, [pc, #392]	; d6b84 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   d69fe:	f8df a18c 	ldr.w	sl, [pc, #396]	; d6b8c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
        LOG(TRACE, "Characteristic discovered.");
   d6a02:	aa0c      	add	r2, sp, #48	; 0x30
   d6a04:	2001      	movs	r0, #1
   d6a06:	f7fd fdf1 	bl	d45ec <log_message>
        for (size_t i = 0; i < event->count; i++) {
   d6a0a:	682b      	ldr	r3, [r5, #0]
   d6a0c:	42b3      	cmp	r3, r6
   d6a0e:	f240 80b3 	bls.w	d6b78 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x19c>
            BleCharacteristic characteristic;
   d6a12:	a803      	add	r0, sp, #12
   d6a14:	f7fe fc26 	bl	d5264 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   d6a18:	a805      	add	r0, sp, #20
   d6a1a:	f7fe fcd7 	bl	d53cc <_ZN8particle10BleServiceC1Ev>
        return impl_.get();
   d6a1e:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d6a22:	686b      	ldr	r3, [r5, #4]
   d6a24:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   d6a26:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d6a2a:	445b      	add	r3, fp
        this->size = halHandles.size;
   d6a2c:	8bd9      	ldrh	r1, [r3, #30]
   d6a2e:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   d6a30:	8c19      	ldrh	r1, [r3, #32]
   d6a32:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   d6a34:	8c58      	ldrh	r0, [r3, #34]	; 0x22
   d6a36:	8190      	strh	r0, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d6a38:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   d6a3a:	81d1      	strh	r1, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d6a3c:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
   d6a3e:	8211      	strh	r1, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d6a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   d6a42:	8253      	strh	r3, [r2, #18]
   d6a44:	e9d7 1303 	ldrd	r1, r3, [r7, #12]
   d6a48:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        for (const auto& svc : services_) {
   d6a4c:	428b      	cmp	r3, r1
   d6a4e:	d07b      	beq.n	d6b48 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
        return impl_.get();
   d6a50:	680a      	ldr	r2, [r1, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   d6a52:	8ad4      	ldrh	r4, [r2, #22]
   d6a54:	4284      	cmp	r4, r0
   d6a56:	d375      	bcc.n	d6b44 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x168>
   d6a58:	8a92      	ldrh	r2, [r2, #20]
   d6a5a:	4282      	cmp	r2, r0
   d6a5c:	d872      	bhi.n	d6b44 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x168>
    class shared_ptr : public __shared_ptr<_Tp>
   d6a5e:	a805      	add	r0, sp, #20
   d6a60:	f7fe fcd0 	bl	d5404 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   d6a64:	f8dd c014 	ldr.w	ip, [sp, #20]
        return impl_.get();
   d6a68:	f8dd e00c 	ldr.w	lr, [sp, #12]
   d6a6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6a70:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   d6a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a76:	f8dc 3000 	ldr.w	r3, [ip]
   d6a7a:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   d6a7c:	892b      	ldrh	r3, [r5, #8]
   d6a7e:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6a82:	686b      	ldr	r3, [r5, #4]
   d6a84:	9c03      	ldr	r4, [sp, #12]
   d6a86:	445b      	add	r3, fp
   d6a88:	7e5b      	ldrb	r3, [r3, #25]
   d6a8a:	f013 0f02 	tst.w	r3, #2
   d6a8e:	d16e      	bne.n	d6b6e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x192>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d6a90:	686b      	ldr	r3, [r5, #4]
   d6a92:	445b      	add	r3, fp
   d6a94:	7e5b      	ldrb	r3, [r3, #25]
   d6a96:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d6a98:	bf42      	ittt	mi
   d6a9a:	7923      	ldrbmi	r3, [r4, #4]
   d6a9c:	f043 0304 	orrmi.w	r3, r3, #4
   d6aa0:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d6aa2:	686b      	ldr	r3, [r5, #4]
   d6aa4:	445b      	add	r3, fp
   d6aa6:	7e5b      	ldrb	r3, [r3, #25]
   d6aa8:	0719      	lsls	r1, r3, #28
   d6aaa:	bf42      	ittt	mi
   d6aac:	7923      	ldrbmi	r3, [r4, #4]
   d6aae:	f043 0308 	orrmi.w	r3, r3, #8
   d6ab2:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d6ab4:	686b      	ldr	r3, [r5, #4]
   d6ab6:	445b      	add	r3, fp
   d6ab8:	7e5b      	ldrb	r3, [r3, #25]
   d6aba:	06da      	lsls	r2, r3, #27
   d6abc:	bf42      	ittt	mi
   d6abe:	7923      	ldrbmi	r3, [r4, #4]
   d6ac0:	f043 0310 	orrmi.w	r3, r3, #16
   d6ac4:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6ac6:	686b      	ldr	r3, [r5, #4]
   d6ac8:	445b      	add	r3, fp
   d6aca:	aa07      	add	r2, sp, #28
   d6acc:	7e5b      	ldrb	r3, [r3, #25]
   d6ace:	069b      	lsls	r3, r3, #26
   d6ad0:	bf42      	ittt	mi
   d6ad2:	7923      	ldrbmi	r3, [r4, #4]
   d6ad4:	f043 0320 	orrmi.w	r3, r3, #32
   d6ad8:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   d6ada:	686b      	ldr	r3, [r5, #4]
   d6adc:	449b      	add	fp, r3
   d6ade:	f10b 0304 	add.w	r3, fp, #4
   d6ae2:	4696      	mov	lr, r2
   d6ae4:	f10b 0b14 	add.w	fp, fp, #20
   d6ae8:	6818      	ldr	r0, [r3, #0]
   d6aea:	6859      	ldr	r1, [r3, #4]
   d6aec:	4694      	mov	ip, r2
   d6aee:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d6af2:	3308      	adds	r3, #8
   d6af4:	455b      	cmp	r3, fp
   d6af6:	4662      	mov	r2, ip
   d6af8:	d1f6      	bne.n	d6ae8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
   d6afa:	6818      	ldr	r0, [r3, #0]
   d6afc:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   d6b00:	4671      	mov	r1, lr
   d6b02:	a80c      	add	r0, sp, #48	; 0x30
   d6b04:	f7fe f974 	bl	d4df0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d6b08:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   d6b0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6b10:	3414      	adds	r4, #20
   d6b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b14:	f8dc 3000 	ldr.w	r3, [ip]
   d6b18:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   d6b1a:	a903      	add	r1, sp, #12
   d6b1c:	a80c      	add	r0, sp, #48	; 0x30
   d6b1e:	f7fe fef0 	bl	d5902 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6b22:	a90c      	add	r1, sp, #48	; 0x30
   d6b24:	f107 0018 	add.w	r0, r7, #24
   d6b28:	f7ff fe19 	bl	d675e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6b2c:	4604      	mov	r4, r0
   d6b2e:	a80d      	add	r0, sp, #52	; 0x34
   d6b30:	f7fe ff09 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b34:	b99c      	cbnz	r4, d6b5e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x182>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   d6b36:	2320      	movs	r3, #32
   d6b38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   d6b3c:	f8cd a000 	str.w	sl, [sp]
   d6b40:	4623      	mov	r3, r4
   d6b42:	e007      	b.n	d6b54 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x178>
        for (const auto& svc : services_) {
   d6b44:	3108      	adds	r1, #8
   d6b46:	e781      	b.n	d6a4c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   d6b48:	2420      	movs	r4, #32
   d6b4a:	2300      	movs	r3, #0
   d6b4c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   d6b50:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   d6b54:	aa0c      	add	r2, sp, #48	; 0x30
   d6b56:	4641      	mov	r1, r8
   d6b58:	2032      	movs	r0, #50	; 0x32
   d6b5a:	f7fd fd47 	bl	d45ec <log_message>
   d6b5e:	a806      	add	r0, sp, #24
   d6b60:	f7fe fef1 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b64:	a804      	add	r0, sp, #16
   d6b66:	f7fe feee 	bl	d5946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   d6b6a:	3601      	adds	r6, #1
   d6b6c:	e74d      	b.n	d6a0a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   d6b6e:	7923      	ldrb	r3, [r4, #4]
   d6b70:	f043 0302 	orr.w	r3, r3, #2
   d6b74:	7123      	strb	r3, [r4, #4]
   d6b76:	e78b      	b.n	d6a90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb4>
    }
   d6b78:	b015      	add	sp, #84	; 0x54
   d6b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b7e:	bf00      	nop
   d6b80:	000d7b04 	.word	0x000d7b04
   d6b84:	000d79b8 	.word	0x000d79b8
   d6b88:	000d7b1f 	.word	0x000d7b1f
   d6b8c:	000d7b4e 	.word	0x000d7b4e

000d6b90 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6b90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b94:	4604      	mov	r4, r0
   d6b96:	460d      	mov	r5, r1
   d6b98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6b9a:	d911      	bls.n	d6bc0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x30>
   d6b9c:	4290      	cmp	r0, r2
   d6b9e:	d210      	bcs.n	d6bc2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
            --end;
   d6ba0:	f1a2 0654 	sub.w	r6, r2, #84	; 0x54
            dest += end - p - 1;
   d6ba4:	1a75      	subs	r5, r6, r1
   d6ba6:	f1a1 0754 	sub.w	r7, r1, #84	; 0x54
   d6baa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6bac:	42b7      	cmp	r7, r6
   d6bae:	d012      	beq.n	d6bd6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
                new(dest) T(std::move(*end));
   d6bb0:	b11c      	cbz	r4, d6bba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6bb2:	4631      	mov	r1, r6
   d6bb4:	4620      	mov	r0, r4
   d6bb6:	f7ff f83b 	bl	d5c30 <_ZN8particle13BleScanResultC1EOS0_>
            for (; end != p; --end, --dest) {
   d6bba:	3e54      	subs	r6, #84	; 0x54
   d6bbc:	3c54      	subs	r4, #84	; 0x54
   d6bbe:	e7f5      	b.n	d6bac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6bc0:	d009      	beq.n	d6bd6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
            for (; p != end; ++p, ++dest) {
   d6bc2:	42b5      	cmp	r5, r6
   d6bc4:	d007      	beq.n	d6bd6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
                new(dest) T(std::move(*p));
   d6bc6:	b11c      	cbz	r4, d6bd0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
   d6bc8:	4629      	mov	r1, r5
   d6bca:	4620      	mov	r0, r4
   d6bcc:	f7ff f830 	bl	d5c30 <_ZN8particle13BleScanResultC1EOS0_>
            for (; p != end; ++p, ++dest) {
   d6bd0:	3554      	adds	r5, #84	; 0x54
   d6bd2:	3454      	adds	r4, #84	; 0x54
   d6bd4:	e7f5      	b.n	d6bc2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
    }
   d6bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6bd8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   d6bda:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6bdc:	4605      	mov	r5, r0
        if (n > 0) {
   d6bde:	dd13      	ble.n	d6c08 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d6be0:	2754      	movs	r7, #84	; 0x54
    return ::malloc(size);
   d6be2:	fb07 f006 	mul.w	r0, r7, r6
   d6be6:	f7fd fd95 	bl	d4714 <malloc>
            if (!d) {
   d6bea:	4604      	mov	r4, r0
   d6bec:	b158      	cbz	r0, d6c06 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   d6bee:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6bf2:	fb07 1202 	mla	r2, r7, r2, r1
   d6bf6:	f7ff ffcb 	bl	d6b90 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6bfa:	6828      	ldr	r0, [r5, #0]
   d6bfc:	f7fd fd92 	bl	d4724 <free>
        data_ = d;
   d6c00:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6c02:	60ae      	str	r6, [r5, #8]
        return true;
   d6c04:	2001      	movs	r0, #1
    }
   d6c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6c08:	2400      	movs	r4, #0
   d6c0a:	e7f6      	b.n	d6bfa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000d6c0c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6c0c:	b530      	push	{r4, r5, lr}
   d6c0e:	b097      	sub	sp, #92	; 0x5c
    return insert(size_, std::move(value));
   d6c10:	6845      	ldr	r5, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6c12:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6c14:	a801      	add	r0, sp, #4
   d6c16:	f7ff f80b 	bl	d5c30 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c1a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6c1e:	4299      	cmp	r1, r3
   d6c20:	da11      	bge.n	d6c46 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x3a>
    T* const p = data_ + i;
   d6c22:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6c24:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   d6c26:	2254      	movs	r2, #84	; 0x54
   d6c28:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
   d6c2c:	f105 0054 	add.w	r0, r5, #84	; 0x54
   d6c30:	fb02 3201 	mla	r2, r2, r1, r3
   d6c34:	4629      	mov	r1, r5
   d6c36:	f7ff ffab 	bl	d6b90 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6c3a:	b965      	cbnz	r5, d6c56 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x4a>
    ++size_;
   d6c3c:	6863      	ldr	r3, [r4, #4]
   d6c3e:	3301      	adds	r3, #1
   d6c40:	6063      	str	r3, [r4, #4]
    return true;
   d6c42:	2001      	movs	r0, #1
   d6c44:	e005      	b.n	d6c52 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x46>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c46:	3101      	adds	r1, #1
   d6c48:	4620      	mov	r0, r4
   d6c4a:	f7ff ffc5 	bl	d6bd8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6c4e:	2800      	cmp	r0, #0
   d6c50:	d1e7      	bne.n	d6c22 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x16>
}
   d6c52:	b017      	add	sp, #92	; 0x5c
   d6c54:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
   d6c56:	a901      	add	r1, sp, #4
   d6c58:	4628      	mov	r0, r5
   d6c5a:	f7fe ffe9 	bl	d5c30 <_ZN8particle13BleScanResultC1EOS0_>
   d6c5e:	e7ed      	b.n	d6c3c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x30>

000d6c60 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c64:	b0ab      	sub	sp, #172	; 0xac
            : rssi_(BLE_RSSI_INVALID) {
   d6c66:	466d      	mov	r5, sp
   d6c68:	4606      	mov	r6, r0
   d6c6a:	4628      	mov	r0, r5
   d6c6c:	460c      	mov	r4, r1
   d6c6e:	f7fe f8a2 	bl	d4db6 <_ZN8particle10BleAddressC1Ev>
   d6c72:	a802      	add	r0, sp, #8
   d6c74:	f7fe fa39 	bl	d50ea <_ZN8particle18BleAdvertisingDataC1Ev>
   d6c78:	a80b      	add	r0, sp, #44	; 0x2c
   d6c7a:	f7fe fa36 	bl	d50ea <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   d6c7e:	4632      	mov	r2, r6
   d6c80:	ab15      	add	r3, sp, #84	; 0x54
   d6c82:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d6c86:	6851      	ldr	r1, [r2, #4]
        scanResponse_.set(buf, len);
   d6c88:	89f2      	ldrh	r2, [r6, #14]
   d6c8a:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   d6c8c:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   d6c90:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   d6c92:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   d6c94:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        scanResponse_.set(buf, len);
   d6c98:	a80b      	add	r0, sp, #44	; 0x2c
   d6c9a:	f7fe fa0c 	bl	d50b6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   d6c9e:	89b2      	ldrh	r2, [r6, #12]
   d6ca0:	6871      	ldr	r1, [r6, #4]
   d6ca2:	a802      	add	r0, sp, #8
   d6ca4:	f7fe fa07 	bl	d50b6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        int8_t filterRssi = filter_.minRssi();
   d6ca8:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   d6cac:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   d6cae:	af15      	add	r7, sp, #84	; 0x54
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   d6cb0:	d003      	beq.n	d6cba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x5a>
   d6cb2:	f99d 2050 	ldrsb.w	r2, [sp, #80]	; 0x50
   d6cb6:	429a      	cmp	r2, r3
   d6cb8:	db5c      	blt.n	d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
        filterRssi = filter_.maxRssi();
   d6cba:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   d6cbe:	2b7f      	cmp	r3, #127	; 0x7f
   d6cc0:	d003      	beq.n	d6cca <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x6a>
   d6cc2:	f99d 2050 	ldrsb.w	r2, [sp, #80]	; 0x50
   d6cc6:	429a      	cmp	r2, r3
   d6cc8:	dc54      	bgt.n	d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
        auto filerAddresses = filter_.addresses();
   d6cca:	f104 0150 	add.w	r1, r4, #80	; 0x50
   d6cce:	4638      	mov	r0, r7
   d6cd0:	f7fe ff49 	bl	d5b66 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
        if (filerAddresses.size() > 0) {
   d6cd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d6cd6:	2b00      	cmp	r3, #0
   d6cd8:	dd4f      	ble.n	d6d7a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11a>
            for (const auto& address : filerAddresses) {
   d6cda:	9e15      	ldr	r6, [sp, #84]	; 0x54
    return data_ + size_;
   d6cdc:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
   d6ce0:	45b1      	cmp	r9, r6
   d6ce2:	d04d      	beq.n	d6d80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x120>
                if (address == result.address()) {
   d6ce4:	4630      	mov	r0, r6
   d6ce6:	4629      	mov	r1, r5
   d6ce8:	f7fe f851 	bl	d4d8e <_ZNK8particle10BleAddresseqERKS0_>
   d6cec:	3608      	adds	r6, #8
   d6cee:	4680      	mov	r8, r0
   d6cf0:	2800      	cmp	r0, #0
   d6cf2:	d0f5      	beq.n	d6ce0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x80>
    ::free(ptr);
   d6cf4:	9815      	ldr	r0, [sp, #84]	; 0x54
   d6cf6:	f7fd fd15 	bl	d4724 <free>
        if (!delegator->filterByRssi(result) ||
   d6cfa:	f1b8 0f00 	cmp.w	r8, #0
   d6cfe:	d039      	beq.n	d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
              !delegator->filterByDeviceName(result) ||
   d6d00:	4629      	mov	r1, r5
   d6d02:	4620      	mov	r0, r4
   d6d04:	f7fe fef2 	bl	d5aec <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   d6d08:	b3a0      	cbz	r0, d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
              !delegator->filterByServiceUUID(result) ||
   d6d0a:	4629      	mov	r1, r5
   d6d0c:	4620      	mov	r0, r4
   d6d0e:	f7ff fb3f 	bl	d6390 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   d6d12:	4606      	mov	r6, r0
   d6d14:	b370      	cbz	r0, d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
        auto filterAppearances = filter_.appearances();
   d6d16:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   d6d1a:	4638      	mov	r0, r7
   d6d1c:	f7fe ff69 	bl	d5bf2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   d6d20:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d6d22:	2b00      	cmp	r3, #0
   d6d24:	dd12      	ble.n	d6d4c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xec>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   d6d26:	a80b      	add	r0, sp, #44	; 0x2c
   d6d28:	f7fe fa46 	bl	d51b8 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   d6d2c:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   d6d2e:	a802      	add	r0, sp, #8
   d6d30:	f7fe fa42 	bl	d51b8 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   d6d34:	e9dd 3215 	ldrd	r3, r2, [sp, #84]	; 0x54
   d6d38:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   d6d3c:	4293      	cmp	r3, r2
   d6d3e:	d022      	beq.n	d6d86 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x126>
                if (appearance == srAppearance || appearance == advAppearance) {
   d6d40:	f833 1b02 	ldrh.w	r1, [r3], #2
   d6d44:	4588      	cmp	r8, r1
   d6d46:	d001      	beq.n	d6d4c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xec>
   d6d48:	4288      	cmp	r0, r1
   d6d4a:	d1f7      	bne.n	d6d3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xdc>
    ::free(ptr);
   d6d4c:	9815      	ldr	r0, [sp, #84]	; 0x54
   d6d4e:	f7fd fce9 	bl	d4724 <free>
              !delegator->filterByServiceUUID(result) ||
   d6d52:	b17e      	cbz	r6, d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
              !delegator->filterByCustomData(result)) {
   d6d54:	4629      	mov	r1, r5
   d6d56:	4620      	mov	r0, r4
   d6d58:	f7fe fcfe 	bl	d5758 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   d6d5c:	b150      	cbz	r0, d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
        if (delegator->scanResultCallback_) {
   d6d5e:	6a23      	ldr	r3, [r4, #32]
   d6d60:	b19b      	cbz	r3, d6d8a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12a>
            delegator->foundCount_++;
   d6d62:	6963      	ldr	r3, [r4, #20]
   d6d64:	9515      	str	r5, [sp, #84]	; 0x54
   d6d66:	3301      	adds	r3, #1
   d6d68:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6d6c:	4639      	mov	r1, r7
   d6d6e:	f104 0018 	add.w	r0, r4, #24
   d6d72:	4798      	blx	r3
    }
   d6d74:	b02b      	add	sp, #172	; 0xac
   d6d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   d6d7a:	f04f 0801 	mov.w	r8, #1
   d6d7e:	e7b9      	b.n	d6cf4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x94>
            return false;
   d6d80:	f04f 0800 	mov.w	r8, #0
   d6d84:	e7b6      	b.n	d6cf4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x94>
            return false;
   d6d86:	2600      	movs	r6, #0
   d6d88:	e7e0      	b.n	d6d4c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xec>
        } else if (delegator->scanResultCallbackRef_) {
   d6d8a:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
   d6d8e:	f1bc 0f00 	cmp.w	ip, #0
   d6d92:	d007      	beq.n	d6da4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x144>
            delegator->foundCount_++;
   d6d94:	6963      	ldr	r3, [r4, #20]
   d6d96:	3301      	adds	r3, #1
   d6d98:	6163      	str	r3, [r4, #20]
   d6d9a:	4629      	mov	r1, r5
   d6d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6d9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d6da2:	e7e6      	b.n	d6d72 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x112>
        if (delegator->resultsPtr_) {
   d6da4:	68e6      	ldr	r6, [r4, #12]
   d6da6:	b356      	cbz	r6, d6dfe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19e>
            delegator->foundCount_++;
   d6da8:	6963      	ldr	r3, [r4, #20]
   d6daa:	1c5a      	adds	r2, r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   d6dac:	6923      	ldr	r3, [r4, #16]
            delegator->foundCount_++;
   d6dae:	6162      	str	r2, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   d6db0:	429a      	cmp	r2, r3
   d6db2:	d8df      	bhi.n	d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   d6db4:	2354      	movs	r3, #84	; 0x54
    address_ = addr.address_;
   d6db6:	cd03      	ldmia	r5!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   d6db8:	4353      	muls	r3, r2
   d6dba:	3b54      	subs	r3, #84	; 0x54
   d6dbc:	18f7      	adds	r7, r6, r3
    address_ = addr.address_;
   d6dbe:	50f0      	str	r0, [r6, r3]
   d6dc0:	6079      	str	r1, [r7, #4]
class BleScanResult {
   d6dc2:	ae02      	add	r6, sp, #8
   d6dc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6dc6:	f107 0508 	add.w	r5, r7, #8
   d6dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6dcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6dd0:	6833      	ldr	r3, [r6, #0]
   d6dd2:	602b      	str	r3, [r5, #0]
   d6dd4:	ae0b      	add	r6, sp, #44	; 0x2c
   d6dd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6dd8:	f107 052c 	add.w	r5, r7, #44	; 0x2c
   d6ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6dde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6de2:	6833      	ldr	r3, [r6, #0]
   d6de4:	602b      	str	r3, [r5, #0]
   d6de6:	f99d 3050 	ldrsb.w	r3, [sp, #80]	; 0x50
   d6dea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d6dee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d6df2:	429a      	cmp	r2, r3
   d6df4:	d3be      	bcc.n	d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
                    hal_ble_gap_stop_scan(nullptr);
   d6df6:	4660      	mov	r0, ip
   d6df8:	f7fd face 	bl	d4398 <hal_ble_gap_stop_scan>
   d6dfc:	e7ba      	b.n	d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
    address_ = addr.address_;
   d6dfe:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6e02:	ad02      	add	r5, sp, #8
   d6e04:	e887 0003 	stmia.w	r7, {r0, r1}
   d6e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e0a:	ae17      	add	r6, sp, #92	; 0x5c
   d6e0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6e12:	682b      	ldr	r3, [r5, #0]
   d6e14:	6033      	str	r3, [r6, #0]
   d6e16:	ad0b      	add	r5, sp, #44	; 0x2c
   d6e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e1a:	ae20      	add	r6, sp, #128	; 0x80
   d6e1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6e22:	682b      	ldr	r3, [r5, #0]
   d6e24:	6033      	str	r3, [r6, #0]
        delegator->resultsVector_.append(result);
   d6e26:	4639      	mov	r1, r7
   d6e28:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   d6e2c:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
   d6e30:	4620      	mov	r0, r4
   d6e32:	f7ff feeb 	bl	d6c0c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_>
   d6e36:	e79d      	b.n	d6d74 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>

000d6e38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6e38:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6e3a:	4c06      	ldr	r4, [pc, #24]	; (d6e54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6e3c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6e3e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6e40:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6e42:	f7fd fb2b 	bl	d449c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6e46:	4620      	mov	r0, r4
   d6e48:	4a03      	ldr	r2, [pc, #12]	; (d6e58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6e4a:	4904      	ldr	r1, [pc, #16]	; (d6e5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6e50:	f000 bb92 	b.w	d7578 <__aeabi_atexit>
   d6e54:	2003e67c 	.word	0x2003e67c
   d6e58:	2003df50 	.word	0x2003df50
   d6e5c:	000d4acf 	.word	0x000d4acf

000d6e60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e62:	4606      	mov	r6, r0
   d6e64:	460d      	mov	r5, r1
  size_t n = 0;
   d6e66:	188f      	adds	r7, r1, r2
   d6e68:	2400      	movs	r4, #0
  while (size--) {
   d6e6a:	42bd      	cmp	r5, r7
   d6e6c:	d00c      	beq.n	d6e88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6e6e:	6833      	ldr	r3, [r6, #0]
   d6e70:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6e74:	689b      	ldr	r3, [r3, #8]
   d6e76:	4630      	mov	r0, r6
   d6e78:	4798      	blx	r3
     if (chunk>=0)
   d6e7a:	1e03      	subs	r3, r0, #0
   d6e7c:	db01      	blt.n	d6e82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6e7e:	441c      	add	r4, r3
  while (size--) {
   d6e80:	e7f3      	b.n	d6e6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6e82:	2c00      	cmp	r4, #0
   d6e84:	bf08      	it	eq
   d6e86:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6e88:	4620      	mov	r0, r4
   d6e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e8c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6e8c:	b513      	push	{r0, r1, r4, lr}
   d6e8e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6e90:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6e92:	b159      	cbz	r1, d6eac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6e94:	9101      	str	r1, [sp, #4]
   d6e96:	f000 fd0d 	bl	d78b4 <strlen>
   d6e9a:	6823      	ldr	r3, [r4, #0]
   d6e9c:	9901      	ldr	r1, [sp, #4]
   d6e9e:	68db      	ldr	r3, [r3, #12]
   d6ea0:	4602      	mov	r2, r0
   d6ea2:	4620      	mov	r0, r4
    }
   d6ea4:	b002      	add	sp, #8
   d6ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6eaa:	4718      	bx	r3
    }
   d6eac:	b002      	add	sp, #8
   d6eae:	bd10      	pop	{r4, pc}

000d6eb0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6eb0:	6803      	ldr	r3, [r0, #0]
   d6eb2:	689b      	ldr	r3, [r3, #8]
   d6eb4:	4718      	bx	r3

000d6eb6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6eb6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6eb8:	210d      	movs	r1, #13
{
   d6eba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6ebc:	f7ff fff8 	bl	d6eb0 <_ZN5Print5printEc>
  n += print('\n');
   d6ec0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6ec2:	4604      	mov	r4, r0
  n += print('\n');
   d6ec4:	4628      	mov	r0, r5
   d6ec6:	f7ff fff3 	bl	d6eb0 <_ZN5Print5printEc>
  return n;
}
   d6eca:	4420      	add	r0, r4
   d6ecc:	bd38      	pop	{r3, r4, r5, pc}

000d6ece <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6ece:	b538      	push	{r3, r4, r5, lr}
   d6ed0:	4605      	mov	r5, r0
  return write(str);
   d6ed2:	f7ff ffdb 	bl	d6e8c <_ZN5Print5writeEPKc>
   d6ed6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6ed8:	4628      	mov	r0, r5
   d6eda:	f7ff ffec 	bl	d6eb6 <_ZN5Print7printlnEv>
  return n;
}
   d6ede:	4420      	add	r0, r4
   d6ee0:	bd38      	pop	{r3, r4, r5, pc}

000d6ee2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6ee2:	b530      	push	{r4, r5, lr}
   d6ee4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6ee6:	2300      	movs	r3, #0
   d6ee8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6eec:	2a01      	cmp	r2, #1
   d6eee:	bf98      	it	ls
   d6ef0:	220a      	movls	r2, #10
   d6ef2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6ef4:	460d      	mov	r5, r1
   d6ef6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6efa:	fb01 5312 	mls	r3, r1, r2, r5
   d6efe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6f02:	2b09      	cmp	r3, #9
   d6f04:	bf94      	ite	ls
   d6f06:	3330      	addls	r3, #48	; 0x30
   d6f08:	3337      	addhi	r3, #55	; 0x37
   d6f0a:	b2db      	uxtb	r3, r3
  } while(n);
   d6f0c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6f0e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6f12:	d9ef      	bls.n	d6ef4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6f14:	4621      	mov	r1, r4
   d6f16:	f7ff ffb9 	bl	d6e8c <_ZN5Print5writeEPKc>
}
   d6f1a:	b00b      	add	sp, #44	; 0x2c
   d6f1c:	bd30      	pop	{r4, r5, pc}

000d6f1e <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6f1e:	2300      	movs	r3, #0
   d6f20:	6840      	ldr	r0, [r0, #4]
   d6f22:	461a      	mov	r2, r3
   d6f24:	4619      	mov	r1, r3
   d6f26:	f7fd bbad 	b.w	d4684 <network_on>
	...

000d6f2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6f2c:	4b01      	ldr	r3, [pc, #4]	; (d6f34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6f2e:	4a02      	ldr	r2, [pc, #8]	; (d6f38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6f30:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6f32:	4770      	bx	lr
   d6f34:	2003e684 	.word	0x2003e684
   d6f38:	000d7be8 	.word	0x000d7be8

000d6f3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6f3c:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6f3e:	681a      	ldr	r2, [r3, #0]
   d6f40:	4b02      	ldr	r3, [pc, #8]	; (d6f4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6f42:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6f44:	4770      	bx	lr
   d6f46:	bf00      	nop
   d6f48:	2003dee8 	.word	0x2003dee8
   d6f4c:	2003e688 	.word	0x2003e688

000d6f50 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6f50:	b510      	push	{r4, lr}
   d6f52:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d6f54:	f7fd fed5 	bl	d4d02 <_ZNSt14_Function_baseD1Ev>
   d6f58:	4620      	mov	r0, r4
   d6f5a:	bd10      	pop	{r4, pc}

000d6f5c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6f5c:	4803      	ldr	r0, [pc, #12]	; (d6f6c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6f5e:	4a04      	ldr	r2, [pc, #16]	; (d6f70 <_GLOBAL__sub_I_RGB+0x14>)
   d6f60:	4904      	ldr	r1, [pc, #16]	; (d6f74 <_GLOBAL__sub_I_RGB+0x18>)
   d6f62:	2300      	movs	r3, #0
   d6f64:	6083      	str	r3, [r0, #8]
   d6f66:	f000 bb07 	b.w	d7578 <__aeabi_atexit>
   d6f6a:	bf00      	nop
   d6f6c:	2003e68c 	.word	0x2003e68c
   d6f70:	2003df50 	.word	0x2003df50
   d6f74:	000d6f51 	.word	0x000d6f51

000d6f78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6f78:	4b01      	ldr	r3, [pc, #4]	; (d6f80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6f7a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6f7c:	4770      	bx	lr
   d6f7e:	bf00      	nop
   d6f80:	2003deec 	.word	0x2003deec

000d6f84 <serialEventRun>:
{
   d6f84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6f86:	4b0b      	ldr	r3, [pc, #44]	; (d6fb4 <serialEventRun+0x30>)
   d6f88:	b143      	cbz	r3, d6f9c <serialEventRun+0x18>
   d6f8a:	f000 f95f 	bl	d724c <_Z16_fetch_usbserialv>
   d6f8e:	6803      	ldr	r3, [r0, #0]
   d6f90:	691b      	ldr	r3, [r3, #16]
   d6f92:	4798      	blx	r3
   d6f94:	2800      	cmp	r0, #0
   d6f96:	dd01      	ble.n	d6f9c <serialEventRun+0x18>
        serialEvent();
   d6f98:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6f9c:	4b06      	ldr	r3, [pc, #24]	; (d6fb8 <serialEventRun+0x34>)
   d6f9e:	b143      	cbz	r3, d6fb2 <serialEventRun+0x2e>
   d6fa0:	f000 f9d2 	bl	d7348 <_Z22__fetch_global_Serial1v>
   d6fa4:	6803      	ldr	r3, [r0, #0]
   d6fa6:	691b      	ldr	r3, [r3, #16]
   d6fa8:	4798      	blx	r3
   d6faa:	2800      	cmp	r0, #0
   d6fac:	dd01      	ble.n	d6fb2 <serialEventRun+0x2e>
        serialEvent1();
   d6fae:	f3af 8000 	nop.w
}
   d6fb2:	bd08      	pop	{r3, pc}
	...

000d6fbc <_post_loop>:
{
   d6fbc:	b508      	push	{r3, lr}
	serialEventRun();
   d6fbe:	f7ff ffe1 	bl	d6f84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6fc2:	f7fd f9d1 	bl	d4368 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6fc6:	4b01      	ldr	r3, [pc, #4]	; (d6fcc <_post_loop+0x10>)
   d6fc8:	6018      	str	r0, [r3, #0]
}
   d6fca:	bd08      	pop	{r3, pc}
   d6fcc:	2003e7ec 	.word	0x2003e7ec

000d6fd0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6fd0:	4802      	ldr	r0, [pc, #8]	; (d6fdc <_Z33system_initialize_user_backup_ramv+0xc>)
   d6fd2:	4a03      	ldr	r2, [pc, #12]	; (d6fe0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6fd4:	4903      	ldr	r1, [pc, #12]	; (d6fe4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6fd6:	1a12      	subs	r2, r2, r0
   d6fd8:	f000 bc06 	b.w	d77e8 <memcpy>
   d6fdc:	2003f400 	.word	0x2003f400
   d6fe0:	2003f404 	.word	0x2003f404
   d6fe4:	000d7e10 	.word	0x000d7e10

000d6fe8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6fe8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6fea:	2300      	movs	r3, #0
   d6fec:	9300      	str	r3, [sp, #0]
   d6fee:	461a      	mov	r2, r3
   d6ff0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ff4:	f7fd fb1c 	bl	d4630 <system_ctrl_set_result>
}
   d6ff8:	b003      	add	sp, #12
   d6ffa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7000 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7000:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7002:	8843      	ldrh	r3, [r0, #2]
   d7004:	2b0a      	cmp	r3, #10
   d7006:	d008      	beq.n	d701a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7008:	2b50      	cmp	r3, #80	; 0x50
   d700a:	d10b      	bne.n	d7024 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d700c:	4b09      	ldr	r3, [pc, #36]	; (d7034 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d700e:	681b      	ldr	r3, [r3, #0]
   d7010:	b14b      	cbz	r3, d7026 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7012:	b003      	add	sp, #12
   d7014:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7018:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d701a:	f7ff ffe5 	bl	d6fe8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d701e:	b003      	add	sp, #12
   d7020:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7024:	2300      	movs	r3, #0
   d7026:	9300      	str	r3, [sp, #0]
   d7028:	461a      	mov	r2, r3
   d702a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d702e:	f7fd faff 	bl	d4630 <system_ctrl_set_result>
}
   d7032:	e7f4      	b.n	d701e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7034:	2003e6a0 	.word	0x2003e6a0

000d7038 <module_user_init_hook>:
{
   d7038:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d703a:	4c12      	ldr	r4, [pc, #72]	; (d7084 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d703c:	4812      	ldr	r0, [pc, #72]	; (d7088 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d703e:	4d13      	ldr	r5, [pc, #76]	; (d708c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7040:	2100      	movs	r1, #0
   d7042:	f7fd fb87 	bl	d4754 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7046:	6823      	ldr	r3, [r4, #0]
   d7048:	42ab      	cmp	r3, r5
   d704a:	4b11      	ldr	r3, [pc, #68]	; (d7090 <module_user_init_hook+0x58>)
   d704c:	bf0c      	ite	eq
   d704e:	2201      	moveq	r2, #1
   d7050:	2200      	movne	r2, #0
   d7052:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7054:	d002      	beq.n	d705c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7056:	f7ff ffbb 	bl	d6fd0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d705a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d705c:	f7fd f974 	bl	d4348 <HAL_RNG_GetRandomNumber>
   d7060:	4604      	mov	r4, r0
    srand(seed);
   d7062:	f000 fbf1 	bl	d7848 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7066:	4b0b      	ldr	r3, [pc, #44]	; (d7094 <module_user_init_hook+0x5c>)
   d7068:	b113      	cbz	r3, d7070 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d706a:	4620      	mov	r0, r4
   d706c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7070:	2100      	movs	r1, #0
   d7072:	4808      	ldr	r0, [pc, #32]	; (d7094 <module_user_init_hook+0x5c>)
   d7074:	f7fd fb46 	bl	d4704 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d707c:	4806      	ldr	r0, [pc, #24]	; (d7098 <module_user_init_hook+0x60>)
   d707e:	2100      	movs	r1, #0
   d7080:	f7fd bacc 	b.w	d461c <system_ctrl_set_app_request_handler>
   d7084:	2003f400 	.word	0x2003f400
   d7088:	000d6f79 	.word	0x000d6f79
   d708c:	9a271c1e 	.word	0x9a271c1e
   d7090:	2003e69c 	.word	0x2003e69c
   d7094:	00000000 	.word	0x00000000
   d7098:	000d7001 	.word	0x000d7001

000d709c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d709c:	4770      	bx	lr

000d709e <_ZN9IPAddressD0Ev>:
   d709e:	b510      	push	{r4, lr}
   d70a0:	2118      	movs	r1, #24
   d70a2:	4604      	mov	r4, r0
   d70a4:	f000 fa6d 	bl	d7582 <_ZdlPvj>
   d70a8:	4620      	mov	r0, r4
   d70aa:	bd10      	pop	{r4, pc}

000d70ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d70ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d70ae:	7d03      	ldrb	r3, [r0, #20]
   d70b0:	2b06      	cmp	r3, #6
{
   d70b2:	b08d      	sub	sp, #52	; 0x34
   d70b4:	460e      	mov	r6, r1
   d70b6:	f100 0704 	add.w	r7, r0, #4
   d70ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d70be:	d012      	beq.n	d70e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d70c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d70c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d70c8:	220a      	movs	r2, #10
   d70ca:	4630      	mov	r0, r6
   d70cc:	f7ff ff09 	bl	d6ee2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d70d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d70d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d70d4:	d019      	beq.n	d710a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d70d6:	2c00      	cmp	r4, #0
   d70d8:	d0f4      	beq.n	d70c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d70da:	212e      	movs	r1, #46	; 0x2e
   d70dc:	4630      	mov	r0, r6
   d70de:	f7ff fee7 	bl	d6eb0 <_ZN5Print5printEc>
   d70e2:	4404      	add	r4, r0
   d70e4:	e7ee      	b.n	d70c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d70e6:	232f      	movs	r3, #47	; 0x2f
   d70e8:	466a      	mov	r2, sp
   d70ea:	4639      	mov	r1, r7
   d70ec:	200a      	movs	r0, #10
		buf[0] = 0;
   d70ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d70f2:	f7fd f9f3 	bl	d44dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d70f6:	4668      	mov	r0, sp
   d70f8:	f000 fbdc 	bl	d78b4 <strlen>
   d70fc:	6833      	ldr	r3, [r6, #0]
   d70fe:	4602      	mov	r2, r0
   d7100:	68db      	ldr	r3, [r3, #12]
   d7102:	4669      	mov	r1, sp
   d7104:	4630      	mov	r0, r6
   d7106:	4798      	blx	r3
   d7108:	4604      	mov	r4, r0
    }
    return n;
}
   d710a:	4620      	mov	r0, r4
   d710c:	b00d      	add	sp, #52	; 0x34
   d710e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7110 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7110:	b510      	push	{r4, lr}
   d7112:	4b05      	ldr	r3, [pc, #20]	; (d7128 <_ZN9IPAddressC1Ev+0x18>)
   d7114:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7116:	2211      	movs	r2, #17
   d7118:	f840 3b04 	str.w	r3, [r0], #4
   d711c:	2100      	movs	r1, #0
   d711e:	f000 fb8b 	bl	d7838 <memset>
}
   d7122:	4620      	mov	r0, r4
   d7124:	bd10      	pop	{r4, pc}
   d7126:	bf00      	nop
   d7128:	000d7c10 	.word	0x000d7c10

000d712c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d712c:	4603      	mov	r3, r0
   d712e:	4a07      	ldr	r2, [pc, #28]	; (d714c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7130:	b510      	push	{r4, lr}
   d7132:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7136:	f101 0210 	add.w	r2, r1, #16
   d713a:	f851 4b04 	ldr.w	r4, [r1], #4
   d713e:	f843 4b04 	str.w	r4, [r3], #4
   d7142:	4291      	cmp	r1, r2
   d7144:	d1f9      	bne.n	d713a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7146:	780a      	ldrb	r2, [r1, #0]
   d7148:	701a      	strb	r2, [r3, #0]
}
   d714a:	bd10      	pop	{r4, pc}
   d714c:	000d7c10 	.word	0x000d7c10

000d7150 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7150:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7152:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7156:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d715a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d715e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7162:	2304      	movs	r3, #4
   d7164:	6041      	str	r1, [r0, #4]
   d7166:	7503      	strb	r3, [r0, #20]
}
   d7168:	bd10      	pop	{r4, pc}
	...

000d716c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d716c:	b513      	push	{r0, r1, r4, lr}
   d716e:	4b05      	ldr	r3, [pc, #20]	; (d7184 <_ZN9IPAddressC1EPKh+0x18>)
   d7170:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7172:	78cb      	ldrb	r3, [r1, #3]
   d7174:	9300      	str	r3, [sp, #0]
   d7176:	788b      	ldrb	r3, [r1, #2]
   d7178:	784a      	ldrb	r2, [r1, #1]
   d717a:	7809      	ldrb	r1, [r1, #0]
   d717c:	f7ff ffe8 	bl	d7150 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7180:	b002      	add	sp, #8
   d7182:	bd10      	pop	{r4, pc}
   d7184:	000d7c10 	.word	0x000d7c10

000d7188 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7188:	7441      	strb	r1, [r0, #17]
}
   d718a:	4770      	bx	lr

000d718c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d718c:	4770      	bx	lr

000d718e <_ZN9USBSerial4readEv>:
{
   d718e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7190:	2100      	movs	r1, #0
   d7192:	7c00      	ldrb	r0, [r0, #16]
   d7194:	f7fd fa02 	bl	d459c <HAL_USB_USART_Receive_Data>
}
   d7198:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d719c:	bd08      	pop	{r3, pc}

000d719e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d719e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d71a0:	2101      	movs	r1, #1
   d71a2:	7c00      	ldrb	r0, [r0, #16]
   d71a4:	f7fd f9fa 	bl	d459c <HAL_USB_USART_Receive_Data>
}
   d71a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d71ac:	bd08      	pop	{r3, pc}

000d71ae <_ZN9USBSerial17availableForWriteEv>:
{
   d71ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d71b0:	7c00      	ldrb	r0, [r0, #16]
   d71b2:	f7fd f9eb 	bl	d458c <HAL_USB_USART_Available_Data_For_Write>
}
   d71b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71ba:	bd08      	pop	{r3, pc}

000d71bc <_ZN9USBSerial9availableEv>:
{
   d71bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d71be:	7c00      	ldrb	r0, [r0, #16]
   d71c0:	f7fd f9dc 	bl	d457c <HAL_USB_USART_Available_Data>
}
   d71c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71c8:	bd08      	pop	{r3, pc}

000d71ca <_ZN9USBSerial5writeEh>:
{
   d71ca:	b513      	push	{r0, r1, r4, lr}
   d71cc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d71ce:	7c00      	ldrb	r0, [r0, #16]
{
   d71d0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d71d2:	f7fd f9db 	bl	d458c <HAL_USB_USART_Available_Data_For_Write>
   d71d6:	2800      	cmp	r0, #0
   d71d8:	9901      	ldr	r1, [sp, #4]
   d71da:	dc01      	bgt.n	d71e0 <_ZN9USBSerial5writeEh+0x16>
   d71dc:	7c60      	ldrb	r0, [r4, #17]
   d71de:	b120      	cbz	r0, d71ea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d71e0:	7c20      	ldrb	r0, [r4, #16]
   d71e2:	f7fd f9e3 	bl	d45ac <HAL_USB_USART_Send_Data>
   d71e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d71ea:	b002      	add	sp, #8
   d71ec:	bd10      	pop	{r4, pc}

000d71ee <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d71ee:	7c00      	ldrb	r0, [r0, #16]
   d71f0:	f7fd b9e4 	b.w	d45bc <HAL_USB_USART_Flush_Data>

000d71f4 <_ZN9USBSerialD0Ev>:
   d71f4:	b510      	push	{r4, lr}
   d71f6:	2114      	movs	r1, #20
   d71f8:	4604      	mov	r4, r0
   d71fa:	f000 f9c2 	bl	d7582 <_ZdlPvj>
   d71fe:	4620      	mov	r0, r4
   d7200:	bd10      	pop	{r4, pc}
	...

000d7204 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7204:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d720a:	4604      	mov	r4, r0
   d720c:	4608      	mov	r0, r1
   d720e:	2100      	movs	r1, #0
   d7210:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7214:	4b04      	ldr	r3, [pc, #16]	; (d7228 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7216:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7218:	2301      	movs	r3, #1
  _serial = serial;
   d721a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d721c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d721e:	4611      	mov	r1, r2
   d7220:	f7fd f99c 	bl	d455c <HAL_USB_USART_Init>
}
   d7224:	4620      	mov	r0, r4
   d7226:	bd10      	pop	{r4, pc}
   d7228:	000d7c24 	.word	0x000d7c24

000d722c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d722c:	7c00      	ldrb	r0, [r0, #16]
   d722e:	2200      	movs	r2, #0
   d7230:	f7fd b99c 	b.w	d456c <HAL_USB_USART_Begin>

000d7234 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d7234:	7c00      	ldrb	r0, [r0, #16]
   d7236:	f7fd b9c9 	b.w	d45cc <HAL_USB_USART_Is_Connected>

000d723a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d723a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d723c:	2214      	movs	r2, #20
{
   d723e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7240:	2100      	movs	r1, #0
   d7242:	f000 faf9 	bl	d7838 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7246:	4620      	mov	r0, r4
   d7248:	bd10      	pop	{r4, pc}
	...

000d724c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d724c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d724e:	4c10      	ldr	r4, [pc, #64]	; (d7290 <_Z16_fetch_usbserialv+0x44>)
{
   d7250:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7252:	a803      	add	r0, sp, #12
   d7254:	f7ff fff1 	bl	d723a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7258:	7821      	ldrb	r1, [r4, #0]
   d725a:	f3bf 8f5b 	dmb	ish
   d725e:	f011 0101 	ands.w	r1, r1, #1
   d7262:	d111      	bne.n	d7288 <_Z16_fetch_usbserialv+0x3c>
   d7264:	4620      	mov	r0, r4
   d7266:	9101      	str	r1, [sp, #4]
   d7268:	f7fc ff17 	bl	d409a <__cxa_guard_acquire>
   d726c:	9901      	ldr	r1, [sp, #4]
   d726e:	b158      	cbz	r0, d7288 <_Z16_fetch_usbserialv+0x3c>
   d7270:	aa03      	add	r2, sp, #12
   d7272:	4808      	ldr	r0, [pc, #32]	; (d7294 <_Z16_fetch_usbserialv+0x48>)
   d7274:	f7ff ffc6 	bl	d7204 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7278:	4620      	mov	r0, r4
   d727a:	f7fc ff13 	bl	d40a4 <__cxa_guard_release>
   d727e:	4a06      	ldr	r2, [pc, #24]	; (d7298 <_Z16_fetch_usbserialv+0x4c>)
   d7280:	4906      	ldr	r1, [pc, #24]	; (d729c <_Z16_fetch_usbserialv+0x50>)
   d7282:	4804      	ldr	r0, [pc, #16]	; (d7294 <_Z16_fetch_usbserialv+0x48>)
   d7284:	f000 f978 	bl	d7578 <__aeabi_atexit>
	return _usbserial;
}
   d7288:	4802      	ldr	r0, [pc, #8]	; (d7294 <_Z16_fetch_usbserialv+0x48>)
   d728a:	b008      	add	sp, #32
   d728c:	bd10      	pop	{r4, pc}
   d728e:	bf00      	nop
   d7290:	2003e6a4 	.word	0x2003e6a4
   d7294:	2003e6a8 	.word	0x2003e6a8
   d7298:	2003df50 	.word	0x2003df50
   d729c:	000d718d 	.word	0x000d718d

000d72a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d72a0:	4770      	bx	lr

000d72a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d72a2:	7441      	strb	r1, [r0, #17]
}
   d72a4:	4770      	bx	lr

000d72a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d72a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d72a8:	7c00      	ldrb	r0, [r0, #16]
   d72aa:	f7fd f94f 	bl	d454c <hal_usart_available_data_for_write>
}
   d72ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72b2:	bd08      	pop	{r3, pc}

000d72b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d72b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d72b6:	7c00      	ldrb	r0, [r0, #16]
   d72b8:	f7fd f928 	bl	d450c <hal_usart_available>
}
   d72bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d72c0:	bd08      	pop	{r3, pc}

000d72c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d72c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d72c4:	7c00      	ldrb	r0, [r0, #16]
   d72c6:	f7fd f931 	bl	d452c <hal_usart_peek>
}
   d72ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d72ce:	bd08      	pop	{r3, pc}

000d72d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d72d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d72d2:	7c00      	ldrb	r0, [r0, #16]
   d72d4:	f7fd f922 	bl	d451c <hal_usart_read>
}
   d72d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d72dc:	bd08      	pop	{r3, pc}

000d72de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d72de:	7c00      	ldrb	r0, [r0, #16]
   d72e0:	f7fd b92c 	b.w	d453c <hal_usart_flush>

000d72e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d72e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72e6:	7c45      	ldrb	r5, [r0, #17]
{
   d72e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72ea:	b12d      	cbz	r5, d72f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d72ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d72ee:	b003      	add	sp, #12
   d72f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d72f4:	f7fd b902 	b.w	d44fc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d72f8:	7c00      	ldrb	r0, [r0, #16]
   d72fa:	9101      	str	r1, [sp, #4]
   d72fc:	f7fd f926 	bl	d454c <hal_usart_available_data_for_write>
   d7300:	2800      	cmp	r0, #0
   d7302:	9901      	ldr	r1, [sp, #4]
   d7304:	dcf2      	bgt.n	d72ec <_ZN11USARTSerial5writeEh+0x8>
}
   d7306:	4628      	mov	r0, r5
   d7308:	b003      	add	sp, #12
   d730a:	bd30      	pop	{r4, r5, pc}

000d730c <_ZN11USARTSerialD0Ev>:
   d730c:	b510      	push	{r4, lr}
   d730e:	2114      	movs	r1, #20
   d7310:	4604      	mov	r4, r0
   d7312:	f000 f936 	bl	d7582 <_ZdlPvj>
   d7316:	4620      	mov	r0, r4
   d7318:	bd10      	pop	{r4, pc}
	...

000d731c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d731c:	b510      	push	{r4, lr}
   d731e:	f04f 0c00 	mov.w	ip, #0
   d7322:	4604      	mov	r4, r0
   d7324:	4608      	mov	r0, r1
   d7326:	4611      	mov	r1, r2
   d7328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d732c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7330:	4a04      	ldr	r2, [pc, #16]	; (d7344 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7332:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7334:	2201      	movs	r2, #1
  _serial = serial;
   d7336:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7338:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d733a:	461a      	mov	r2, r3
   d733c:	f7fd f8d6 	bl	d44ec <hal_usart_init>
}
   d7340:	4620      	mov	r0, r4
   d7342:	bd10      	pop	{r4, pc}
   d7344:	000d7c54 	.word	0x000d7c54

000d7348 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7348:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d734a:	4c0e      	ldr	r4, [pc, #56]	; (d7384 <_Z22__fetch_global_Serial1v+0x3c>)
   d734c:	7821      	ldrb	r1, [r4, #0]
   d734e:	f3bf 8f5b 	dmb	ish
   d7352:	f011 0101 	ands.w	r1, r1, #1
   d7356:	d112      	bne.n	d737e <_Z22__fetch_global_Serial1v+0x36>
   d7358:	4620      	mov	r0, r4
   d735a:	9101      	str	r1, [sp, #4]
   d735c:	f7fc fe9d 	bl	d409a <__cxa_guard_acquire>
   d7360:	9901      	ldr	r1, [sp, #4]
   d7362:	b160      	cbz	r0, d737e <_Z22__fetch_global_Serial1v+0x36>
   d7364:	4a08      	ldr	r2, [pc, #32]	; (d7388 <_Z22__fetch_global_Serial1v+0x40>)
   d7366:	4b09      	ldr	r3, [pc, #36]	; (d738c <_Z22__fetch_global_Serial1v+0x44>)
   d7368:	4809      	ldr	r0, [pc, #36]	; (d7390 <_Z22__fetch_global_Serial1v+0x48>)
   d736a:	f7ff ffd7 	bl	d731c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d736e:	4620      	mov	r0, r4
   d7370:	f7fc fe98 	bl	d40a4 <__cxa_guard_release>
   d7374:	4a07      	ldr	r2, [pc, #28]	; (d7394 <_Z22__fetch_global_Serial1v+0x4c>)
   d7376:	4908      	ldr	r1, [pc, #32]	; (d7398 <_Z22__fetch_global_Serial1v+0x50>)
   d7378:	4805      	ldr	r0, [pc, #20]	; (d7390 <_Z22__fetch_global_Serial1v+0x48>)
   d737a:	f000 f8fd 	bl	d7578 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d737e:	4804      	ldr	r0, [pc, #16]	; (d7390 <_Z22__fetch_global_Serial1v+0x48>)
   d7380:	b002      	add	sp, #8
   d7382:	bd10      	pop	{r4, pc}
   d7384:	2003e6bc 	.word	0x2003e6bc
   d7388:	2003e6c0 	.word	0x2003e6c0
   d738c:	2003e744 	.word	0x2003e744
   d7390:	2003e7c8 	.word	0x2003e7c8
   d7394:	2003df50 	.word	0x2003df50
   d7398:	000d72a1 	.word	0x000d72a1

000d739c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d739c:	2200      	movs	r2, #0
   d739e:	6840      	ldr	r0, [r0, #4]
   d73a0:	4611      	mov	r1, r2
   d73a2:	f7fd b967 	b.w	d4674 <network_ready>

000d73a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d73a6:	2200      	movs	r2, #0
   d73a8:	6840      	ldr	r0, [r0, #4]
   d73aa:	4611      	mov	r1, r2
   d73ac:	f7fd b982 	b.w	d46b4 <network_listening>

000d73b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d73b0:	2200      	movs	r2, #0
   d73b2:	6840      	ldr	r0, [r0, #4]
   d73b4:	4611      	mov	r1, r2
   d73b6:	f7fd b98d 	b.w	d46d4 <network_get_listen_timeout>

000d73ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d73ba:	6840      	ldr	r0, [r0, #4]
   d73bc:	2200      	movs	r2, #0
   d73be:	f7fd b981 	b.w	d46c4 <network_set_listen_timeout>

000d73c2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d73c2:	6840      	ldr	r0, [r0, #4]
   d73c4:	2200      	movs	r2, #0
   d73c6:	f081 0101 	eor.w	r1, r1, #1
   d73ca:	f7fd b96b 	b.w	d46a4 <network_listen>

000d73ce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d73ce:	2300      	movs	r3, #0
   d73d0:	6840      	ldr	r0, [r0, #4]
   d73d2:	461a      	mov	r2, r3
   d73d4:	4619      	mov	r1, r3
   d73d6:	f7fd b95d 	b.w	d4694 <network_off>

000d73da <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d73da:	2200      	movs	r2, #0
   d73dc:	6840      	ldr	r0, [r0, #4]
   d73de:	4611      	mov	r1, r2
   d73e0:	f7fd b938 	b.w	d4654 <network_connecting>

000d73e4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d73e4:	6840      	ldr	r0, [r0, #4]
   d73e6:	2200      	movs	r2, #0
   d73e8:	2102      	movs	r1, #2
   d73ea:	f7fd b93b 	b.w	d4664 <network_disconnect>

000d73ee <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d73ee:	2300      	movs	r3, #0
   d73f0:	6840      	ldr	r0, [r0, #4]
   d73f2:	461a      	mov	r2, r3
   d73f4:	f7fd b926 	b.w	d4644 <network_connect>

000d73f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d73f8:	4b02      	ldr	r3, [pc, #8]	; (d7404 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d73fa:	2204      	movs	r2, #4
   d73fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d73fe:	4a02      	ldr	r2, [pc, #8]	; (d7408 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7400:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7402:	4770      	bx	lr
   d7404:	2003e7dc 	.word	0x2003e7dc
   d7408:	000d7c84 	.word	0x000d7c84

000d740c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d740c:	2300      	movs	r3, #0
   d740e:	6840      	ldr	r0, [r0, #4]
   d7410:	461a      	mov	r2, r3
   d7412:	f7fd b917 	b.w	d4644 <network_connect>

000d7416 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7416:	6840      	ldr	r0, [r0, #4]
   d7418:	2200      	movs	r2, #0
   d741a:	2102      	movs	r1, #2
   d741c:	f7fd b922 	b.w	d4664 <network_disconnect>

000d7420 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7420:	2200      	movs	r2, #0
   d7422:	6840      	ldr	r0, [r0, #4]
   d7424:	4611      	mov	r1, r2
   d7426:	f7fd b915 	b.w	d4654 <network_connecting>

000d742a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d742a:	2200      	movs	r2, #0
   d742c:	6840      	ldr	r0, [r0, #4]
   d742e:	4611      	mov	r1, r2
   d7430:	f7fd b920 	b.w	d4674 <network_ready>

000d7434 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7434:	2300      	movs	r3, #0
   d7436:	6840      	ldr	r0, [r0, #4]
   d7438:	461a      	mov	r2, r3
   d743a:	4619      	mov	r1, r3
   d743c:	f7fd b922 	b.w	d4684 <network_on>

000d7440 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7440:	2300      	movs	r3, #0
   d7442:	6840      	ldr	r0, [r0, #4]
   d7444:	461a      	mov	r2, r3
   d7446:	4619      	mov	r1, r3
   d7448:	f7fd b924 	b.w	d4694 <network_off>

000d744c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d744c:	6840      	ldr	r0, [r0, #4]
   d744e:	2100      	movs	r1, #0
   d7450:	f7fd b948 	b.w	d46e4 <network_is_on>

000d7454 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7454:	6840      	ldr	r0, [r0, #4]
   d7456:	2100      	movs	r1, #0
   d7458:	f7fd b94c 	b.w	d46f4 <network_is_off>

000d745c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d745c:	6840      	ldr	r0, [r0, #4]
   d745e:	2200      	movs	r2, #0
   d7460:	f081 0101 	eor.w	r1, r1, #1
   d7464:	f7fd b91e 	b.w	d46a4 <network_listen>

000d7468 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7468:	6840      	ldr	r0, [r0, #4]
   d746a:	2200      	movs	r2, #0
   d746c:	f7fd b92a 	b.w	d46c4 <network_set_listen_timeout>

000d7470 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7470:	2200      	movs	r2, #0
   d7472:	6840      	ldr	r0, [r0, #4]
   d7474:	4611      	mov	r1, r2
   d7476:	f7fd b92d 	b.w	d46d4 <network_get_listen_timeout>

000d747a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d747a:	2200      	movs	r2, #0
   d747c:	6840      	ldr	r0, [r0, #4]
   d747e:	4611      	mov	r1, r2
   d7480:	f7fd b918 	b.w	d46b4 <network_listening>

000d7484 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7488:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d748a:	b095      	sub	sp, #84	; 0x54
   d748c:	4616      	mov	r6, r2
   d748e:	460d      	mov	r5, r1
   d7490:	4607      	mov	r7, r0
    IPAddress addr;
   d7492:	f7ff fe3d 	bl	d7110 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7496:	4621      	mov	r1, r4
   d7498:	2218      	movs	r2, #24
   d749a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d749c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d749e:	f000 f9cb 	bl	d7838 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d74a2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d74a4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d74a8:	4621      	mov	r1, r4
   d74aa:	466b      	mov	r3, sp
   d74ac:	aa0c      	add	r2, sp, #48	; 0x30
   d74ae:	4630      	mov	r0, r6
   d74b0:	f7fc ff42 	bl	d4338 <netdb_getaddrinfo>
    if (!r) {
   d74b4:	4604      	mov	r4, r0
   d74b6:	2800      	cmp	r0, #0
   d74b8:	d14c      	bne.n	d7554 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d74ba:	4602      	mov	r2, r0
   d74bc:	2101      	movs	r1, #1
   d74be:	6868      	ldr	r0, [r5, #4]
   d74c0:	f7fd f8d8 	bl	d4674 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d74c4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d74c6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d74c8:	4622      	mov	r2, r4
   d74ca:	6868      	ldr	r0, [r5, #4]
   d74cc:	f7fd f8d2 	bl	d4674 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d74d0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d74d2:	4681      	mov	r9, r0
        bool ok = false;
   d74d4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d74d6:	2e00      	cmp	r6, #0
   d74d8:	d03c      	beq.n	d7554 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d74da:	2900      	cmp	r1, #0
   d74dc:	d13a      	bne.n	d7554 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d74de:	6873      	ldr	r3, [r6, #4]
   d74e0:	2b02      	cmp	r3, #2
   d74e2:	d003      	beq.n	d74ec <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d74e4:	2b0a      	cmp	r3, #10
   d74e6:	d011      	beq.n	d750c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d74e8:	69f6      	ldr	r6, [r6, #28]
   d74ea:	e7f4      	b.n	d74d6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d74ec:	f1b8 0f00 	cmp.w	r8, #0
   d74f0:	d00a      	beq.n	d7508 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d74f2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d74f4:	a806      	add	r0, sp, #24
   d74f6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d74f8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d74fa:	f7ff fe37 	bl	d716c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d74fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7500:	1d3c      	adds	r4, r7, #4
   d7502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7504:	682b      	ldr	r3, [r5, #0]
   d7506:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7508:	4641      	mov	r1, r8
   d750a:	e7ed      	b.n	d74e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d750c:	f1b9 0f00 	cmp.w	r9, #0
   d7510:	d101      	bne.n	d7516 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7512:	4649      	mov	r1, r9
   d7514:	e7e8      	b.n	d74e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7516:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7518:	2210      	movs	r2, #16
   d751a:	a801      	add	r0, sp, #4
   d751c:	f000 f98c 	bl	d7838 <memset>
                    a.v = 6;
   d7520:	2306      	movs	r3, #6
   d7522:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7526:	ad01      	add	r5, sp, #4
   d7528:	f104 0308 	add.w	r3, r4, #8
   d752c:	3418      	adds	r4, #24
   d752e:	6818      	ldr	r0, [r3, #0]
   d7530:	6859      	ldr	r1, [r3, #4]
   d7532:	462a      	mov	r2, r5
   d7534:	c203      	stmia	r2!, {r0, r1}
   d7536:	3308      	adds	r3, #8
   d7538:	42a3      	cmp	r3, r4
   d753a:	4615      	mov	r5, r2
   d753c:	d1f7      	bne.n	d752e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d753e:	a901      	add	r1, sp, #4
   d7540:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7542:	ad07      	add	r5, sp, #28
   d7544:	f7ff fdf2 	bl	d712c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d754a:	1d3c      	adds	r4, r7, #4
   d754c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d754e:	682b      	ldr	r3, [r5, #0]
   d7550:	7023      	strb	r3, [r4, #0]
   d7552:	e7de      	b.n	d7512 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7554:	9800      	ldr	r0, [sp, #0]
   d7556:	f7fc fee7 	bl	d4328 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d755a:	4638      	mov	r0, r7
   d755c:	b015      	add	sp, #84	; 0x54
   d755e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7564 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7564:	4b02      	ldr	r3, [pc, #8]	; (d7570 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7566:	4a03      	ldr	r2, [pc, #12]	; (d7574 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7568:	601a      	str	r2, [r3, #0]
   d756a:	2200      	movs	r2, #0
   d756c:	605a      	str	r2, [r3, #4]

} // spark
   d756e:	4770      	bx	lr
   d7570:	2003e7e4 	.word	0x2003e7e4
   d7574:	000d7cc0 	.word	0x000d7cc0

000d7578 <__aeabi_atexit>:
   d7578:	460b      	mov	r3, r1
   d757a:	4601      	mov	r1, r0
   d757c:	4618      	mov	r0, r3
   d757e:	f000 b917 	b.w	d77b0 <__cxa_atexit>

000d7582 <_ZdlPvj>:
   d7582:	f7fc bd88 	b.w	d4096 <_ZdlPv>

000d7586 <_ZSt25__throw_bad_function_callv>:
   d7586:	b508      	push	{r3, lr}
   d7588:	f7fd f8dc 	bl	d4744 <abort>

000d758c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d758c:	4901      	ldr	r1, [pc, #4]	; (d7594 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d758e:	f000 b8f9 	b.w	d7784 <_ZNKSt9type_infoeqERKS_>
   d7592:	bf00      	nop
   d7594:	000d7d0c 	.word	0x000d7d0c

000d7598 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7598:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d759a:	2400      	movs	r4, #0
   d759c:	2310      	movs	r3, #16
   d759e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d75a2:	6803      	ldr	r3, [r0, #0]
   d75a4:	9400      	str	r4, [sp, #0]
   d75a6:	699e      	ldr	r6, [r3, #24]
   d75a8:	f88d 4004 	strb.w	r4, [sp, #4]
   d75ac:	4615      	mov	r5, r2
   d75ae:	466b      	mov	r3, sp
   d75b0:	6812      	ldr	r2, [r2, #0]
   d75b2:	47b0      	blx	r6
   d75b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d75b8:	f003 0306 	and.w	r3, r3, #6
   d75bc:	2b06      	cmp	r3, #6
   d75be:	bf03      	ittte	eq
   d75c0:	9b00      	ldreq	r3, [sp, #0]
   d75c2:	602b      	streq	r3, [r5, #0]
   d75c4:	2001      	moveq	r0, #1
   d75c6:	4620      	movne	r0, r4
   d75c8:	b004      	add	sp, #16
   d75ca:	bd70      	pop	{r4, r5, r6, pc}

000d75cc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d75cc:	9800      	ldr	r0, [sp, #0]
   d75ce:	4290      	cmp	r0, r2
   d75d0:	bf14      	ite	ne
   d75d2:	2001      	movne	r0, #1
   d75d4:	2006      	moveq	r0, #6
   d75d6:	4770      	bx	lr

000d75d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d75d8:	b510      	push	{r4, lr}
   d75da:	4b03      	ldr	r3, [pc, #12]	; (d75e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d75dc:	6003      	str	r3, [r0, #0]
   d75de:	4604      	mov	r4, r0
   d75e0:	f000 f8cd 	bl	d777e <_ZNSt9type_infoD1Ev>
   d75e4:	4620      	mov	r0, r4
   d75e6:	bd10      	pop	{r4, pc}
   d75e8:	000d7d4c 	.word	0x000d7d4c

000d75ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d75ec:	b510      	push	{r4, lr}
   d75ee:	4604      	mov	r4, r0
   d75f0:	f7ff fff2 	bl	d75d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d75f4:	4620      	mov	r0, r4
   d75f6:	2108      	movs	r1, #8
   d75f8:	f7ff ffc3 	bl	d7582 <_ZdlPvj>
   d75fc:	4620      	mov	r0, r4
   d75fe:	bd10      	pop	{r4, pc}

000d7600 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7604:	461f      	mov	r7, r3
   d7606:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d760a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d760e:	4598      	cmp	r8, r3
   d7610:	4606      	mov	r6, r0
   d7612:	4615      	mov	r5, r2
   d7614:	d107      	bne.n	d7626 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7616:	9907      	ldr	r1, [sp, #28]
   d7618:	f000 f8b4 	bl	d7784 <_ZNKSt9type_infoeqERKS_>
   d761c:	b118      	cbz	r0, d7626 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d761e:	7165      	strb	r5, [r4, #5]
   d7620:	2000      	movs	r0, #0
   d7622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7626:	4639      	mov	r1, r7
   d7628:	4630      	mov	r0, r6
   d762a:	f000 f8ab 	bl	d7784 <_ZNKSt9type_infoeqERKS_>
   d762e:	2800      	cmp	r0, #0
   d7630:	d0f6      	beq.n	d7620 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7632:	2301      	movs	r3, #1
   d7634:	f8c4 8000 	str.w	r8, [r4]
   d7638:	7125      	strb	r5, [r4, #4]
   d763a:	71a3      	strb	r3, [r4, #6]
   d763c:	e7f0      	b.n	d7620 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d763e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d763e:	b538      	push	{r3, r4, r5, lr}
   d7640:	4615      	mov	r5, r2
   d7642:	461c      	mov	r4, r3
   d7644:	f000 f89e 	bl	d7784 <_ZNKSt9type_infoeqERKS_>
   d7648:	b120      	cbz	r0, d7654 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d764a:	2308      	movs	r3, #8
   d764c:	60e3      	str	r3, [r4, #12]
   d764e:	2306      	movs	r3, #6
   d7650:	6025      	str	r5, [r4, #0]
   d7652:	7123      	strb	r3, [r4, #4]
   d7654:	bd38      	pop	{r3, r4, r5, pc}

000d7656 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7656:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7658:	4605      	mov	r5, r0
   d765a:	460c      	mov	r4, r1
   d765c:	9201      	str	r2, [sp, #4]
   d765e:	461e      	mov	r6, r3
   d7660:	f000 f890 	bl	d7784 <_ZNKSt9type_infoeqERKS_>
   d7664:	b950      	cbnz	r0, d767c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7666:	2e03      	cmp	r6, #3
   d7668:	d808      	bhi.n	d767c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d766a:	6823      	ldr	r3, [r4, #0]
   d766c:	9a01      	ldr	r2, [sp, #4]
   d766e:	695b      	ldr	r3, [r3, #20]
   d7670:	4629      	mov	r1, r5
   d7672:	4620      	mov	r0, r4
   d7674:	b002      	add	sp, #8
   d7676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d767a:	4718      	bx	r3
   d767c:	b002      	add	sp, #8
   d767e:	bd70      	pop	{r4, r5, r6, pc}

000d7680 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7680:	b510      	push	{r4, lr}
   d7682:	4b03      	ldr	r3, [pc, #12]	; (d7690 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7684:	6003      	str	r3, [r0, #0]
   d7686:	4604      	mov	r4, r0
   d7688:	f7ff ffa6 	bl	d75d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d768c:	4620      	mov	r0, r4
   d768e:	bd10      	pop	{r4, pc}
   d7690:	000d7dac 	.word	0x000d7dac

000d7694 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7694:	b510      	push	{r4, lr}
   d7696:	4604      	mov	r4, r0
   d7698:	f7ff fff2 	bl	d7680 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d769c:	4620      	mov	r0, r4
   d769e:	210c      	movs	r1, #12
   d76a0:	f7ff ff6f 	bl	d7582 <_ZdlPvj>
   d76a4:	4620      	mov	r0, r4
   d76a6:	bd10      	pop	{r4, pc}

000d76a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d76a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d76aa:	9f08      	ldr	r7, [sp, #32]
   d76ac:	4297      	cmp	r7, r2
   d76ae:	4605      	mov	r5, r0
   d76b0:	460e      	mov	r6, r1
   d76b2:	4614      	mov	r4, r2
   d76b4:	d00a      	beq.n	d76cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d76b6:	68a8      	ldr	r0, [r5, #8]
   d76b8:	6802      	ldr	r2, [r0, #0]
   d76ba:	9708      	str	r7, [sp, #32]
   d76bc:	6a15      	ldr	r5, [r2, #32]
   d76be:	4631      	mov	r1, r6
   d76c0:	4622      	mov	r2, r4
   d76c2:	46ac      	mov	ip, r5
   d76c4:	b003      	add	sp, #12
   d76c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d76ca:	4760      	bx	ip
   d76cc:	4619      	mov	r1, r3
   d76ce:	9301      	str	r3, [sp, #4]
   d76d0:	f000 f858 	bl	d7784 <_ZNKSt9type_infoeqERKS_>
   d76d4:	9b01      	ldr	r3, [sp, #4]
   d76d6:	2800      	cmp	r0, #0
   d76d8:	d0ed      	beq.n	d76b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d76da:	2006      	movs	r0, #6
   d76dc:	b003      	add	sp, #12
   d76de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d76e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d76e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76e4:	460d      	mov	r5, r1
   d76e6:	4619      	mov	r1, r3
   d76e8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d76ec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d76f0:	4681      	mov	r9, r0
   d76f2:	4617      	mov	r7, r2
   d76f4:	4698      	mov	r8, r3
   d76f6:	f000 f845 	bl	d7784 <_ZNKSt9type_infoeqERKS_>
   d76fa:	b190      	cbz	r0, d7722 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d76fc:	2d00      	cmp	r5, #0
   d76fe:	6034      	str	r4, [r6, #0]
   d7700:	7137      	strb	r7, [r6, #4]
   d7702:	db09      	blt.n	d7718 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7704:	1961      	adds	r1, r4, r5
   d7706:	458a      	cmp	sl, r1
   d7708:	bf0c      	ite	eq
   d770a:	2106      	moveq	r1, #6
   d770c:	2101      	movne	r1, #1
   d770e:	71b1      	strb	r1, [r6, #6]
   d7710:	2000      	movs	r0, #0
   d7712:	b001      	add	sp, #4
   d7714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7718:	3502      	adds	r5, #2
   d771a:	d1f9      	bne.n	d7710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d771c:	2301      	movs	r3, #1
   d771e:	71b3      	strb	r3, [r6, #6]
   d7720:	e7f6      	b.n	d7710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7722:	4554      	cmp	r4, sl
   d7724:	d106      	bne.n	d7734 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7726:	4659      	mov	r1, fp
   d7728:	4648      	mov	r0, r9
   d772a:	f000 f82b 	bl	d7784 <_ZNKSt9type_infoeqERKS_>
   d772e:	b108      	cbz	r0, d7734 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7730:	7177      	strb	r7, [r6, #5]
   d7732:	e7ed      	b.n	d7710 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7734:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7738:	6803      	ldr	r3, [r0, #0]
   d773a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d773e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7742:	69dc      	ldr	r4, [r3, #28]
   d7744:	463a      	mov	r2, r7
   d7746:	4643      	mov	r3, r8
   d7748:	4629      	mov	r1, r5
   d774a:	46a4      	mov	ip, r4
   d774c:	b001      	add	sp, #4
   d774e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7752:	4760      	bx	ip

000d7754 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7758:	4607      	mov	r7, r0
   d775a:	460c      	mov	r4, r1
   d775c:	4615      	mov	r5, r2
   d775e:	461e      	mov	r6, r3
   d7760:	f7ff ff6d 	bl	d763e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7764:	b948      	cbnz	r0, d777a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7766:	68b8      	ldr	r0, [r7, #8]
   d7768:	6803      	ldr	r3, [r0, #0]
   d776a:	699f      	ldr	r7, [r3, #24]
   d776c:	462a      	mov	r2, r5
   d776e:	4633      	mov	r3, r6
   d7770:	4621      	mov	r1, r4
   d7772:	46bc      	mov	ip, r7
   d7774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7778:	4760      	bx	ip
   d777a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d777e <_ZNSt9type_infoD1Ev>:
   d777e:	4770      	bx	lr

000d7780 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7780:	2000      	movs	r0, #0
   d7782:	4770      	bx	lr

000d7784 <_ZNKSt9type_infoeqERKS_>:
   d7784:	4281      	cmp	r1, r0
   d7786:	b508      	push	{r3, lr}
   d7788:	d00e      	beq.n	d77a8 <_ZNKSt9type_infoeqERKS_+0x24>
   d778a:	6840      	ldr	r0, [r0, #4]
   d778c:	7803      	ldrb	r3, [r0, #0]
   d778e:	2b2a      	cmp	r3, #42	; 0x2a
   d7790:	d00c      	beq.n	d77ac <_ZNKSt9type_infoeqERKS_+0x28>
   d7792:	6849      	ldr	r1, [r1, #4]
   d7794:	780b      	ldrb	r3, [r1, #0]
   d7796:	2b2a      	cmp	r3, #42	; 0x2a
   d7798:	bf08      	it	eq
   d779a:	3101      	addeq	r1, #1
   d779c:	f000 f878 	bl	d7890 <strcmp>
   d77a0:	fab0 f080 	clz	r0, r0
   d77a4:	0940      	lsrs	r0, r0, #5
   d77a6:	bd08      	pop	{r3, pc}
   d77a8:	2001      	movs	r0, #1
   d77aa:	e7fc      	b.n	d77a6 <_ZNKSt9type_infoeqERKS_+0x22>
   d77ac:	2000      	movs	r0, #0
   d77ae:	e7fa      	b.n	d77a6 <_ZNKSt9type_infoeqERKS_+0x22>

000d77b0 <__cxa_atexit>:
   d77b0:	b510      	push	{r4, lr}
   d77b2:	4c05      	ldr	r4, [pc, #20]	; (d77c8 <__cxa_atexit+0x18>)
   d77b4:	4613      	mov	r3, r2
   d77b6:	b12c      	cbz	r4, d77c4 <__cxa_atexit+0x14>
   d77b8:	460a      	mov	r2, r1
   d77ba:	4601      	mov	r1, r0
   d77bc:	2002      	movs	r0, #2
   d77be:	f3af 8000 	nop.w
   d77c2:	bd10      	pop	{r4, pc}
   d77c4:	4620      	mov	r0, r4
   d77c6:	e7fc      	b.n	d77c2 <__cxa_atexit+0x12>
   d77c8:	00000000 	.word	0x00000000

000d77cc <memcmp>:
   d77cc:	b530      	push	{r4, r5, lr}
   d77ce:	3901      	subs	r1, #1
   d77d0:	2400      	movs	r4, #0
   d77d2:	42a2      	cmp	r2, r4
   d77d4:	d101      	bne.n	d77da <memcmp+0xe>
   d77d6:	2000      	movs	r0, #0
   d77d8:	e005      	b.n	d77e6 <memcmp+0x1a>
   d77da:	5d03      	ldrb	r3, [r0, r4]
   d77dc:	3401      	adds	r4, #1
   d77de:	5d0d      	ldrb	r5, [r1, r4]
   d77e0:	42ab      	cmp	r3, r5
   d77e2:	d0f6      	beq.n	d77d2 <memcmp+0x6>
   d77e4:	1b58      	subs	r0, r3, r5
   d77e6:	bd30      	pop	{r4, r5, pc}

000d77e8 <memcpy>:
   d77e8:	440a      	add	r2, r1
   d77ea:	4291      	cmp	r1, r2
   d77ec:	f100 33ff 	add.w	r3, r0, #4294967295
   d77f0:	d100      	bne.n	d77f4 <memcpy+0xc>
   d77f2:	4770      	bx	lr
   d77f4:	b510      	push	{r4, lr}
   d77f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d77fe:	4291      	cmp	r1, r2
   d7800:	d1f9      	bne.n	d77f6 <memcpy+0xe>
   d7802:	bd10      	pop	{r4, pc}

000d7804 <memmove>:
   d7804:	4288      	cmp	r0, r1
   d7806:	b510      	push	{r4, lr}
   d7808:	eb01 0402 	add.w	r4, r1, r2
   d780c:	d902      	bls.n	d7814 <memmove+0x10>
   d780e:	4284      	cmp	r4, r0
   d7810:	4623      	mov	r3, r4
   d7812:	d807      	bhi.n	d7824 <memmove+0x20>
   d7814:	1e43      	subs	r3, r0, #1
   d7816:	42a1      	cmp	r1, r4
   d7818:	d008      	beq.n	d782c <memmove+0x28>
   d781a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d781e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7822:	e7f8      	b.n	d7816 <memmove+0x12>
   d7824:	4402      	add	r2, r0
   d7826:	4601      	mov	r1, r0
   d7828:	428a      	cmp	r2, r1
   d782a:	d100      	bne.n	d782e <memmove+0x2a>
   d782c:	bd10      	pop	{r4, pc}
   d782e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7832:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7836:	e7f7      	b.n	d7828 <memmove+0x24>

000d7838 <memset>:
   d7838:	4402      	add	r2, r0
   d783a:	4603      	mov	r3, r0
   d783c:	4293      	cmp	r3, r2
   d783e:	d100      	bne.n	d7842 <memset+0xa>
   d7840:	4770      	bx	lr
   d7842:	f803 1b01 	strb.w	r1, [r3], #1
   d7846:	e7f9      	b.n	d783c <memset+0x4>

000d7848 <srand>:
   d7848:	b538      	push	{r3, r4, r5, lr}
   d784a:	4b0d      	ldr	r3, [pc, #52]	; (d7880 <srand+0x38>)
   d784c:	681d      	ldr	r5, [r3, #0]
   d784e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7850:	4604      	mov	r4, r0
   d7852:	b97b      	cbnz	r3, d7874 <srand+0x2c>
   d7854:	2018      	movs	r0, #24
   d7856:	f7fc ff5d 	bl	d4714 <malloc>
   d785a:	4a0a      	ldr	r2, [pc, #40]	; (d7884 <srand+0x3c>)
   d785c:	4b0a      	ldr	r3, [pc, #40]	; (d7888 <srand+0x40>)
   d785e:	63a8      	str	r0, [r5, #56]	; 0x38
   d7860:	e9c0 2300 	strd	r2, r3, [r0]
   d7864:	4b09      	ldr	r3, [pc, #36]	; (d788c <srand+0x44>)
   d7866:	6083      	str	r3, [r0, #8]
   d7868:	230b      	movs	r3, #11
   d786a:	8183      	strh	r3, [r0, #12]
   d786c:	2201      	movs	r2, #1
   d786e:	2300      	movs	r3, #0
   d7870:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7874:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7876:	2200      	movs	r2, #0
   d7878:	611c      	str	r4, [r3, #16]
   d787a:	615a      	str	r2, [r3, #20]
   d787c:	bd38      	pop	{r3, r4, r5, pc}
   d787e:	bf00      	nop
   d7880:	2003deec 	.word	0x2003deec
   d7884:	abcd330e 	.word	0xabcd330e
   d7888:	e66d1234 	.word	0xe66d1234
   d788c:	0005deec 	.word	0x0005deec

000d7890 <strcmp>:
   d7890:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7894:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7898:	2a01      	cmp	r2, #1
   d789a:	bf28      	it	cs
   d789c:	429a      	cmpcs	r2, r3
   d789e:	d0f7      	beq.n	d7890 <strcmp>
   d78a0:	1ad0      	subs	r0, r2, r3
   d78a2:	4770      	bx	lr

000d78a4 <strcpy>:
   d78a4:	4603      	mov	r3, r0
   d78a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d78aa:	f803 2b01 	strb.w	r2, [r3], #1
   d78ae:	2a00      	cmp	r2, #0
   d78b0:	d1f9      	bne.n	d78a6 <strcpy+0x2>
   d78b2:	4770      	bx	lr

000d78b4 <strlen>:
   d78b4:	4603      	mov	r3, r0
   d78b6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d78ba:	2a00      	cmp	r2, #0
   d78bc:	d1fb      	bne.n	d78b6 <strlen+0x2>
   d78be:	1a18      	subs	r0, r3, r0
   d78c0:	3801      	subs	r0, #1
   d78c2:	4770      	bx	lr

000d78c4 <strnlen>:
   d78c4:	b510      	push	{r4, lr}
   d78c6:	4602      	mov	r2, r0
   d78c8:	4401      	add	r1, r0
   d78ca:	428a      	cmp	r2, r1
   d78cc:	4613      	mov	r3, r2
   d78ce:	d101      	bne.n	d78d4 <strnlen+0x10>
   d78d0:	1a18      	subs	r0, r3, r0
   d78d2:	bd10      	pop	{r4, pc}
   d78d4:	781c      	ldrb	r4, [r3, #0]
   d78d6:	3201      	adds	r2, #1
   d78d8:	2c00      	cmp	r4, #0
   d78da:	d1f6      	bne.n	d78ca <strnlen+0x6>
   d78dc:	e7f8      	b.n	d78d0 <strnlen+0xc>

000d78de <link_code_end>:
	...

000d78e0 <dynalib_user>:
   d78e0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d78f0:	0000 0000 6543 746e 6172 206c 6e69 7469     ....Central init
   d7900:	6169 696c 657a 2e64 2e2e 3600 3445 3030     ialized....6E400
   d7910:	3030 2d31 3542 3341 462d 3933 2d33 3045     001-B5A3-F393-E0
   d7920:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   d7930:	4536 3034 3030 3230 422d 4135 2d33 3346     6E400002-B5A3-F3
   d7940:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   d7950:	4143 4539 3600 3445 3030 3030 2d33 3542     CA9E.6E400003-B5
   d7960:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   d7970:	3245 4434 4343 3941 0045 0000               E24DCCA9E...

000d797c <_ZTVN5spark13EthernetClassE>:
	...
   d7984:	47c3 000d 47b9 000d 47af 000d 47a5 000d     .G...G...G...G..
   d7994:	4799 000d 478d 000d 744d 000d 7455 000d     .G...G..Mt..Ut..
   d79a4:	4781 000d 4779 000d 476f 000d 4765 000d     .G..yG..oG..eG..
   d79b4:	7485 000d 6977 6972 676e 622e 656c 5300     .t..wiring.ble.S
   d79c4:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d79d4:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d79e4:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d79f4:	6172 7463 7265 7369 6974 7363 6f20 2066     racteristics of 
   d7a04:	6573 7672 6369 3a65 2520 2e73 5000 6565     service: %s..Pee
   d7a14:	2072 6564 6976 6563 6920 2073 696d 7373     r device is miss
   d7a24:	6e69 2167 4600 6961 656c 2064 6f74 6120     ing!.Failed to a
   d7a34:	6c6c 636f 7461 2065 656d 6f6d 7972 0021     llocate memory!.
   d7a44:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   d7a54:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   d7a64:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   d7a74:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   d7a84:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   d7a94:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   d7aa4:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d7ab4:	646e 6420 7369 6f63 6576 6572 2064 6573     nd discovered se
   d7ac4:	7672 6369 2e65 4300 6e61 6f6e 2074 6461     rvice..Cannot ad
   d7ad4:	2064 656e 2077 6570 7265 6420 7665 6369     d new peer devic
   d7ae4:	2e65 4e00 7765 7020 7265 7069 6568 6172     e..New periphera
   d7af4:	206c 7369 6320 6e6f 656e 7463 6465 002e     l is connected..
   d7b04:	6843 7261 6361 6574 6972 7473 6369 6420     Characteristic d
   d7b14:	7369 6f63 6576 6572 2e64 4400 7369 6f63     iscovered..Disco
   d7b24:	6576 6572 2064 6863 7261 6361 6574 6972     vered characteri
   d7b34:	7473 6369 7327 6820 6e61 6c64 2065 7369     stic's handle is
   d7b44:	6920 766e 6c61 6469 002e 6146 6c69 6465      invalid..Failed
   d7b54:	7420 206f 7061 6570 646e 6420 7369 6f63      to append disco
   d7b64:	6576 6572 2064 6863 7261 6361 6574 6972     vered characteri
   d7b74:	7473 6369 002e 0000                         stic....

000d7b7c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7b84:	4a15 000d 4a79 000d 4d15 000d 4aa3 000d     .J..yJ...M...J..
   d7b94:	4a19 000d                                   .J..

000d7b98 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7ba0:	4a11 000d 4a87 000d 4a13 000d 4aa7 000d     .J...J...J...J..
   d7bb0:	4a39 000d                                   9J..

000d7bb4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7bbc:	4a0f 000d 4a95 000d 59c3 000d 4aab 000d     .J...J...Y...J..
   d7bcc:	4a59 000d                                   YJ..

000d7bd0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d7bd8:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d7be8:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d7bf8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d7c08 <_ZTV9IPAddress>:
	...
   d7c10:	70ad 000d 709d 000d 709f 000d               .p...p...p..

000d7c1c <_ZTV9USBSerial>:
	...
   d7c24:	718d 000d 71f5 000d 71cb 000d 6e61 000d     .q...q...q..an..
   d7c34:	71bd 000d 718f 000d 719f 000d 71ef 000d     .q...q...q...q..
   d7c44:	71af 000d 7189 000d                         .q...q..

000d7c4c <_ZTV11USARTSerial>:
	...
   d7c54:	72a1 000d 730d 000d 72e5 000d 6e61 000d     .r...s...r..an..
   d7c64:	72b5 000d 72d1 000d 72c3 000d 72df 000d     .r...r...r...r..
   d7c74:	72a3 000d 72a7 000d                         .r...r..

000d7c7c <_ZTVN5spark9WiFiClassE>:
	...
   d7c84:	73ef 000d 73e5 000d 73db 000d 739d 000d     .s...s...s...s..
   d7c94:	6f1f 000d 73cf 000d 744d 000d 7455 000d     .o...s..Mt..Ut..
   d7ca4:	73c3 000d 73bb 000d 73b1 000d 73a7 000d     .s...s...s...s..
   d7cb4:	7485 000d                                   .t..

000d7cb8 <_ZTVN5spark12NetworkClassE>:
	...
   d7cc0:	740d 000d 7417 000d 7421 000d 742b 000d     .t...t..!t..+t..
   d7cd0:	7435 000d 7441 000d 744d 000d 7455 000d     5t..At..Mt..Ut..
   d7ce0:	745d 000d 7469 000d 7471 000d 747b 000d     ]t..it..qt..{t..
   d7cf0:	7485 000d                                   .t..

000d7cf4 <_ZTSSt19_Sp_make_shared_tag>:
   d7cf4:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d7d04:	6572 5f64 6174 0067                         red_tag.

000d7d0c <_ZTISt19_Sp_make_shared_tag>:
   d7d0c:	7d4c 000d 7cf4 000d                         L}...|..

000d7d14 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d7d14:	7dac 000d 7d20 000d 7dd0 000d               .}.. }...}..

000d7d20 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d7d20:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d7d30:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d7d40:	0045 0000                                   E...

000d7d44 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d7d44:	0000 0000 7d14 000d 75d9 000d 75ed 000d     .....}...u...u..
   d7d54:	7781 000d 7781 000d 7657 000d 7599 000d     .w...w..Wv...u..
   d7d64:	763f 000d 7601 000d 75cd 000d               ?v...v...u..

000d7d70 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d7d70:	7dac 000d 7d7c 000d 7d14 000d               .}..|}...}..

000d7d7c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d7d7c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d7d8c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d7d9c:	666e 456f 0000 0000                         nfoE....

000d7da4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d7da4:	0000 0000 7d70 000d 7681 000d 7695 000d     ....p}...v...v..
   d7db4:	7781 000d 7781 000d 7657 000d 7599 000d     .w...w..Wv...u..
   d7dc4:	7755 000d 76e1 000d 76a9 000d               Uw...v...v..

000d7dd0 <_ZTISt9type_info>:
   d7dd0:	7d4c 000d 7dd8 000d                         L}...}..

000d7dd8 <_ZTSSt9type_info>:
   d7dd8:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d7de5 <link_const_variable_data_end>:
   d7de5:	00          	.byte	0x00
	...

000d7de8 <link_constructors_location>:
   d7de8:	000d424d 	.word	0x000d424d
   d7dec:	000d47cd 	.word	0x000d47cd
   d7df0:	000d47e1 	.word	0x000d47e1
   d7df4:	000d6e39 	.word	0x000d6e39
   d7df8:	000d6f2d 	.word	0x000d6f2d
   d7dfc:	000d6f3d 	.word	0x000d6f3d
   d7e00:	000d6f5d 	.word	0x000d6f5d
   d7e04:	000d73f9 	.word	0x000d73f9
   d7e08:	000d7565 	.word	0x000d7565

000d7e0c <link_constructors_end>:
   d7e0c:	00000000 	.word	0x00000000
